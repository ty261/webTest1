{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LIJIN\\\\Desktop\\\\webTest\\\\Bak\\\\webTest\\\\frontend\\\\src\\\\components\\\\AddSensorDialog.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Dialog, DialogTitle, DialogContent, DialogActions, TextField, Button, FormControl, InputLabel, Select, MenuItem, Box, FormHelperText, CircularProgress, InputAdornment } from '@mui/material';\nimport { SENSOR_TYPES } from '../config';\nimport { sensorAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddSensorDialog = ({\n  open,\n  onClose,\n  onSensorAdded\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    name: '',\n    type: '',\n    location: '',\n    model: '',\n    manufacturer: '',\n    mqtt_topic: '',\n    current_value: ''\n  });\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [autoGenerateTopic, setAutoGenerateTopic] = useState(true);\n\n  // Function to generate MQTT topic based on sensor type and location\n  const generateMqttTopic = (type, location) => {\n    if (!type || !location) return '';\n\n    // Format: farm/sensors/{type}/{sanitized_location}\n    const sanitizedLocation = location.trim().toLowerCase().replace(/\\s+/g, '_').replace(/[^a-z0-9_]/g, '');\n    return `farm/sensors/${type}/${sanitizedLocation}`;\n  };\n  const validateForm = () => {\n    const newErrors = {};\n    if (!formData.name.trim()) newErrors.name = 'Name is required';\n    if (!formData.type) newErrors.type = 'Type is required';\n    if (!formData.location.trim()) newErrors.location = 'Location is required';\n    if (!formData.mqtt_topic.trim()) newErrors.mqtt_topic = 'MQTT Topic is required';\n    if (formData.current_value === '' || isNaN(formData.current_value)) newErrors.current_value = 'Valid reading value is required';\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n\n    // Update form data\n    setFormData(prev => {\n      const updated = {\n        ...prev,\n        [name]: value\n      };\n\n      // Automatically generate MQTT topic when type or location changes\n      if (autoGenerateTopic && (name === 'type' || name === 'location')) {\n        const topicType = name === 'type' ? value : prev.type;\n        const topicLocation = name === 'location' ? value : prev.location;\n        updated.mqtt_topic = generateMqttTopic(topicType, topicLocation);\n      }\n      return updated;\n    });\n\n    // Clear error when field is modified\n    if (errors[name]) {\n      setErrors(prev => ({\n        ...prev,\n        [name]: undefined\n      }));\n    }\n  };\n\n  // Function to toggle auto-generate topic\n  const handleTopicChange = e => {\n    const {\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      mqtt_topic: value\n    }));\n\n    // If user manually edits the topic, turn off auto-generation\n    if (autoGenerateTopic && value !== generateMqttTopic(formData.type, formData.location)) {\n      setAutoGenerateTopic(false);\n    }\n\n    // Clear error when field is modified\n    if (errors.mqtt_topic) {\n      setErrors(prev => ({\n        ...prev,\n        mqtt_topic: undefined\n      }));\n    }\n  };\n  const handleSubmit = async () => {\n    if (!validateForm()) return;\n    setLoading(true);\n    try {\n      var _SENSOR_TYPES$find;\n      // In a real application, this would call the actual API\n      // const response = await sensorAPI.addSensor(formData);\n\n      // Using mock implementation for now\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Simulate a successful response\n      const newSensor = {\n        id: Math.floor(Math.random() * 1000) + 5,\n        // Random ID for mock\n        ...formData,\n        current_value: parseFloat(formData.current_value),\n        status: 'active',\n        is_active: true,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        calibration_date: new Date().toISOString(),\n        last_reading: {\n          value: parseFloat(formData.current_value),\n          unit: ((_SENSOR_TYPES$find = SENSOR_TYPES.find(t => t.id === formData.type)) === null || _SENSOR_TYPES$find === void 0 ? void 0 : _SENSOR_TYPES$find.unit) || '',\n          timestamp: new Date().toISOString()\n        }\n      };\n      onSensorAdded(newSensor);\n      handleClose();\n    } catch (error) {\n      console.error('Failed to add sensor:', error);\n      setErrors(prev => ({\n        ...prev,\n        submit: 'Failed to add sensor. Please try again.'\n      }));\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleClose = () => {\n    setFormData({\n      name: '',\n      type: '',\n      location: '',\n      model: '',\n      manufacturer: '',\n      mqtt_topic: '',\n      current_value: ''\n    });\n    setErrors({});\n    onClose();\n  };\n\n  // Get unit label for current value field\n  const getCurrentValueUnit = () => {\n    if (!formData.type) return '';\n    const sensorType = SENSOR_TYPES.find(t => t.id === formData.type);\n    return sensorType ? sensorType.unit : '';\n  };\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: open,\n    onClose: handleClose,\n    maxWidth: \"sm\",\n    fullWidth: true,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: \"Add New Sensor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          margin: \"dense\",\n          label: \"Sensor Name\",\n          name: \"name\",\n          value: formData.name,\n          onChange: handleChange,\n          error: !!errors.name,\n          helperText: errors.name,\n          disabled: loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          margin: \"dense\",\n          error: !!errors.type,\n          disabled: loading,\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Sensor Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            name: \"type\",\n            value: formData.type,\n            onChange: handleChange,\n            label: \"Sensor Type\",\n            children: SENSOR_TYPES.map(type => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: type.id,\n              children: [type.name, \" (\", type.unit, \")\"]\n            }, type.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this), errors.type && /*#__PURE__*/_jsxDEV(FormHelperText, {\n            children: errors.type\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          margin: \"dense\",\n          label: \"Location\",\n          name: \"location\",\n          value: formData.location,\n          onChange: handleChange,\n          error: !!errors.location,\n          helperText: errors.location,\n          disabled: loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          margin: \"dense\",\n          label: \"Model (Optional)\",\n          name: \"model\",\n          value: formData.model,\n          onChange: handleChange,\n          disabled: loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          margin: \"dense\",\n          label: \"Manufacturer (Optional)\",\n          name: \"manufacturer\",\n          value: formData.manufacturer,\n          onChange: handleChange,\n          disabled: loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          margin: \"dense\",\n          label: \"MQTT Topic\",\n          name: \"mqtt_topic\",\n          value: formData.mqtt_topic,\n          onChange: handleTopicChange,\n          error: !!errors.mqtt_topic,\n          helperText: errors.mqtt_topic || (autoGenerateTopic ? \"Auto-generated based on type and location\" : \"Example: farm/sensors/temperature/greenhouse_1\"),\n          disabled: loading || autoGenerateTopic\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mt: 1,\n            display: 'flex',\n            alignItems: 'center'\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            size: \"small\",\n            color: autoGenerateTopic ? \"primary\" : \"inherit\",\n            onClick: () => {\n              const newState = !autoGenerateTopic;\n              setAutoGenerateTopic(newState);\n\n              // If turning auto-generate back on, update the MQTT topic\n              if (newState) {\n                setFormData(prev => ({\n                  ...prev,\n                  mqtt_topic: generateMqttTopic(prev.type, prev.location)\n                }));\n              }\n            },\n            sx: {\n              textTransform: 'none'\n            },\n            children: autoGenerateTopic ? \"Auto-generating topic ✓\" : \"Click to auto-generate topic\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          margin: \"dense\",\n          label: `Current Reading${getCurrentValueUnit() ? ` (${getCurrentValueUnit()})` : ''}`,\n          name: \"current_value\",\n          value: formData.current_value,\n          onChange: handleChange,\n          error: !!errors.current_value,\n          helperText: errors.current_value,\n          disabled: loading,\n          type: \"number\",\n          InputProps: {\n            endAdornment: getCurrentValueUnit() ? /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"end\",\n              children: getCurrentValueUnit()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 17\n            }, this) : null\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this), errors.submit && /*#__PURE__*/_jsxDEV(FormHelperText, {\n          error: true,\n          sx: {\n            mt: 2\n          },\n          children: errors.submit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleClose,\n        disabled: loading,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSubmit,\n        variant: \"contained\",\n        color: \"primary\",\n        disabled: loading,\n        startIcon: loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 32\n        }, this) : null,\n        children: loading ? 'Adding...' : 'Add Sensor'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n};\n_s(AddSensorDialog, \"RrxnyE22aaChWHc2rOU3HNi1F1c=\");\n_c = AddSensorDialog;\nexport default AddSensorDialog;\nvar _c;\n$RefreshReg$(_c, \"AddSensorDialog\");","map":{"version":3,"names":["React","useState","Dialog","DialogTitle","DialogContent","DialogActions","TextField","Button","FormControl","InputLabel","Select","MenuItem","Box","FormHelperText","CircularProgress","InputAdornment","SENSOR_TYPES","sensorAPI","jsxDEV","_jsxDEV","AddSensorDialog","open","onClose","onSensorAdded","_s","formData","setFormData","name","type","location","model","manufacturer","mqtt_topic","current_value","loading","setLoading","errors","setErrors","autoGenerateTopic","setAutoGenerateTopic","generateMqttTopic","sanitizedLocation","trim","toLowerCase","replace","validateForm","newErrors","isNaN","Object","keys","length","handleChange","e","value","target","prev","updated","topicType","topicLocation","undefined","handleTopicChange","handleSubmit","_SENSOR_TYPES$find","Promise","resolve","setTimeout","newSensor","id","Math","floor","random","parseFloat","status","is_active","created_at","Date","toISOString","updated_at","calibration_date","last_reading","unit","find","t","timestamp","handleClose","error","console","submit","getCurrentValueUnit","sensorType","maxWidth","fullWidth","children","fileName","_jsxFileName","lineNumber","columnNumber","sx","mt","margin","label","onChange","helperText","disabled","map","display","alignItems","size","color","onClick","newState","textTransform","InputProps","endAdornment","position","variant","startIcon","_c","$RefreshReg$"],"sources":["C:/Users/LIJIN/Desktop/webTest/Bak/webTest/frontend/src/components/AddSensorDialog.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  Button,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Box,\r\n  FormHelperText,\r\n  CircularProgress,\r\n  InputAdornment\r\n} from '@mui/material';\r\nimport { SENSOR_TYPES } from '../config';\r\nimport { sensorAPI } from '../services/api';\r\n\r\nconst AddSensorDialog = ({ open, onClose, onSensorAdded }) => {\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    type: '',\r\n    location: '',\r\n    model: '',\r\n    manufacturer: '',\r\n    mqtt_topic: '',\r\n    current_value: ''\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [errors, setErrors] = useState({});\r\n  const [autoGenerateTopic, setAutoGenerateTopic] = useState(true);\r\n\r\n  // Function to generate MQTT topic based on sensor type and location\r\n  const generateMqttTopic = (type, location) => {\r\n    if (!type || !location) return '';\r\n    \r\n    // Format: farm/sensors/{type}/{sanitized_location}\r\n    const sanitizedLocation = location.trim()\r\n      .toLowerCase()\r\n      .replace(/\\s+/g, '_')\r\n      .replace(/[^a-z0-9_]/g, '');\r\n    \r\n    return `farm/sensors/${type}/${sanitizedLocation}`;\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const newErrors = {};\r\n    if (!formData.name.trim()) newErrors.name = 'Name is required';\r\n    if (!formData.type) newErrors.type = 'Type is required';\r\n    if (!formData.location.trim()) newErrors.location = 'Location is required';\r\n    if (!formData.mqtt_topic.trim()) newErrors.mqtt_topic = 'MQTT Topic is required';\r\n    if (formData.current_value === '' || isNaN(formData.current_value)) newErrors.current_value = 'Valid reading value is required';\r\n    \r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    \r\n    // Update form data\r\n    setFormData(prev => {\r\n      const updated = {\r\n        ...prev,\r\n        [name]: value\r\n      };\r\n      \r\n      // Automatically generate MQTT topic when type or location changes\r\n      if (autoGenerateTopic && (name === 'type' || name === 'location')) {\r\n        const topicType = name === 'type' ? value : prev.type;\r\n        const topicLocation = name === 'location' ? value : prev.location;\r\n        updated.mqtt_topic = generateMqttTopic(topicType, topicLocation);\r\n      }\r\n      \r\n      return updated;\r\n    });\r\n    \r\n    // Clear error when field is modified\r\n    if (errors[name]) {\r\n      setErrors(prev => ({\r\n        ...prev,\r\n        [name]: undefined\r\n      }));\r\n    }\r\n  };\r\n\r\n  // Function to toggle auto-generate topic\r\n  const handleTopicChange = (e) => {\r\n    const { value } = e.target;\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      mqtt_topic: value\r\n    }));\r\n    \r\n    // If user manually edits the topic, turn off auto-generation\r\n    if (autoGenerateTopic && value !== generateMqttTopic(formData.type, formData.location)) {\r\n      setAutoGenerateTopic(false);\r\n    }\r\n    \r\n    // Clear error when field is modified\r\n    if (errors.mqtt_topic) {\r\n      setErrors(prev => ({\r\n        ...prev,\r\n        mqtt_topic: undefined\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!validateForm()) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      // In a real application, this would call the actual API\r\n      // const response = await sensorAPI.addSensor(formData);\r\n      \r\n      // Using mock implementation for now\r\n      // Simulate API delay\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      // Simulate a successful response\r\n      const newSensor = {\r\n        id: Math.floor(Math.random() * 1000) + 5, // Random ID for mock\r\n        ...formData,\r\n        current_value: parseFloat(formData.current_value),\r\n        status: 'active',\r\n        is_active: true,\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString(),\r\n        calibration_date: new Date().toISOString(),\r\n        last_reading: {\r\n          value: parseFloat(formData.current_value),\r\n          unit: SENSOR_TYPES.find(t => t.id === formData.type)?.unit || '',\r\n          timestamp: new Date().toISOString()\r\n        }\r\n      };\r\n      \r\n      onSensorAdded(newSensor);\r\n      handleClose();\r\n    } catch (error) {\r\n      console.error('Failed to add sensor:', error);\r\n      setErrors(prev => ({\r\n        ...prev,\r\n        submit: 'Failed to add sensor. Please try again.'\r\n      }));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setFormData({\r\n      name: '',\r\n      type: '',\r\n      location: '',\r\n      model: '',\r\n      manufacturer: '',\r\n      mqtt_topic: '',\r\n      current_value: ''\r\n    });\r\n    setErrors({});\r\n    onClose();\r\n  };\r\n\r\n  // Get unit label for current value field\r\n  const getCurrentValueUnit = () => {\r\n    if (!formData.type) return '';\r\n    const sensorType = SENSOR_TYPES.find(t => t.id === formData.type);\r\n    return sensorType ? sensorType.unit : '';\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} onClose={handleClose} maxWidth=\"sm\" fullWidth>\r\n      <DialogTitle>Add New Sensor</DialogTitle>\r\n      <DialogContent>\r\n        <Box sx={{ mt: 2 }}>\r\n          <TextField\r\n            fullWidth\r\n            margin=\"dense\"\r\n            label=\"Sensor Name\"\r\n            name=\"name\"\r\n            value={formData.name}\r\n            onChange={handleChange}\r\n            error={!!errors.name}\r\n            helperText={errors.name}\r\n            disabled={loading}\r\n          />\r\n          \r\n          <FormControl fullWidth margin=\"dense\" error={!!errors.type} disabled={loading}>\r\n            <InputLabel>Sensor Type</InputLabel>\r\n            <Select\r\n              name=\"type\"\r\n              value={formData.type}\r\n              onChange={handleChange}\r\n              label=\"Sensor Type\"\r\n            >\r\n              {SENSOR_TYPES.map(type => (\r\n                <MenuItem key={type.id} value={type.id}>\r\n                  {type.name} ({type.unit})\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n            {errors.type && <FormHelperText>{errors.type}</FormHelperText>}\r\n          </FormControl>\r\n          \r\n          <TextField\r\n            fullWidth\r\n            margin=\"dense\"\r\n            label=\"Location\"\r\n            name=\"location\"\r\n            value={formData.location}\r\n            onChange={handleChange}\r\n            error={!!errors.location}\r\n            helperText={errors.location}\r\n            disabled={loading}\r\n          />\r\n          \r\n          <TextField\r\n            fullWidth\r\n            margin=\"dense\"\r\n            label=\"Model (Optional)\"\r\n            name=\"model\"\r\n            value={formData.model}\r\n            onChange={handleChange}\r\n            disabled={loading}\r\n          />\r\n          \r\n          <TextField\r\n            fullWidth\r\n            margin=\"dense\"\r\n            label=\"Manufacturer (Optional)\"\r\n            name=\"manufacturer\"\r\n            value={formData.manufacturer}\r\n            onChange={handleChange}\r\n            disabled={loading}\r\n          />\r\n          \r\n          <TextField\r\n            fullWidth\r\n            margin=\"dense\"\r\n            label=\"MQTT Topic\"\r\n            name=\"mqtt_topic\"\r\n            value={formData.mqtt_topic}\r\n            onChange={handleTopicChange}\r\n            error={!!errors.mqtt_topic}\r\n            helperText={errors.mqtt_topic || \r\n              (autoGenerateTopic ? \"Auto-generated based on type and location\" : \"Example: farm/sensors/temperature/greenhouse_1\")}\r\n            disabled={loading || autoGenerateTopic}\r\n          />\r\n          \r\n          <Box sx={{ mt: 1, display: 'flex', alignItems: 'center' }}>\r\n            <Button \r\n              size=\"small\" \r\n              color={autoGenerateTopic ? \"primary\" : \"inherit\"}\r\n              onClick={() => {\r\n                const newState = !autoGenerateTopic;\r\n                setAutoGenerateTopic(newState);\r\n                \r\n                // If turning auto-generate back on, update the MQTT topic\r\n                if (newState) {\r\n                  setFormData(prev => ({\r\n                    ...prev,\r\n                    mqtt_topic: generateMqttTopic(prev.type, prev.location)\r\n                  }));\r\n                }\r\n              }}\r\n              sx={{ textTransform: 'none' }}\r\n            >\r\n              {autoGenerateTopic ? \"Auto-generating topic ✓\" : \"Click to auto-generate topic\"}\r\n            </Button>\r\n          </Box>\r\n          \r\n          <TextField\r\n            fullWidth\r\n            margin=\"dense\"\r\n            label={`Current Reading${getCurrentValueUnit() ? ` (${getCurrentValueUnit()})` : ''}`}\r\n            name=\"current_value\"\r\n            value={formData.current_value}\r\n            onChange={handleChange}\r\n            error={!!errors.current_value}\r\n            helperText={errors.current_value}\r\n            disabled={loading}\r\n            type=\"number\"\r\n            InputProps={{\r\n              endAdornment: getCurrentValueUnit() ? (\r\n                <InputAdornment position=\"end\">{getCurrentValueUnit()}</InputAdornment>\r\n              ) : null\r\n            }}\r\n          />\r\n          \r\n          {errors.submit && (\r\n            <FormHelperText error sx={{ mt: 2 }}>\r\n              {errors.submit}\r\n            </FormHelperText>\r\n          )}\r\n        </Box>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleClose} disabled={loading}>\r\n          Cancel\r\n        </Button>\r\n        <Button \r\n          onClick={handleSubmit} \r\n          variant=\"contained\" \r\n          color=\"primary\" \r\n          disabled={loading}\r\n          startIcon={loading ? <CircularProgress size={20} /> : null}\r\n        >\r\n          {loading ? 'Adding...' : 'Add Sensor'}\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default AddSensorDialog; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}