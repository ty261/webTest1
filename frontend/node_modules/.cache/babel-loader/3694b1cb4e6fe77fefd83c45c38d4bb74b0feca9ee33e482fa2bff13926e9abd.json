{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LIJIN\\\\Desktop\\\\webTest\\\\Bak\\\\webTest\\\\frontend\\\\src\\\\components\\\\alerts\\\\AlertSettings.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Paper, Typography, Divider, Grid, FormControl, InputLabel, Select, MenuItem, TextField, Button, Switch, FormControlLabel, Chip, Alert, Card, CardContent, CircularProgress, IconButton, Tooltip, List, ListItem, ListItemText, ListItemSecondaryAction } from '@mui/material';\nimport { Add as AddIcon, Delete as DeleteIcon, Save as SaveIcon, Notifications as NotificationsIcon, Settings as SettingsIcon } from '@mui/icons-material';\nimport { alertsAPI } from '../../services/api';\n\n// Mock alert settings data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mockAlertSettings = [{\n  id: 1,\n  sensor_type: 'temperature',\n  condition: 'gt',\n  threshold: 30,\n  severity: 'high',\n  notification_method: ['app', 'email'],\n  is_active: true\n}, {\n  id: 2,\n  sensor_type: 'temperature',\n  condition: 'lt',\n  threshold: 10,\n  severity: 'medium',\n  notification_method: ['app'],\n  is_active: true\n}, {\n  id: 3,\n  sensor_type: 'humidity',\n  condition: 'gt',\n  threshold: 85,\n  severity: 'medium',\n  notification_method: ['app'],\n  is_active: true\n}, {\n  id: 4,\n  sensor_type: 'humidity',\n  condition: 'lt',\n  threshold: 30,\n  severity: 'medium',\n  notification_method: ['app', 'email'],\n  is_active: true\n}, {\n  id: 5,\n  sensor_type: 'soil_moisture',\n  condition: 'lt',\n  threshold: 20,\n  severity: 'high',\n  notification_method: ['app', 'email', 'sms'],\n  is_active: true\n}];\n\n// Supported sensor types\nconst SENSOR_TYPES = [{\n  id: 'temperature',\n  name: 'Temperature',\n  unit: 'Â°C'\n}, {\n  id: 'humidity',\n  name: 'Humidity',\n  unit: '%'\n}, {\n  id: 'light',\n  name: 'Light',\n  unit: 'lux'\n}, {\n  id: 'soil_moisture',\n  name: 'Soil Moisture',\n  unit: '%'\n}, {\n  id: 'co2',\n  name: 'CO2',\n  unit: 'ppm'\n}, {\n  id: 'ph',\n  name: 'pH Value',\n  unit: ''\n}, {\n  id: 'water_level',\n  name: 'Water Level',\n  unit: '%'\n}];\n\n// Condition types\nconst CONDITIONS = [{\n  id: 'gt',\n  name: 'Greater Than'\n}, {\n  id: 'lt',\n  name: 'Less Than'\n}, {\n  id: 'eq',\n  name: 'Equal To'\n}, {\n  id: 'gte',\n  name: 'Greater Than or Equal To'\n}, {\n  id: 'lte',\n  name: 'Less Than or Equal To'\n}];\n\n// Severity levels\nconst SEVERITY_LEVELS = [{\n  id: 'high',\n  name: 'Critical',\n  color: 'error'\n}, {\n  id: 'medium',\n  name: 'Warning',\n  color: 'warning'\n}, {\n  id: 'low',\n  name: 'Information',\n  color: 'info'\n}];\n\n// Notification methods\nconst NOTIFICATION_METHODS = [{\n  id: 'app',\n  name: 'In-App Notification'\n}, {\n  id: 'email',\n  name: 'Email'\n}, {\n  id: 'sms',\n  name: 'SMS'\n}, {\n  id: 'webhook',\n  name: 'Webhook'\n}];\n\n// User preferences\nconst DEFAULT_USER_PREFERENCES = {\n  receive_email_notifications: true,\n  receive_sms_notifications: false,\n  email_address: 'user@example.com',\n  phone_number: '',\n  mute_notifications: false,\n  auto_acknowledge_low_severity: false\n};\nconst AlertSettings = () => {\n  _s();\n  // State management\n  const [alertSettings, setAlertSettings] = useState([]);\n  const [userPreferences, setUserPreferences] = useState(DEFAULT_USER_PREFERENCES);\n  const [loading, setLoading] = useState(true);\n  const [saveLoading, setSaveLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n  const [selectedSetting, setSelectedSetting] = useState(null);\n  const [newSetting, setNewSetting] = useState({\n    sensor_type: '',\n    condition: 'gt',\n    threshold: '',\n    severity: 'medium',\n    notification_method: ['app'],\n    is_active: true\n  });\n  const [formMode, setFormMode] = useState('new'); // 'new' or 'edit'\n\n  // Load alert settings\n  const fetchAlertSettings = async () => {\n    setLoading(true);\n    try {\n      // In actual project, call API\n      // const response = await alertsAPI.getSettings();\n      // setAlertSettings(response.data.data);\n\n      // Mock API response\n      setAlertSettings(mockAlertSettings);\n\n      // Load user preferences\n      // const prefsResponse = await alertsAPI.getUserPreferences();\n      // setUserPreferences(prefsResponse.data.data);\n\n      // Use default settings\n      setUserPreferences(DEFAULT_USER_PREFERENCES);\n    } catch (err) {\n      console.error('Failed to get alert settings:', err);\n      setError('Failed to load alert settings. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Initial load\n  useEffect(() => {\n    fetchAlertSettings();\n  }, []);\n\n  // Add new alert setting\n  const handleAddSetting = async () => {\n    // Validate form\n    if (!newSetting.sensor_type || !newSetting.threshold || !newSetting.notification_method.length) {\n      setError('Please fill in all required fields.');\n      return;\n    }\n    setSaveLoading(true);\n    try {\n      // In actual project, call API\n      // const response = await alertsAPI.createSetting(newSetting);\n      // const createdSetting = response.data.data;\n\n      // Mock create response\n      const createdSetting = {\n        ...newSetting,\n        id: alertSettings.length + 1,\n        threshold: parseFloat(newSetting.threshold)\n      };\n\n      // Update local state\n      if (formMode === 'new') {\n        setAlertSettings([...alertSettings, createdSetting]);\n        // Reset form\n        setNewSetting({\n          sensor_type: '',\n          condition: 'gt',\n          threshold: '',\n          severity: 'medium',\n          notification_method: ['app'],\n          is_active: true\n        });\n        setSuccess('Alert setting created successfully.');\n      } else {\n        // Edit mode - update existing setting\n        const updatedSettings = alertSettings.map(setting => setting.id === createdSetting.id ? createdSetting : setting);\n        setAlertSettings(updatedSettings);\n        setFormMode('new');\n        setSelectedSetting(null);\n        setSuccess('Alert setting updated successfully.');\n      }\n    } catch (err) {\n      console.error('Failed to save alert setting:', err);\n      setError('Save failed. Please try again later.');\n    } finally {\n      setSaveLoading(false);\n    }\n  };\n\n  // Edit existing alert setting\n  const handleEditSetting = setting => {\n    setSelectedSetting(setting);\n    setNewSetting({\n      ...setting\n    });\n    setFormMode('edit');\n  };\n\n  // Delete alert setting\n  const handleDeleteSetting = async id => {\n    try {\n      // In actual project, call API\n      // await alertsAPI.deleteSetting(id);\n\n      // Update local state\n      setAlertSettings(alertSettings.filter(setting => setting.id !== id));\n      setSuccess('Alert setting deleted successfully.');\n\n      // If currently editing the deleted setting, reset form\n      if (selectedSetting && selectedSetting.id === id) {\n        setSelectedSetting(null);\n        setNewSetting({\n          sensor_type: '',\n          condition: 'gt',\n          threshold: '',\n          severity: 'medium',\n          notification_method: ['app'],\n          is_active: true\n        });\n        setFormMode('new');\n      }\n    } catch (err) {\n      console.error('Failed to delete alert setting:', err);\n      setError('Delete failed. Please try again later.');\n    }\n  };\n\n  // Update user preferences\n  const handleSaveUserPreferences = async () => {\n    setSaveLoading(true);\n    try {\n      // In actual project, call API\n      // await alertsAPI.updateUserPreferences(userPreferences);\n\n      setSuccess('User preferences saved successfully.');\n    } catch (err) {\n      console.error('Failed to save user preferences:', err);\n      setError('Save failed. Please try again later.');\n    } finally {\n      setSaveLoading(false);\n    }\n  };\n\n  // Handle notification method change\n  const handleNotificationMethodChange = method => {\n    const currentMethods = [...newSetting.notification_method];\n    if (currentMethods.includes(method)) {\n      setNewSetting({\n        ...newSetting,\n        notification_method: currentMethods.filter(m => m !== method)\n      });\n    } else {\n      setNewSetting({\n        ...newSetting,\n        notification_method: [...currentMethods, method]\n      });\n    }\n  };\n\n  // Render alert setting form\n  const renderSettingForm = () => {\n    const sensorType = SENSOR_TYPES.find(type => type.id === newSetting.sensor_type) || {};\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 3,\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: formMode === 'new' ? 'Add New Alert Setting' : 'Edit Alert Setting'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        sx: {\n          mb: 3\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"Sensor Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: newSetting.sensor_type,\n              label: \"Sensor Type\",\n              onChange: e => setNewSetting({\n                ...newSetting,\n                sensor_type: e.target.value\n              }),\n              children: SENSOR_TYPES.map(type => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: type.id,\n                children: [type.name, \" (\", type.unit, \")\"]\n              }, type.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 324,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"Condition\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: newSetting.condition,\n              label: \"Condition\",\n              onChange: e => setNewSetting({\n                ...newSetting,\n                condition: e.target.value\n              }),\n              children: CONDITIONS.map(condition => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: condition.id,\n                children: condition.name\n              }, condition.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 344,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Threshold\",\n            type: \"number\",\n            value: newSetting.threshold,\n            onChange: e => setNewSetting({\n              ...newSetting,\n              threshold: e.target.value\n            }),\n            InputProps: {\n              endAdornment: sensorType.unit\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"Severity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: newSetting.severity,\n              label: \"Severity\",\n              onChange: e => setNewSetting({\n                ...newSetting,\n                severity: e.target.value\n              }),\n              children: SEVERITY_LEVELS.map(level => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: level.id,\n                children: level.name\n              }, level.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle2\",\n            gutterBottom: true,\n            children: \"Notification Method\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              flexWrap: 'wrap',\n              gap: 1\n            },\n            children: NOTIFICATION_METHODS.map(method => /*#__PURE__*/_jsxDEV(Chip, {\n              label: method.name,\n              onClick: () => handleNotificationMethodChange(method.id),\n              color: newSetting.notification_method.includes(method.id) ? 'primary' : 'default',\n              variant: newSetting.notification_method.includes(method.id) ? 'filled' : 'outlined'\n            }, method.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Switch, {\n              checked: newSetting.is_active,\n              onChange: e => setNewSetting({\n                ...newSetting,\n                is_active: e.target.checked\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 17\n            }, this),\n            label: \"Enable This Alert Setting\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sx: {\n            display: 'flex',\n            justifyContent: 'flex-end',\n            mt: 2\n          },\n          children: [formMode === 'edit' && /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            color: \"inherit\",\n            onClick: () => {\n              setFormMode('new');\n              setSelectedSetting(null);\n              setNewSetting({\n                sensor_type: '',\n                condition: 'gt',\n                threshold: '',\n                severity: 'medium',\n                notification_method: ['app'],\n                is_active: true\n              });\n            },\n            sx: {\n              mr: 1\n            },\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            startIcon: /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 26\n            }, this),\n            onClick: handleAddSetting,\n            disabled: saveLoading,\n            children: saveLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n              size: 24\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 30\n            }, this) : formMode === 'new' ? 'Add' : 'Save'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render user preferences\n  const renderUserPreferences = () => {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 3,\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: \"Notification Preferences\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        sx: {\n          mb: 3\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Switch, {\n              checked: userPreferences.receive_email_notifications,\n              onChange: e => setUserPreferences({\n                ...userPreferences,\n                receive_email_notifications: e.target.checked\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 469,\n              columnNumber: 17\n            }, this),\n            label: \"Receive Email Notifications\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 11\n        }, this), userPreferences.receive_email_notifications && /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Email Address\",\n            type: \"email\",\n            value: userPreferences.email_address,\n            onChange: e => setUserPreferences({\n              ...userPreferences,\n              email_address: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Switch, {\n              checked: userPreferences.receive_sms_notifications,\n              onChange: e => setUserPreferences({\n                ...userPreferences,\n                receive_sms_notifications: e.target.checked\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 17\n            }, this),\n            label: \"Receive SMS Notifications\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 497,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 11\n        }, this), userPreferences.receive_sms_notifications && /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Phone Number\",\n            value: userPreferences.phone_number,\n            onChange: e => setUserPreferences({\n              ...userPreferences,\n              phone_number: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Switch, {\n              checked: userPreferences.mute_notifications,\n              onChange: e => setUserPreferences({\n                ...userPreferences,\n                mute_notifications: e.target.checked\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 528,\n              columnNumber: 17\n            }, this),\n            label: \"Mute All Notifications\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Switch, {\n              checked: userPreferences.auto_acknowledge_low_severity,\n              onChange: e => setUserPreferences({\n                ...userPreferences,\n                auto_acknowledge_low_severity: e.target.checked\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 543,\n              columnNumber: 17\n            }, this),\n            label: \"Automatically Acknowledge Low Severity Alerts\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 541,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sx: {\n            display: 'flex',\n            justifyContent: 'flex-end',\n            mt: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            startIcon: /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 558,\n              columnNumber: 26\n            }, this),\n            onClick: handleSaveUserPreferences,\n            disabled: saveLoading,\n            children: saveLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n              size: 24\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 562,\n              columnNumber: 30\n            }, this) : 'Save Settings'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 556,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render existing alert settings list\n  const renderAlertSettingsList = () => {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          p: 2,\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Existing Alert Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 577,\n            columnNumber: 24\n          }, this),\n          color: \"primary\",\n          onClick: () => {\n            setFormMode('new');\n            setSelectedSetting(null);\n            setNewSetting({\n              sensor_type: '',\n              condition: 'gt',\n              threshold: '',\n              severity: 'medium',\n              notification_method: ['app'],\n              is_active: true\n            });\n          },\n          children: \"Add New Setting\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        children: [alertSettings.map(setting => {\n          const sensorType = SENSOR_TYPES.find(type => type.id === setting.sensor_type) || {};\n          const condition = CONDITIONS.find(cond => cond.id === setting.condition) || {};\n          const severity = SEVERITY_LEVELS.find(sev => sev.id === setting.severity) || {};\n          return /*#__PURE__*/_jsxDEV(ListItem, {\n            sx: {\n              borderLeft: 4,\n              borderColor: setting.is_active ? `${severity.color}.main` : 'action.disabled',\n              bgcolor: selectedSetting && selectedSetting.id === setting.id ? 'action.selected' : 'inherit'\n            },\n            children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  alignItems: 'center'\n                },\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"subtitle1\",\n                  children: [sensorType.name, \" \", condition.name, \" \", setting.threshold, \" \", sensorType.unit]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 619,\n                  columnNumber: 23\n                }, this), !setting.is_active && /*#__PURE__*/_jsxDEV(Chip, {\n                  label: \"Disabled\",\n                  color: \"default\",\n                  size: \"small\",\n                  sx: {\n                    ml: 1\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 623,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 618,\n                columnNumber: 21\n              }, this),\n              secondary: /*#__PURE__*/_jsxDEV(Box, {\n                children: [/*#__PURE__*/_jsxDEV(Chip, {\n                  label: severity.name,\n                  color: severity.color,\n                  size: \"small\",\n                  sx: {\n                    mr: 1,\n                    mt: 1\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 634,\n                  columnNumber: 23\n                }, this), setting.notification_method.map(method => {\n                  const methodInfo = NOTIFICATION_METHODS.find(m => m.id === method) || {};\n                  return /*#__PURE__*/_jsxDEV(Chip, {\n                    label: methodInfo.name,\n                    variant: \"outlined\",\n                    size: \"small\",\n                    sx: {\n                      mr: 1,\n                      mt: 1\n                    }\n                  }, method, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 643,\n                    columnNumber: 27\n                  }, this);\n                })]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 633,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 616,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(ListItemSecondaryAction, {\n              children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n                title: \"Edit\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  edge: \"end\",\n                  onClick: () => handleEditSetting(setting),\n                  sx: {\n                    mr: 1\n                  },\n                  children: /*#__PURE__*/_jsxDEV(SettingsIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 662,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 657,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 656,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                title: \"Delete\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  edge: \"end\",\n                  onClick: () => handleDeleteSetting(setting.id),\n                  children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 670,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 666,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 665,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 655,\n              columnNumber: 17\n            }, this)]\n          }, setting.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 604,\n            columnNumber: 15\n          }, this);\n        }), alertSettings.length === 0 && /*#__PURE__*/_jsxDEV(ListItem, {\n          children: /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: \"No Alert Settings\",\n            secondary: \"Click above button to add new alert setting\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 680,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 679,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 597,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Load state\n  if (loading && alertSettings.length === 0) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center',\n        p: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 695,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 694,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 3\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 704,\n      columnNumber: 9\n    }, this), success && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"success\",\n      sx: {\n        mb: 3\n      },\n      onClose: () => setSuccess(null),\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 710,\n      columnNumber: 9\n    }, this), renderSettingForm(), renderAlertSettingsList(), renderUserPreferences()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 701,\n    columnNumber: 5\n  }, this);\n};\n_s(AlertSettings, \"kMjV1jLC8mmAlDNA7XkGRcdw9BY=\");\n_c = AlertSettings;\nexport default AlertSettings;\nvar _c;\n$RefreshReg$(_c, \"AlertSettings\");","map":{"version":3,"names":["React","useState","useEffect","Box","Paper","Typography","Divider","Grid","FormControl","InputLabel","Select","MenuItem","TextField","Button","Switch","FormControlLabel","Chip","Alert","Card","CardContent","CircularProgress","IconButton","Tooltip","List","ListItem","ListItemText","ListItemSecondaryAction","Add","AddIcon","Delete","DeleteIcon","Save","SaveIcon","Notifications","NotificationsIcon","Settings","SettingsIcon","alertsAPI","jsxDEV","_jsxDEV","mockAlertSettings","id","sensor_type","condition","threshold","severity","notification_method","is_active","SENSOR_TYPES","name","unit","CONDITIONS","SEVERITY_LEVELS","color","NOTIFICATION_METHODS","DEFAULT_USER_PREFERENCES","receive_email_notifications","receive_sms_notifications","email_address","phone_number","mute_notifications","auto_acknowledge_low_severity","AlertSettings","_s","alertSettings","setAlertSettings","userPreferences","setUserPreferences","loading","setLoading","saveLoading","setSaveLoading","error","setError","success","setSuccess","selectedSetting","setSelectedSetting","newSetting","setNewSetting","formMode","setFormMode","fetchAlertSettings","err","console","handleAddSetting","length","createdSetting","parseFloat","updatedSettings","map","setting","handleEditSetting","handleDeleteSetting","filter","handleSaveUserPreferences","handleNotificationMethodChange","method","currentMethods","includes","m","renderSettingForm","sensorType","find","type","sx","p","mb","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","container","spacing","item","xs","md","fullWidth","value","label","onChange","e","target","InputProps","endAdornment","level","display","flexWrap","gap","onClick","control","checked","justifyContent","mt","mr","startIcon","disabled","size","renderUserPreferences","renderAlertSettingsList","alignItems","cond","sev","borderLeft","borderColor","bgcolor","primary","ml","secondary","methodInfo","title","edge","onClose","_c","$RefreshReg$"],"sources":["C:/Users/LIJIN/Desktop/webTest/Bak/webTest/frontend/src/components/alerts/AlertSettings.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  Divider,\r\n  Grid,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  TextField,\r\n  Button,\r\n  Switch,\r\n  FormControlLabel,\r\n  Chip,\r\n  Alert,\r\n  Card,\r\n  CardContent,\r\n  CircularProgress,\r\n  IconButton,\r\n  Tooltip,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemSecondaryAction\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Delete as DeleteIcon,\r\n  Save as SaveIcon,\r\n  Notifications as NotificationsIcon,\r\n  Settings as SettingsIcon\r\n} from '@mui/icons-material';\r\nimport { alertsAPI } from '../../services/api';\r\n\r\n// Mock alert settings data\r\nconst mockAlertSettings = [\r\n  {\r\n    id: 1,\r\n    sensor_type: 'temperature',\r\n    condition: 'gt',\r\n    threshold: 30,\r\n    severity: 'high',\r\n    notification_method: ['app', 'email'],\r\n    is_active: true\r\n  },\r\n  {\r\n    id: 2,\r\n    sensor_type: 'temperature',\r\n    condition: 'lt',\r\n    threshold: 10,\r\n    severity: 'medium',\r\n    notification_method: ['app'],\r\n    is_active: true\r\n  },\r\n  {\r\n    id: 3,\r\n    sensor_type: 'humidity',\r\n    condition: 'gt',\r\n    threshold: 85,\r\n    severity: 'medium',\r\n    notification_method: ['app'],\r\n    is_active: true\r\n  },\r\n  {\r\n    id: 4,\r\n    sensor_type: 'humidity',\r\n    condition: 'lt',\r\n    threshold: 30,\r\n    severity: 'medium',\r\n    notification_method: ['app', 'email'],\r\n    is_active: true\r\n  },\r\n  {\r\n    id: 5,\r\n    sensor_type: 'soil_moisture',\r\n    condition: 'lt',\r\n    threshold: 20,\r\n    severity: 'high',\r\n    notification_method: ['app', 'email', 'sms'],\r\n    is_active: true\r\n  }\r\n];\r\n\r\n// Supported sensor types\r\nconst SENSOR_TYPES = [\r\n  { id: 'temperature', name: 'Temperature', unit: 'Â°C' },\r\n  { id: 'humidity', name: 'Humidity', unit: '%' },\r\n  { id: 'light', name: 'Light', unit: 'lux' },\r\n  { id: 'soil_moisture', name: 'Soil Moisture', unit: '%' },\r\n  { id: 'co2', name: 'CO2', unit: 'ppm' },\r\n  { id: 'ph', name: 'pH Value', unit: '' },\r\n  { id: 'water_level', name: 'Water Level', unit: '%' }\r\n];\r\n\r\n// Condition types\r\nconst CONDITIONS = [\r\n  { id: 'gt', name: 'Greater Than' },\r\n  { id: 'lt', name: 'Less Than' },\r\n  { id: 'eq', name: 'Equal To' },\r\n  { id: 'gte', name: 'Greater Than or Equal To' },\r\n  { id: 'lte', name: 'Less Than or Equal To' }\r\n];\r\n\r\n// Severity levels\r\nconst SEVERITY_LEVELS = [\r\n  { id: 'high', name: 'Critical', color: 'error' },\r\n  { id: 'medium', name: 'Warning', color: 'warning' },\r\n  { id: 'low', name: 'Information', color: 'info' }\r\n];\r\n\r\n// Notification methods\r\nconst NOTIFICATION_METHODS = [\r\n  { id: 'app', name: 'In-App Notification' },\r\n  { id: 'email', name: 'Email' },\r\n  { id: 'sms', name: 'SMS' },\r\n  { id: 'webhook', name: 'Webhook' }\r\n];\r\n\r\n// User preferences\r\nconst DEFAULT_USER_PREFERENCES = {\r\n  receive_email_notifications: true,\r\n  receive_sms_notifications: false,\r\n  email_address: 'user@example.com',\r\n  phone_number: '',\r\n  mute_notifications: false,\r\n  auto_acknowledge_low_severity: false\r\n};\r\n\r\nconst AlertSettings = () => {\r\n  // State management\r\n  const [alertSettings, setAlertSettings] = useState([]);\r\n  const [userPreferences, setUserPreferences] = useState(DEFAULT_USER_PREFERENCES);\r\n  const [loading, setLoading] = useState(true);\r\n  const [saveLoading, setSaveLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [success, setSuccess] = useState(null);\r\n  const [selectedSetting, setSelectedSetting] = useState(null);\r\n  const [newSetting, setNewSetting] = useState({\r\n    sensor_type: '',\r\n    condition: 'gt',\r\n    threshold: '',\r\n    severity: 'medium',\r\n    notification_method: ['app'],\r\n    is_active: true\r\n  });\r\n  const [formMode, setFormMode] = useState('new'); // 'new' or 'edit'\r\n\r\n  // Load alert settings\r\n  const fetchAlertSettings = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // In actual project, call API\r\n      // const response = await alertsAPI.getSettings();\r\n      // setAlertSettings(response.data.data);\r\n      \r\n      // Mock API response\r\n      setAlertSettings(mockAlertSettings);\r\n      \r\n      // Load user preferences\r\n      // const prefsResponse = await alertsAPI.getUserPreferences();\r\n      // setUserPreferences(prefsResponse.data.data);\r\n      \r\n      // Use default settings\r\n      setUserPreferences(DEFAULT_USER_PREFERENCES);\r\n    } catch (err) {\r\n      console.error('Failed to get alert settings:', err);\r\n      setError('Failed to load alert settings. Please try again later.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Initial load\r\n  useEffect(() => {\r\n    fetchAlertSettings();\r\n  }, []);\r\n\r\n  // Add new alert setting\r\n  const handleAddSetting = async () => {\r\n    // Validate form\r\n    if (!newSetting.sensor_type || !newSetting.threshold || !newSetting.notification_method.length) {\r\n      setError('Please fill in all required fields.');\r\n      return;\r\n    }\r\n\r\n    setSaveLoading(true);\r\n    try {\r\n      // In actual project, call API\r\n      // const response = await alertsAPI.createSetting(newSetting);\r\n      // const createdSetting = response.data.data;\r\n      \r\n      // Mock create response\r\n      const createdSetting = {\r\n        ...newSetting,\r\n        id: alertSettings.length + 1,\r\n        threshold: parseFloat(newSetting.threshold)\r\n      };\r\n      \r\n      // Update local state\r\n      if (formMode === 'new') {\r\n        setAlertSettings([...alertSettings, createdSetting]);\r\n        // Reset form\r\n        setNewSetting({\r\n          sensor_type: '',\r\n          condition: 'gt',\r\n          threshold: '',\r\n          severity: 'medium',\r\n          notification_method: ['app'],\r\n          is_active: true\r\n        });\r\n        setSuccess('Alert setting created successfully.');\r\n      } else {\r\n        // Edit mode - update existing setting\r\n        const updatedSettings = alertSettings.map(setting => \r\n          setting.id === createdSetting.id ? createdSetting : setting\r\n        );\r\n        setAlertSettings(updatedSettings);\r\n        setFormMode('new');\r\n        setSelectedSetting(null);\r\n        setSuccess('Alert setting updated successfully.');\r\n      }\r\n    } catch (err) {\r\n      console.error('Failed to save alert setting:', err);\r\n      setError('Save failed. Please try again later.');\r\n    } finally {\r\n      setSaveLoading(false);\r\n    }\r\n  };\r\n\r\n  // Edit existing alert setting\r\n  const handleEditSetting = (setting) => {\r\n    setSelectedSetting(setting);\r\n    setNewSetting({...setting});\r\n    setFormMode('edit');\r\n  };\r\n\r\n  // Delete alert setting\r\n  const handleDeleteSetting = async (id) => {\r\n    try {\r\n      // In actual project, call API\r\n      // await alertsAPI.deleteSetting(id);\r\n      \r\n      // Update local state\r\n      setAlertSettings(alertSettings.filter(setting => setting.id !== id));\r\n      setSuccess('Alert setting deleted successfully.');\r\n      \r\n      // If currently editing the deleted setting, reset form\r\n      if (selectedSetting && selectedSetting.id === id) {\r\n        setSelectedSetting(null);\r\n        setNewSetting({\r\n          sensor_type: '',\r\n          condition: 'gt',\r\n          threshold: '',\r\n          severity: 'medium',\r\n          notification_method: ['app'],\r\n          is_active: true\r\n        });\r\n        setFormMode('new');\r\n      }\r\n    } catch (err) {\r\n      console.error('Failed to delete alert setting:', err);\r\n      setError('Delete failed. Please try again later.');\r\n    }\r\n  };\r\n\r\n  // Update user preferences\r\n  const handleSaveUserPreferences = async () => {\r\n    setSaveLoading(true);\r\n    try {\r\n      // In actual project, call API\r\n      // await alertsAPI.updateUserPreferences(userPreferences);\r\n      \r\n      setSuccess('User preferences saved successfully.');\r\n    } catch (err) {\r\n      console.error('Failed to save user preferences:', err);\r\n      setError('Save failed. Please try again later.');\r\n    } finally {\r\n      setSaveLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handle notification method change\r\n  const handleNotificationMethodChange = (method) => {\r\n    const currentMethods = [...newSetting.notification_method];\r\n    if (currentMethods.includes(method)) {\r\n      setNewSetting({\r\n        ...newSetting,\r\n        notification_method: currentMethods.filter(m => m !== method)\r\n      });\r\n    } else {\r\n      setNewSetting({\r\n        ...newSetting,\r\n        notification_method: [...currentMethods, method]\r\n      });\r\n    }\r\n  };\r\n\r\n  // Render alert setting form\r\n  const renderSettingForm = () => {\r\n    const sensorType = SENSOR_TYPES.find(type => type.id === newSetting.sensor_type) || {};\r\n    \r\n    return (\r\n      <Paper sx={{ p: 3, mb: 4 }}>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          {formMode === 'new' ? 'Add New Alert Setting' : 'Edit Alert Setting'}\r\n        </Typography>\r\n        <Divider sx={{ mb: 3 }} />\r\n        \r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={6}>\r\n            <FormControl fullWidth>\r\n              <InputLabel>Sensor Type</InputLabel>\r\n              <Select\r\n                value={newSetting.sensor_type}\r\n                label=\"Sensor Type\"\r\n                onChange={(e) => setNewSetting({\r\n                  ...newSetting,\r\n                  sensor_type: e.target.value\r\n                })}\r\n              >\r\n                {SENSOR_TYPES.map(type => (\r\n                  <MenuItem key={type.id} value={type.id}>\r\n                    {type.name} ({type.unit})\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} md={6}>\r\n            <FormControl fullWidth>\r\n              <InputLabel>Condition</InputLabel>\r\n              <Select\r\n                value={newSetting.condition}\r\n                label=\"Condition\"\r\n                onChange={(e) => setNewSetting({\r\n                  ...newSetting,\r\n                  condition: e.target.value\r\n                })}\r\n              >\r\n                {CONDITIONS.map(condition => (\r\n                  <MenuItem key={condition.id} value={condition.id}>\r\n                    {condition.name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} md={6}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Threshold\"\r\n              type=\"number\"\r\n              value={newSetting.threshold}\r\n              onChange={(e) => setNewSetting({\r\n                ...newSetting,\r\n                threshold: e.target.value\r\n              })}\r\n              InputProps={{\r\n                endAdornment: sensorType.unit\r\n              }}\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} md={6}>\r\n            <FormControl fullWidth>\r\n              <InputLabel>Severity</InputLabel>\r\n              <Select\r\n                value={newSetting.severity}\r\n                label=\"Severity\"\r\n                onChange={(e) => setNewSetting({\r\n                  ...newSetting,\r\n                  severity: e.target.value\r\n                })}\r\n              >\r\n                {SEVERITY_LEVELS.map(level => (\r\n                  <MenuItem key={level.id} value={level.id}>\r\n                    {level.name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          \r\n          <Grid item xs={12}>\r\n            <Typography variant=\"subtitle2\" gutterBottom>\r\n              Notification Method\r\n            </Typography>\r\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n              {NOTIFICATION_METHODS.map(method => (\r\n                <Chip\r\n                  key={method.id}\r\n                  label={method.name}\r\n                  onClick={() => handleNotificationMethodChange(method.id)}\r\n                  color={newSetting.notification_method.includes(method.id) ? 'primary' : 'default'}\r\n                  variant={newSetting.notification_method.includes(method.id) ? 'filled' : 'outlined'}\r\n                />\r\n              ))}\r\n            </Box>\r\n          </Grid>\r\n          \r\n          <Grid item xs={12}>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={newSetting.is_active}\r\n                  onChange={(e) => setNewSetting({\r\n                    ...newSetting,\r\n                    is_active: e.target.checked\r\n                  })}\r\n                />\r\n              }\r\n              label=\"Enable This Alert Setting\"\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>\r\n            {formMode === 'edit' && (\r\n              <Button\r\n                variant=\"outlined\"\r\n                color=\"inherit\"\r\n                onClick={() => {\r\n                  setFormMode('new');\r\n                  setSelectedSetting(null);\r\n                  setNewSetting({\r\n                    sensor_type: '',\r\n                    condition: 'gt',\r\n                    threshold: '',\r\n                    severity: 'medium',\r\n                    notification_method: ['app'],\r\n                    is_active: true\r\n                  });\r\n                }}\r\n                sx={{ mr: 1 }}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            )}\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<SaveIcon />}\r\n              onClick={handleAddSetting}\r\n              disabled={saveLoading}\r\n            >\r\n              {saveLoading ? <CircularProgress size={24} /> : (formMode === 'new' ? 'Add' : 'Save')}\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    );\r\n  };\r\n\r\n  // Render user preferences\r\n  const renderUserPreferences = () => {\r\n    return (\r\n      <Paper sx={{ p: 3, mb: 4 }}>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Notification Preferences\r\n        </Typography>\r\n        <Divider sx={{ mb: 3 }} />\r\n        \r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12}>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={userPreferences.receive_email_notifications}\r\n                  onChange={(e) => setUserPreferences({\r\n                    ...userPreferences,\r\n                    receive_email_notifications: e.target.checked\r\n                  })}\r\n                />\r\n              }\r\n              label=\"Receive Email Notifications\"\r\n            />\r\n          </Grid>\r\n          \r\n          {userPreferences.receive_email_notifications && (\r\n            <Grid item xs={12} md={6}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Email Address\"\r\n                type=\"email\"\r\n                value={userPreferences.email_address}\r\n                onChange={(e) => setUserPreferences({\r\n                  ...userPreferences,\r\n                  email_address: e.target.value\r\n                })}\r\n              />\r\n            </Grid>\r\n          )}\r\n          \r\n          <Grid item xs={12}>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={userPreferences.receive_sms_notifications}\r\n                  onChange={(e) => setUserPreferences({\r\n                    ...userPreferences,\r\n                    receive_sms_notifications: e.target.checked\r\n                  })}\r\n                />\r\n              }\r\n              label=\"Receive SMS Notifications\"\r\n            />\r\n          </Grid>\r\n          \r\n          {userPreferences.receive_sms_notifications && (\r\n            <Grid item xs={12} md={6}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Phone Number\"\r\n                value={userPreferences.phone_number}\r\n                onChange={(e) => setUserPreferences({\r\n                  ...userPreferences,\r\n                  phone_number: e.target.value\r\n                })}\r\n              />\r\n            </Grid>\r\n          )}\r\n          \r\n          <Grid item xs={12}>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={userPreferences.mute_notifications}\r\n                  onChange={(e) => setUserPreferences({\r\n                    ...userPreferences,\r\n                    mute_notifications: e.target.checked\r\n                  })}\r\n                />\r\n              }\r\n              label=\"Mute All Notifications\"\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12}>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={userPreferences.auto_acknowledge_low_severity}\r\n                  onChange={(e) => setUserPreferences({\r\n                    ...userPreferences,\r\n                    auto_acknowledge_low_severity: e.target.checked\r\n                  })}\r\n                />\r\n              }\r\n              label=\"Automatically Acknowledge Low Severity Alerts\"\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<SaveIcon />}\r\n              onClick={handleSaveUserPreferences}\r\n              disabled={saveLoading}\r\n            >\r\n              {saveLoading ? <CircularProgress size={24} /> : 'Save Settings'}\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    );\r\n  };\r\n\r\n  // Render existing alert settings list\r\n  const renderAlertSettingsList = () => {\r\n    return (\r\n      <Paper sx={{ mb: 4 }}>\r\n        <Box sx={{ p: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n          <Typography variant=\"h6\">Existing Alert Settings</Typography>\r\n          <Button\r\n            startIcon={<AddIcon />}\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              setFormMode('new');\r\n              setSelectedSetting(null);\r\n              setNewSetting({\r\n                sensor_type: '',\r\n                condition: 'gt',\r\n                threshold: '',\r\n                severity: 'medium',\r\n                notification_method: ['app'],\r\n                is_active: true\r\n              });\r\n            }}\r\n          >\r\n            Add New Setting\r\n          </Button>\r\n        </Box>\r\n        <Divider />\r\n        \r\n        <List>\r\n          {alertSettings.map((setting) => {\r\n            const sensorType = SENSOR_TYPES.find(type => type.id === setting.sensor_type) || {};\r\n            const condition = CONDITIONS.find(cond => cond.id === setting.condition) || {};\r\n            const severity = SEVERITY_LEVELS.find(sev => sev.id === setting.severity) || {};\r\n            \r\n            return (\r\n              <ListItem\r\n                key={setting.id}\r\n                sx={{\r\n                  borderLeft: 4,\r\n                  borderColor: setting.is_active ? \r\n                    `${severity.color}.main` : \r\n                    'action.disabled',\r\n                  bgcolor: (selectedSetting && selectedSetting.id === setting.id) ? \r\n                    'action.selected' : \r\n                    'inherit'\r\n                }}\r\n              >\r\n                <ListItemText\r\n                  primary={\r\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                      <Typography variant=\"subtitle1\">\r\n                        {sensorType.name} {condition.name} {setting.threshold} {sensorType.unit}\r\n                      </Typography>\r\n                      {!setting.is_active && (\r\n                        <Chip \r\n                          label=\"Disabled\" \r\n                          color=\"default\" \r\n                          size=\"small\" \r\n                          sx={{ ml: 1 }} \r\n                        />\r\n                      )}\r\n                    </Box>\r\n                  }\r\n                  secondary={\r\n                    <Box>\r\n                      <Chip \r\n                        label={severity.name} \r\n                        color={severity.color} \r\n                        size=\"small\" \r\n                        sx={{ mr: 1, mt: 1 }} \r\n                      />\r\n                      {setting.notification_method.map(method => {\r\n                        const methodInfo = NOTIFICATION_METHODS.find(m => m.id === method) || {};\r\n                        return (\r\n                          <Chip \r\n                            key={method}\r\n                            label={methodInfo.name} \r\n                            variant=\"outlined\"\r\n                            size=\"small\" \r\n                            sx={{ mr: 1, mt: 1 }} \r\n                          />\r\n                        );\r\n                      })}\r\n                    </Box>\r\n                  }\r\n                />\r\n                <ListItemSecondaryAction>\r\n                  <Tooltip title=\"Edit\">\r\n                    <IconButton \r\n                      edge=\"end\" \r\n                      onClick={() => handleEditSetting(setting)}\r\n                      sx={{ mr: 1 }}\r\n                    >\r\n                      <SettingsIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                  <Tooltip title=\"Delete\">\r\n                    <IconButton \r\n                      edge=\"end\" \r\n                      onClick={() => handleDeleteSetting(setting.id)}\r\n                    >\r\n                      <DeleteIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </ListItemSecondaryAction>\r\n              </ListItem>\r\n            );\r\n          })}\r\n          \r\n          {alertSettings.length === 0 && (\r\n            <ListItem>\r\n              <ListItemText\r\n                primary=\"No Alert Settings\"\r\n                secondary=\"Click above button to add new alert setting\"\r\n              />\r\n            </ListItem>\r\n          )}\r\n        </List>\r\n      </Paper>\r\n    );\r\n  };\r\n\r\n  // Load state\r\n  if (loading && alertSettings.length === 0) {\r\n    return (\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box>\r\n      {/* Message prompt */}\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n      \r\n      {success && (\r\n        <Alert severity=\"success\" sx={{ mb: 3 }} onClose={() => setSuccess(null)}>\r\n          {success}\r\n        </Alert>\r\n      )}\r\n      \r\n      {/* Alert setting form */}\r\n      {renderSettingForm()}\r\n      \r\n      {/* Existing alert settings list */}\r\n      {renderAlertSettingsList()}\r\n      \r\n      {/* User preferences */}\r\n      {renderUserPreferences()}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AlertSettings; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}