{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LIJIN\\\\Desktop\\\\webTest\\\\frontend\\\\src\\\\contexts\\\\SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport { SOCKET_URL } from '../config';\nimport { useAuth } from './AuthContext';\n\n// 创建上下文\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\n\n// 提供上下文的组件\nexport const SocketProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    isAuthenticated\n  } = useAuth();\n  const [socket, setSocket] = useState(null);\n  const [lastMessage, setLastMessage] = useState(null);\n  const [sensorData, setSensorData] = useState({});\n  const [actuatorData, setActuatorData] = useState({});\n\n  // 连接到Socket.io服务器\n  useEffect(() => {\n    let socketInstance = null;\n    if (isAuthenticated) {\n      socketInstance = io(SOCKET_URL);\n      setSocket(socketInstance);\n      socketInstance.on('connect', () => {\n        console.log('Connected to Socket.io server');\n      });\n      socketInstance.on('mqtt_message', data => {\n        console.log('MQTT message received:', data);\n        setLastMessage(data);\n\n        // 处理传感器数据\n        if (data.topic.startsWith('farm/sensors/')) {\n          const parts = data.topic.split('/');\n          const sensorType = parts[2];\n          const location = parts[3].replace(/_/g, ' ');\n          const sensorKey = `${sensorType}_${location}`;\n          setSensorData(prev => ({\n            ...prev,\n            [sensorKey]: {\n              type: sensorType,\n              location: data.payload.location,\n              value: data.payload.value,\n              unit: data.payload.unit,\n              timestamp: data.payload.timestamp\n            }\n          }));\n        }\n\n        // 处理执行器数据\n        if (data.topic.startsWith('farm/actuators/')) {\n          const parts = data.topic.split('/');\n          const actuatorType = parts[2];\n          const location = parts[3].replace(/_/g, ' ');\n          const actuatorKey = `${actuatorType}_${location}`;\n          setActuatorData(prev => ({\n            ...prev,\n            [actuatorKey]: {\n              type: actuatorType,\n              location: data.payload.location,\n              state: data.payload.state,\n              timestamp: data.payload.timestamp\n            }\n          }));\n        }\n      });\n      socketInstance.on('disconnect', () => {\n        console.log('Disconnected from Socket.io server');\n      });\n\n      // 清理函数\n      return () => {\n        socketInstance.disconnect();\n      };\n    }\n  }, [isAuthenticated]);\n\n  // 提供上下文值\n  const value = {\n    socket,\n    lastMessage,\n    sensorData,\n    actuatorData\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n// 使用上下文的自定义Hook\n_s(SocketProvider, \"cMcaFuT+PvUKwZi1/ZjQRIZwbXw=\", false, function () {\n  return [useAuth];\n});\n_c = SocketProvider;\nexport const useSocket = () => {\n  _s2();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n_s2(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","SOCKET_URL","useAuth","jsxDEV","_jsxDEV","SocketContext","SocketProvider","children","_s","isAuthenticated","socket","setSocket","lastMessage","setLastMessage","sensorData","setSensorData","actuatorData","setActuatorData","socketInstance","on","console","log","data","topic","startsWith","parts","split","sensorType","location","replace","sensorKey","prev","type","payload","value","unit","timestamp","actuatorType","actuatorKey","state","disconnect","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSocket","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/LIJIN/Desktop/webTest/frontend/src/contexts/SocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { SOCKET_URL } from '../config';\r\nimport { useAuth } from './AuthContext';\r\n\r\n// 创建上下文\r\nconst SocketContext = createContext();\r\n\r\n// 提供上下文的组件\r\nexport const SocketProvider = ({ children }) => {\r\n  const { isAuthenticated } = useAuth();\r\n  const [socket, setSocket] = useState(null);\r\n  const [lastMessage, setLastMessage] = useState(null);\r\n  const [sensorData, setSensorData] = useState({});\r\n  const [actuatorData, setActuatorData] = useState({});\r\n\r\n  // 连接到Socket.io服务器\r\n  useEffect(() => {\r\n    let socketInstance = null;\r\n\r\n    if (isAuthenticated) {\r\n      socketInstance = io(SOCKET_URL);\r\n      setSocket(socketInstance);\r\n\r\n      socketInstance.on('connect', () => {\r\n        console.log('Connected to Socket.io server');\r\n      });\r\n\r\n      socketInstance.on('mqtt_message', (data) => {\r\n        console.log('MQTT message received:', data);\r\n        setLastMessage(data);\r\n\r\n        // 处理传感器数据\r\n        if (data.topic.startsWith('farm/sensors/')) {\r\n          const parts = data.topic.split('/');\r\n          const sensorType = parts[2];\r\n          const location = parts[3].replace(/_/g, ' ');\r\n          const sensorKey = `${sensorType}_${location}`;\r\n\r\n          setSensorData(prev => ({\r\n            ...prev,\r\n            [sensorKey]: {\r\n              type: sensorType,\r\n              location: data.payload.location,\r\n              value: data.payload.value,\r\n              unit: data.payload.unit,\r\n              timestamp: data.payload.timestamp\r\n            }\r\n          }));\r\n        }\r\n\r\n        // 处理执行器数据\r\n        if (data.topic.startsWith('farm/actuators/')) {\r\n          const parts = data.topic.split('/');\r\n          const actuatorType = parts[2];\r\n          const location = parts[3].replace(/_/g, ' ');\r\n          const actuatorKey = `${actuatorType}_${location}`;\r\n\r\n          setActuatorData(prev => ({\r\n            ...prev,\r\n            [actuatorKey]: {\r\n              type: actuatorType,\r\n              location: data.payload.location,\r\n              state: data.payload.state,\r\n              timestamp: data.payload.timestamp\r\n            }\r\n          }));\r\n        }\r\n      });\r\n\r\n      socketInstance.on('disconnect', () => {\r\n        console.log('Disconnected from Socket.io server');\r\n      });\r\n\r\n      // 清理函数\r\n      return () => {\r\n        socketInstance.disconnect();\r\n      };\r\n    }\r\n  }, [isAuthenticated]);\r\n\r\n  // 提供上下文值\r\n  const value = {\r\n    socket,\r\n    lastMessage,\r\n    sensorData,\r\n    actuatorData\r\n  };\r\n\r\n  return (\r\n    <SocketContext.Provider value={value}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  );\r\n};\r\n\r\n// 使用上下文的自定义Hook\r\nexport const useSocket = () => {\r\n  const context = useContext(SocketContext);\r\n  if (!context) {\r\n    throw new Error('useSocket must be used within a SocketProvider');\r\n  }\r\n  return context;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}