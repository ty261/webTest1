{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _d3Shape = require(\"@mui/x-charts-vendor/d3-shape\");\nvar _warning = require(\"@mui/x-internals/warning\");\nvar _stackSeries = require(\"../../internals/stackSeries\");\nvar _defaultizeValueFormatter = require(\"../../internals/defaultizeValueFormatter\");\nconst seriesProcessor = (params, dataset) => {\n  const {\n    seriesOrder,\n    series\n  } = params;\n  const stackingGroups = (0, _stackSeries.getStackingGroups)(params);\n\n  // Create a data set with format adapted to d3\n  const d3Dataset = dataset ?? [];\n  seriesOrder.forEach(id => {\n    const data = series[id].data;\n    if (data !== undefined) {\n      data.forEach((value, index) => {\n        if (d3Dataset.length <= index) {\n          d3Dataset.push({\n            [id]: value\n          });\n        } else {\n          d3Dataset[index][id] = value;\n        }\n      });\n    } else if (dataset === undefined) {\n      throw new Error([`MUI X Charts: bar series with id='${id}' has no data.`, 'Either provide a data property to the series or use the dataset prop.'].join('\\n'));\n    }\n  });\n  const completedSeries = {};\n  stackingGroups.forEach(stackingGroup => {\n    const {\n      ids,\n      stackingOffset,\n      stackingOrder\n    } = stackingGroup;\n    // Get stacked values, and derive the domain\n    const stackedSeries = (0, _d3Shape.stack)().keys(ids.map(id => {\n      // Use dataKey if needed and available\n      const dataKey = series[id].dataKey;\n      return series[id].data === undefined && dataKey !== undefined ? dataKey : id;\n    })).value((d, key) => d[key] ?? 0) // defaultize null value to 0\n    .order(stackingOrder).offset(stackingOffset)(d3Dataset);\n    ids.forEach((id, index) => {\n      const dataKey = series[id].dataKey;\n      completedSeries[id] = (0, _extends2.default)({\n        layout: 'vertical',\n        labelMarkType: 'square'\n      }, series[id], {\n        data: dataKey ? dataset.map(data => {\n          const value = data[dataKey];\n          if (typeof value !== 'number') {\n            if (process.env.NODE_ENV !== 'production') {\n              if (value !== null) {\n                (0, _warning.warnOnce)([`MUI X Charts: your dataset key \"${dataKey}\" is used for plotting bars, but contains nonnumerical elements.`, 'Bar plots only support numbers and null values.']);\n              }\n            }\n            return 0;\n          }\n          return value;\n        }) : series[id].data,\n        stackedData: stackedSeries[index].map(([a, b]) => [a, b])\n      });\n    });\n  });\n  return {\n    seriesOrder,\n    stackingGroups,\n    series: (0, _defaultizeValueFormatter.defaultizeValueFormatter)(completedSeries, v => v == null ? '' : v.toLocaleString())\n  };\n};\nvar _default = exports.default = seriesProcessor;","map":{"version":3,"names":["_interopRequireDefault","require","default","Object","defineProperty","exports","value","_extends2","_d3Shape","_warning","_stackSeries","_defaultizeValueFormatter","seriesProcessor","params","dataset","seriesOrder","series","stackingGroups","getStackingGroups","d3Dataset","forEach","id","data","undefined","index","length","push","Error","join","completedSeries","stackingGroup","ids","stackingOffset","stackingOrder","stackedSeries","stack","keys","map","dataKey","d","key","order","offset","layout","labelMarkType","process","env","NODE_ENV","warnOnce","stackedData","a","b","defaultizeValueFormatter","v","toLocaleString","_default"],"sources":["C:/Users/LIJIN/Desktop/webTest/Bak/webTest/frontend/node_modules/@mui/x-charts/BarChart/seriesConfig/seriesProcessor.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _d3Shape = require(\"@mui/x-charts-vendor/d3-shape\");\nvar _warning = require(\"@mui/x-internals/warning\");\nvar _stackSeries = require(\"../../internals/stackSeries\");\nvar _defaultizeValueFormatter = require(\"../../internals/defaultizeValueFormatter\");\nconst seriesProcessor = (params, dataset) => {\n  const {\n    seriesOrder,\n    series\n  } = params;\n  const stackingGroups = (0, _stackSeries.getStackingGroups)(params);\n\n  // Create a data set with format adapted to d3\n  const d3Dataset = dataset ?? [];\n  seriesOrder.forEach(id => {\n    const data = series[id].data;\n    if (data !== undefined) {\n      data.forEach((value, index) => {\n        if (d3Dataset.length <= index) {\n          d3Dataset.push({\n            [id]: value\n          });\n        } else {\n          d3Dataset[index][id] = value;\n        }\n      });\n    } else if (dataset === undefined) {\n      throw new Error([`MUI X Charts: bar series with id='${id}' has no data.`, 'Either provide a data property to the series or use the dataset prop.'].join('\\n'));\n    }\n  });\n  const completedSeries = {};\n  stackingGroups.forEach(stackingGroup => {\n    const {\n      ids,\n      stackingOffset,\n      stackingOrder\n    } = stackingGroup;\n    // Get stacked values, and derive the domain\n    const stackedSeries = (0, _d3Shape.stack)().keys(ids.map(id => {\n      // Use dataKey if needed and available\n      const dataKey = series[id].dataKey;\n      return series[id].data === undefined && dataKey !== undefined ? dataKey : id;\n    })).value((d, key) => d[key] ?? 0) // defaultize null value to 0\n    .order(stackingOrder).offset(stackingOffset)(d3Dataset);\n    ids.forEach((id, index) => {\n      const dataKey = series[id].dataKey;\n      completedSeries[id] = (0, _extends2.default)({\n        layout: 'vertical',\n        labelMarkType: 'square'\n      }, series[id], {\n        data: dataKey ? dataset.map(data => {\n          const value = data[dataKey];\n          if (typeof value !== 'number') {\n            if (process.env.NODE_ENV !== 'production') {\n              if (value !== null) {\n                (0, _warning.warnOnce)([`MUI X Charts: your dataset key \"${dataKey}\" is used for plotting bars, but contains nonnumerical elements.`, 'Bar plots only support numbers and null values.']);\n              }\n            }\n            return 0;\n          }\n          return value;\n        }) : series[id].data,\n        stackedData: stackedSeries[index].map(([a, b]) => [a, b])\n      });\n    });\n  });\n  return {\n    seriesOrder,\n    stackingGroups,\n    series: (0, _defaultizeValueFormatter.defaultizeValueFormatter)(completedSeries, v => v == null ? '' : v.toLocaleString())\n  };\n};\nvar _default = exports.default = seriesProcessor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}