{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LIJIN\\\\Desktop\\\\webTest\\\\Bak\\\\webTest\\\\frontend\\\\src\\\\components\\\\alerts\\\\AlertSettings.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Paper, Typography, Divider, Grid, FormControl, InputLabel, Select, MenuItem, TextField, Button, Switch, FormControlLabel, Chip, Alert, Card, CardContent, CircularProgress, IconButton, Tooltip, List, ListItem, ListItemText, ListItemSecondaryAction, Slider } from '@mui/material';\nimport { Add as AddIcon, Delete as DeleteIcon, Save as SaveIcon, Notifications as NotificationsIcon, Settings as SettingsIcon, Edit as EditIcon, PersonAdd as PersonAddIcon, Close as CloseIcon } from '@mui/icons-material';\nimport { alertAPI } from '../../services/api';\n\n// Mock alert settings data\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst mockAlertSettings = [{\n  id: 1,\n  sensor_type: 'temperature',\n  condition: 'gt',\n  threshold: 30,\n  severity: 'high',\n  notification_method: ['app', 'email'],\n  is_active: true\n}, {\n  id: 2,\n  sensor_type: 'temperature',\n  condition: 'lt',\n  threshold: 10,\n  severity: 'medium',\n  notification_method: ['app'],\n  is_active: true\n}, {\n  id: 3,\n  sensor_type: 'humidity',\n  condition: 'gt',\n  threshold: 85,\n  severity: 'medium',\n  notification_method: ['app'],\n  is_active: true\n}, {\n  id: 4,\n  sensor_type: 'humidity',\n  condition: 'lt',\n  threshold: 30,\n  severity: 'medium',\n  notification_method: ['app', 'email'],\n  is_active: true\n}, {\n  id: 5,\n  sensor_type: 'soil_moisture',\n  condition: 'lt',\n  threshold: 20,\n  severity: 'high',\n  notification_method: ['app', 'email', 'sms'],\n  is_active: true\n}];\n\n// Supported sensor types\nconst SENSOR_TYPES = [{\n  id: 'temperature',\n  name: 'Temperature',\n  unit: 'Â°C'\n}, {\n  id: 'humidity',\n  name: 'Humidity',\n  unit: '%'\n}, {\n  id: 'light',\n  name: 'Light',\n  unit: 'lux'\n}, {\n  id: 'soil_moisture',\n  name: 'Soil Moisture',\n  unit: '%'\n}, {\n  id: 'co2',\n  name: 'CO2',\n  unit: 'ppm'\n}, {\n  id: 'ph',\n  name: 'pH Value',\n  unit: ''\n}, {\n  id: 'water_level',\n  name: 'Water Level',\n  unit: '%'\n}];\n\n// Condition types\nconst CONDITIONS = [{\n  id: 'gt',\n  name: 'Greater Than'\n}, {\n  id: 'lt',\n  name: 'Less Than'\n}, {\n  id: 'eq',\n  name: 'Equal To'\n}, {\n  id: 'gte',\n  name: 'Greater Than or Equal To'\n}, {\n  id: 'lte',\n  name: 'Less Than or Equal To'\n}];\n\n// Severity levels\nconst SEVERITY_LEVELS = [{\n  id: 'high',\n  name: 'Critical',\n  color: 'error'\n}, {\n  id: 'medium',\n  name: 'Warning',\n  color: 'warning'\n}, {\n  id: 'low',\n  name: 'Information',\n  color: 'info'\n}];\n\n// Notification methods\nconst NOTIFICATION_METHODS = [{\n  id: 'app',\n  name: 'In-App Notification'\n}, {\n  id: 'email',\n  name: 'Email'\n}, {\n  id: 'sms',\n  name: 'SMS'\n}, {\n  id: 'webhook',\n  name: 'Webhook'\n}];\n\n// Default values by sensor type\nconst DEFAULT_THRESHOLD_VALUES = {\n  temperature: {\n    high: 30,\n    low: 10\n  },\n  humidity: {\n    high: 85,\n    low: 30\n  },\n  light: {\n    high: 50000,\n    low: 1000\n  },\n  soil_moisture: {\n    high: 90,\n    low: 20\n  },\n  co2: {\n    high: 1500,\n    low: 300\n  },\n  ph: {\n    high: 8.5,\n    low: 5.5\n  },\n  water_level: {\n    high: 90,\n    low: 20\n  }\n};\nconst AlertSettings = () => {\n  _s();\n  // State management\n  const [alertSettings, setAlertSettings] = useState([]);\n  const [userPreferences, setUserPreferences] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [saveLoading, setSaveLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n  const [selectedSetting, setSelectedSetting] = useState(null);\n  const [newSetting, setNewSetting] = useState({\n    sensor_type: '',\n    condition: 'gt',\n    threshold: '',\n    severity: 'medium',\n    notification_method: ['app'],\n    is_active: true\n  });\n  const [formMode, setFormMode] = useState('new'); // 'new' or 'edit'\n  const [personalThresholds, setPersonalThresholds] = useState({});\n  const [showPersonalForm, setShowPersonalForm] = useState(false);\n\n  // Load alert settings\n  const fetchAlertSettings = async () => {\n    setLoading(true);\n    try {\n      // Get system thresholds\n      const response = await alertAPI.getAlertThresholds();\n      if (response && response.success) {\n        setAlertSettings(response.data);\n      } else {\n        throw new Error(\"Failed to load alert thresholds\");\n      }\n\n      // Load user preferences\n      const prefsResponse = await alertAPI.getUserPreferences();\n      if (prefsResponse && prefsResponse.success) {\n        setUserPreferences(prefsResponse.data);\n\n        // Initialize personal thresholds from preferences or create defaults\n        if (prefsResponse.data.personalThresholds) {\n          setPersonalThresholds(prefsResponse.data.personalThresholds);\n        } else {\n          // Create default personal thresholds for each sensor type\n          const defaultPersonalThresholds = {};\n          SENSOR_TYPES.forEach(sensorType => {\n            defaultPersonalThresholds[sensorType.id] = {\n              high: DEFAULT_THRESHOLD_VALUES[sensorType.id].high,\n              low: DEFAULT_THRESHOLD_VALUES[sensorType.id].low\n            };\n          });\n          setPersonalThresholds(defaultPersonalThresholds);\n        }\n      } else {\n        throw new Error(\"Failed to load user preferences\");\n      }\n    } catch (err) {\n      console.error('Failed to get alert settings:', err);\n      setError('Failed to load alert settings. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Initial load\n  useEffect(() => {\n    fetchAlertSettings();\n  }, []);\n\n  // Add new alert setting\n  const handleAddSetting = async () => {\n    // Validate form\n    if (!newSetting.sensor_type || !newSetting.threshold || !newSetting.notification_method.length) {\n      setError('Please fill in all required fields.');\n      return;\n    }\n    setSaveLoading(true);\n    try {\n      let response;\n      if (formMode === 'new') {\n        // Create new setting\n        response = await alertAPI.createAlertThreshold(newSetting);\n      } else {\n        // Update existing setting\n        response = await alertAPI.updateAlertThreshold(selectedSetting.id, newSetting);\n      }\n      if (response && response.success) {\n        if (formMode === 'new') {\n          setAlertSettings([...alertSettings, response.data]);\n          // Reset form\n          setNewSetting({\n            sensor_type: '',\n            condition: 'gt',\n            threshold: '',\n            severity: 'medium',\n            notification_method: ['app'],\n            is_active: true\n          });\n          setSuccess('Alert setting created successfully.');\n        } else {\n          // Edit mode - update existing setting\n          const updatedSettings = alertSettings.map(setting => setting.id === response.data.id ? response.data : setting);\n          setAlertSettings(updatedSettings);\n          setFormMode('new');\n          setSelectedSetting(null);\n          setSuccess('Alert setting updated successfully.');\n        }\n      } else {\n        var _response;\n        throw new Error(((_response = response) === null || _response === void 0 ? void 0 : _response.message) || \"Failed to save alert setting\");\n      }\n    } catch (err) {\n      console.error('Failed to save alert setting:', err);\n      setError(err.message || 'Save failed. Please try again later.');\n    } finally {\n      setSaveLoading(false);\n    }\n  };\n\n  // Edit existing alert setting\n  const handleEditSetting = setting => {\n    setSelectedSetting(setting);\n    setNewSetting({\n      ...setting\n    });\n    setFormMode('edit');\n  };\n\n  // Delete alert setting\n  const handleDeleteSetting = async id => {\n    try {\n      const response = await alertAPI.deleteAlertThreshold(id);\n      if (response && response.success) {\n        // Update local state\n        setAlertSettings(alertSettings.filter(setting => setting.id !== id));\n        setSuccess('Alert setting deleted successfully.');\n\n        // If currently editing the deleted setting, reset form\n        if (selectedSetting && selectedSetting.id === id) {\n          setFormMode('new');\n          setSelectedSetting(null);\n          setNewSetting({\n            sensor_type: '',\n            condition: 'gt',\n            threshold: '',\n            severity: 'medium',\n            notification_method: ['app'],\n            is_active: true\n          });\n        }\n      } else {\n        throw new Error((response === null || response === void 0 ? void 0 : response.message) || \"Failed to delete alert setting\");\n      }\n    } catch (err) {\n      console.error('Failed to delete alert setting:', err);\n      setError(err.message || 'Delete failed. Please try again later.');\n    }\n  };\n\n  // Save user preferences\n  const handleSaveUserPreferences = async () => {\n    setSaveLoading(true);\n    try {\n      // Include personal thresholds in user preferences\n      const prefsWithThresholds = {\n        ...userPreferences,\n        personalThresholds: personalThresholds\n      };\n      const response = await alertAPI.updateUserPreferences(prefsWithThresholds);\n      if (response && response.success) {\n        setSuccess('User preferences updated successfully.');\n        setShowPersonalForm(false);\n      } else {\n        throw new Error((response === null || response === void 0 ? void 0 : response.message) || \"Failed to update user preferences\");\n      }\n    } catch (err) {\n      console.error('Failed to save user preferences:', err);\n      setError(err.message || 'Update failed. Please try again later.');\n    } finally {\n      setSaveLoading(false);\n    }\n  };\n\n  // Handle changes to notification methods\n  const handleNotificationMethodChange = method => {\n    const methods = [...newSetting.notification_method];\n    const index = methods.indexOf(method);\n    if (index === -1) {\n      methods.push(method);\n    } else {\n      methods.splice(index, 1);\n    }\n    setNewSetting({\n      ...newSetting,\n      notification_method: methods\n    });\n  };\n\n  // Handle changes to personal threshold values\n  const handlePersonalThresholdChange = (sensorType, threshold, value) => {\n    setPersonalThresholds(prev => ({\n      ...prev,\n      [sensorType]: {\n        ...prev[sensorType],\n        [threshold]: value\n      }\n    }));\n  };\n\n  // Get sensor type info\n  const getSensorTypeInfo = typeId => {\n    return SENSOR_TYPES.find(type => type.id === typeId) || {\n      name: 'Unknown',\n      unit: ''\n    };\n  };\n\n  // Render alert setting form\n  const renderSettingForm = () => {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 3,\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: formMode === 'new' ? 'Create New Alert Setting' : 'Edit Alert Setting'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        sx: {\n          mb: 3\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"Sensor Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: newSetting.sensor_type,\n              onChange: e => setNewSetting({\n                ...newSetting,\n                sensor_type: e.target.value\n              }),\n              children: SENSOR_TYPES.map(type => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: type.id,\n                children: [type.name, \" (\", type.unit, \")\"]\n              }, type.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"Condition\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: newSetting.condition,\n              onChange: e => setNewSetting({\n                ...newSetting,\n                condition: e.target.value\n              }),\n              children: CONDITIONS.map(condition => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: condition.id,\n                children: condition.name\n              }, condition.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: `Threshold${newSetting.sensor_type ? ` (${getSensorTypeInfo(newSetting.sensor_type).unit})` : ''}`,\n            type: \"number\",\n            value: newSetting.threshold,\n            onChange: e => setNewSetting({\n              ...newSetting,\n              threshold: e.target.value\n            }),\n            InputProps: {\n              inputProps: {\n                step: newSetting.sensor_type === 'ph' ? 0.1 : 1\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"Severity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 415,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: newSetting.severity,\n              onChange: e => setNewSetting({\n                ...newSetting,\n                severity: e.target.value\n              }),\n              children: SEVERITY_LEVELS.map(level => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: level.id,\n                children: level.name\n              }, level.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 421,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle1\",\n            gutterBottom: true,\n            children: \"Notification Methods\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              flexWrap: 'wrap',\n              gap: 1\n            },\n            children: NOTIFICATION_METHODS.map(method => /*#__PURE__*/_jsxDEV(Chip, {\n              label: method.name,\n              onClick: () => handleNotificationMethodChange(method.id),\n              color: newSetting.notification_method.includes(method.id) ? 'primary' : 'default',\n              variant: newSetting.notification_method.includes(method.id) ? 'filled' : 'outlined'\n            }, method.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 433,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Switch, {\n              checked: newSetting.is_active,\n              onChange: e => setNewSetting({\n                ...newSetting,\n                is_active: e.target.checked\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 17\n            }, this),\n            label: \"Enable this alert setting\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sx: {\n            display: 'flex',\n            justifyContent: 'flex-end',\n            gap: 2\n          },\n          children: [formMode === 'edit' && /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            onClick: () => {\n              setFormMode('new');\n              setSelectedSetting(null);\n              setNewSetting({\n                sensor_type: '',\n                condition: 'gt',\n                threshold: '',\n                severity: 'medium',\n                notification_method: ['app'],\n                is_active: true\n              });\n            },\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            startIcon: formMode === 'new' ? /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 478,\n              columnNumber: 47\n            }, this) : /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 478,\n              columnNumber: 61\n            }, this),\n            onClick: handleAddSetting,\n            disabled: saveLoading,\n            children: saveLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n              size: 24\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 30\n            }, this) : formMode === 'new' ? 'Add Alert Setting' : 'Save Changes'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render personalized thresholds form\n  const renderPersonalThresholdsForm = () => {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 3,\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Personalized Alert Thresholds\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: showPersonalForm ? \"outlined\" : \"contained\",\n          color: \"primary\",\n          onClick: () => setShowPersonalForm(!showPersonalForm),\n          startIcon: showPersonalForm ? /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 43\n          }, this) : /*#__PURE__*/_jsxDEV(PersonAddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 59\n          }, this),\n          children: showPersonalForm ? 'Cancel' : 'Customize Thresholds'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        sx: {\n          mb: 3\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 9\n      }, this), showPersonalForm ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          paragraph: true,\n          children: \"Customize alert thresholds based on your preferences. These values will be used when generating alerts specifically for you.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 13\n        }, this), SENSOR_TYPES.map(sensorType => {\n          var _personalThresholds$s, _personalThresholds$s2;\n          return /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mb: 4\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle1\",\n              fontWeight: \"bold\",\n              children: [sensorType.name, \" \", sensorType.unit ? `(${sensorType.unit})` : '']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 517,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 2,\n              sx: {\n                mt: 1\n              },\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                md: 6,\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  gutterBottom: true,\n                  children: \"High Threshold (Alert when above this value)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 523,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    px: 2\n                  },\n                  children: /*#__PURE__*/_jsxDEV(Slider, {\n                    value: ((_personalThresholds$s = personalThresholds[sensorType.id]) === null || _personalThresholds$s === void 0 ? void 0 : _personalThresholds$s.high) || DEFAULT_THRESHOLD_VALUES[sensorType.id].high,\n                    onChange: (_, value) => handlePersonalThresholdChange(sensorType.id, 'high', value),\n                    valueLabelDisplay: \"auto\",\n                    min: getMinMaxForSensorType(sensorType.id).min,\n                    max: getMinMaxForSensorType(sensorType.id).max,\n                    step: sensorType.id === 'ph' ? 0.1 : 1,\n                    marks: [{\n                      value: DEFAULT_THRESHOLD_VALUES[sensorType.id].high,\n                      label: 'Default'\n                    }]\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 527,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 526,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 522,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                md: 6,\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  gutterBottom: true,\n                  children: \"Low Threshold (Alert when below this value)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 542,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    px: 2\n                  },\n                  children: /*#__PURE__*/_jsxDEV(Slider, {\n                    value: ((_personalThresholds$s2 = personalThresholds[sensorType.id]) === null || _personalThresholds$s2 === void 0 ? void 0 : _personalThresholds$s2.low) || DEFAULT_THRESHOLD_VALUES[sensorType.id].low,\n                    onChange: (_, value) => handlePersonalThresholdChange(sensorType.id, 'low', value),\n                    valueLabelDisplay: \"auto\",\n                    min: getMinMaxForSensorType(sensorType.id).min,\n                    max: getMinMaxForSensorType(sensorType.id).max,\n                    step: sensorType.id === 'ph' ? 0.1 : 1,\n                    marks: [{\n                      value: DEFAULT_THRESHOLD_VALUES[sensorType.id].low,\n                      label: 'Default'\n                    }]\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 546,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 545,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 541,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 521,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Divider, {\n              sx: {\n                mt: 2\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 560,\n              columnNumber: 17\n            }, this)]\n          }, sensorType.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 15\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'flex-end',\n            mt: 3\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: handleSaveUserPreferences,\n            startIcon: /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 569,\n              columnNumber: 28\n            }, this),\n            disabled: saveLoading,\n            children: saveLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n              size: 24\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 572,\n              columnNumber: 32\n            }, this) : 'Save Personal Thresholds'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 565,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          paragraph: true,\n          children: \"You can customize alert thresholds to match your specific needs. Personalized thresholds will be used when generating alerts for you.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 578,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: SENSOR_TYPES.map(sensorType => {\n            const personal = personalThresholds[sensorType.id] || {};\n            const defaults = DEFAULT_THRESHOLD_VALUES[sensorType.id];\n            const hasCustom = personal.high !== defaults.high || personal.low !== defaults.low;\n            return /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              md: 6,\n              lg: 4,\n              children: /*#__PURE__*/_jsxDEV(Card, {\n                variant: \"outlined\",\n                children: /*#__PURE__*/_jsxDEV(CardContent, {\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"subtitle1\",\n                    children: [sensorType.name, hasCustom && /*#__PURE__*/_jsxDEV(Chip, {\n                      size: \"small\",\n                      label: \"Customized\",\n                      color: \"primary\",\n                      sx: {\n                        ml: 1\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 595,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 592,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(Box, {\n                    sx: {\n                      mt: 1\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"body2\",\n                      children: [\"High threshold: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: [personal.high || defaults.high, sensorType.unit]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 605,\n                        columnNumber: 45\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 604,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"body2\",\n                      children: [\"Low threshold: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: [personal.low || defaults.low, sensorType.unit]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 608,\n                        columnNumber: 44\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 607,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 603,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 591,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 590,\n                columnNumber: 21\n              }, this)\n            }, sensorType.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 589,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Get min and max values for sensor type sliders\n  const getMinMaxForSensorType = sensorType => {\n    switch (sensorType) {\n      case 'temperature':\n        return {\n          min: -10,\n          max: 50\n        };\n      case 'humidity':\n        return {\n          min: 0,\n          max: 100\n        };\n      case 'light':\n        return {\n          min: 0,\n          max: 100000\n        };\n      case 'soil_moisture':\n        return {\n          min: 0,\n          max: 100\n        };\n      case 'co2':\n        return {\n          min: 0,\n          max: 5000\n        };\n      case 'ph':\n        return {\n          min: 0,\n          max: 14\n        };\n      case 'water_level':\n        return {\n          min: 0,\n          max: 100\n        };\n      default:\n        return {\n          min: 0,\n          max: 100\n        };\n    }\n  };\n\n  // Render user preferences\n  const renderUserPreferences = () => {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 3,\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: \"User Notification Preferences\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 649,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        sx: {\n          mb: 3\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 650,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Switch, {\n              checked: userPreferences.receive_email_notifications,\n              onChange: e => setUserPreferences({\n                ...userPreferences,\n                receive_email_notifications: e.target.checked\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 656,\n              columnNumber: 17\n            }, this),\n            label: \"Receive Email Notifications\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 654,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 653,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Switch, {\n              checked: userPreferences.receive_sms_notifications,\n              onChange: e => setUserPreferences({\n                ...userPreferences,\n                receive_sms_notifications: e.target.checked\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 671,\n              columnNumber: 17\n            }, this),\n            label: \"Receive SMS Notifications\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 669,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 668,\n          columnNumber: 11\n        }, this), userPreferences.receive_email_notifications && /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Email Address\",\n            value: userPreferences.email_address || '',\n            onChange: e => setUserPreferences({\n              ...userPreferences,\n              email_address: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 685,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 684,\n          columnNumber: 13\n        }, this), userPreferences.receive_sms_notifications && /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Phone Number\",\n            value: userPreferences.phone_number || '',\n            onChange: e => setUserPreferences({\n              ...userPreferences,\n              phone_number: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 699,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 698,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Switch, {\n              checked: userPreferences.mute_notifications,\n              onChange: e => setUserPreferences({\n                ...userPreferences,\n                mute_notifications: e.target.checked\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 714,\n              columnNumber: 17\n            }, this),\n            label: \"Mute All Notifications\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 712,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 711,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Switch, {\n              checked: userPreferences.auto_acknowledge_low_severity,\n              onChange: e => setUserPreferences({\n                ...userPreferences,\n                auto_acknowledge_low_severity: e.target.checked\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 729,\n              columnNumber: 17\n            }, this),\n            label: \"Auto-acknowledge Low Severity Alerts\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 727,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 726,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sx: {\n            display: 'flex',\n            justifyContent: 'flex-end'\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            startIcon: /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 744,\n              columnNumber: 26\n            }, this),\n            onClick: handleSaveUserPreferences,\n            disabled: saveLoading,\n            children: saveLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n              size: 24\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 748,\n              columnNumber: 30\n            }, this) : 'Save Preferences'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 742,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 741,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 648,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render alert settings list\n  const renderAlertSettingsList = () => {\n    if (alertSettings.length === 0) {\n      return /*#__PURE__*/_jsxDEV(Paper, {\n        sx: {\n          p: 3,\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"textSecondary\",\n          children: \"No alert settings found. Create your first one!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 761,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 760,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: \"System Alert Settings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 768,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        sx: {\n          mb: 3\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 769,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        children: alertSettings.map(setting => {\n          const sensorInfo = SENSOR_TYPES.find(s => s.id === setting.sensor_type) || {\n            name: 'Unknown',\n            unit: ''\n          };\n          const condition = CONDITIONS.find(c => c.id === setting.condition) || {\n            name: 'Unknown'\n          };\n          const severity = SEVERITY_LEVELS.find(s => s.id === setting.severity) || {\n            name: 'Unknown',\n            color: 'default'\n          };\n          return /*#__PURE__*/_jsxDEV(ListItem, {\n            sx: {\n              borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n              py: 2\n            },\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                width: '100%'\n              },\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                alignItems: \"center\",\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  sm: 4,\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"subtitle1\",\n                    children: [sensorInfo.name, !setting.is_active && /*#__PURE__*/_jsxDEV(Chip, {\n                      label: \"Disabled\",\n                      color: \"default\",\n                      size: \"small\",\n                      sx: {\n                        ml: 1\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 784,\n                      columnNumber: 48\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 782,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body2\",\n                    color: \"textSecondary\",\n                    children: [condition.name, \" \", setting.threshold, \" \", sensorInfo.unit]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 786,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 781,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  sm: 3,\n                  children: /*#__PURE__*/_jsxDEV(Chip, {\n                    label: severity.name,\n                    color: severity.color === 'high' ? 'error' : severity.color === 'medium' ? 'warning' : 'info',\n                    size: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 792,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 791,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  sm: 3,\n                  children: /*#__PURE__*/_jsxDEV(Box, {\n                    sx: {\n                      display: 'flex',\n                      flexWrap: 'wrap',\n                      gap: 0.5\n                    },\n                    children: setting.notification_method.map(method => {\n                      var _NOTIFICATION_METHODS;\n                      return /*#__PURE__*/_jsxDEV(Chip, {\n                        label: ((_NOTIFICATION_METHODS = NOTIFICATION_METHODS.find(m => m.id === method)) === null || _NOTIFICATION_METHODS === void 0 ? void 0 : _NOTIFICATION_METHODS.name) || method,\n                        size: \"small\",\n                        variant: \"outlined\"\n                      }, method, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 802,\n                        columnNumber: 27\n                      }, this);\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 800,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 799,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  sm: 2,\n                  sx: {\n                    display: 'flex',\n                    justifyContent: 'flex-end'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(IconButton, {\n                    onClick: () => handleEditSetting(setting),\n                    children: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 814,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 813,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                    onClick: () => handleDeleteSetting(setting.id),\n                    children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 817,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 816,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 812,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 780,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 779,\n              columnNumber: 17\n            }, this)\n          }, setting.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 778,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 771,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 767,\n      columnNumber: 7\n    }, this);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center',\n        p: 4\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 833,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 832,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 3\n      },\n      onClose: () => setError(null),\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 841,\n      columnNumber: 9\n    }, this), success && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"success\",\n      sx: {\n        mb: 3\n      },\n      onClose: () => setSuccess(null),\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 847,\n      columnNumber: 9\n    }, this), renderPersonalThresholdsForm(), renderSettingForm(), renderUserPreferences(), renderAlertSettingsList()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 839,\n    columnNumber: 5\n  }, this);\n};\n_s(AlertSettings, \"WrM6iXqivzpxyV2vKRRExxKQfFA=\");\n_c = AlertSettings;\nexport default AlertSettings;\nvar _c;\n$RefreshReg$(_c, \"AlertSettings\");","map":{"version":3,"names":["React","useState","useEffect","Box","Paper","Typography","Divider","Grid","FormControl","InputLabel","Select","MenuItem","TextField","Button","Switch","FormControlLabel","Chip","Alert","Card","CardContent","CircularProgress","IconButton","Tooltip","List","ListItem","ListItemText","ListItemSecondaryAction","Slider","Add","AddIcon","Delete","DeleteIcon","Save","SaveIcon","Notifications","NotificationsIcon","Settings","SettingsIcon","Edit","EditIcon","PersonAdd","PersonAddIcon","Close","CloseIcon","alertAPI","jsxDEV","_jsxDEV","Fragment","_Fragment","mockAlertSettings","id","sensor_type","condition","threshold","severity","notification_method","is_active","SENSOR_TYPES","name","unit","CONDITIONS","SEVERITY_LEVELS","color","NOTIFICATION_METHODS","DEFAULT_THRESHOLD_VALUES","temperature","high","low","humidity","light","soil_moisture","co2","ph","water_level","AlertSettings","_s","alertSettings","setAlertSettings","userPreferences","setUserPreferences","loading","setLoading","saveLoading","setSaveLoading","error","setError","success","setSuccess","selectedSetting","setSelectedSetting","newSetting","setNewSetting","formMode","setFormMode","personalThresholds","setPersonalThresholds","showPersonalForm","setShowPersonalForm","fetchAlertSettings","response","getAlertThresholds","data","Error","prefsResponse","getUserPreferences","defaultPersonalThresholds","forEach","sensorType","err","console","handleAddSetting","length","createAlertThreshold","updateAlertThreshold","updatedSettings","map","setting","_response","message","handleEditSetting","handleDeleteSetting","deleteAlertThreshold","filter","handleSaveUserPreferences","prefsWithThresholds","updateUserPreferences","handleNotificationMethodChange","method","methods","index","indexOf","push","splice","handlePersonalThresholdChange","value","prev","getSensorTypeInfo","typeId","find","type","renderSettingForm","sx","p","mb","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","container","spacing","item","xs","md","fullWidth","onChange","e","target","label","InputProps","inputProps","step","level","display","flexWrap","gap","onClick","includes","control","checked","justifyContent","startIcon","disabled","size","renderPersonalThresholdsForm","alignItems","paragraph","_personalThresholds$s","_personalThresholds$s2","fontWeight","mt","px","_","valueLabelDisplay","min","getMinMaxForSensorType","max","marks","personal","defaults","hasCustom","lg","ml","renderUserPreferences","receive_email_notifications","receive_sms_notifications","email_address","phone_number","mute_notifications","auto_acknowledge_low_severity","renderAlertSettingsList","textAlign","sensorInfo","s","c","borderBottom","py","width","sm","_NOTIFICATION_METHODS","m","onClose","_c","$RefreshReg$"],"sources":["C:/Users/LIJIN/Desktop/webTest/Bak/webTest/frontend/src/components/alerts/AlertSettings.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  Divider,\r\n  Grid,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  TextField,\r\n  Button,\r\n  Switch,\r\n  FormControlLabel,\r\n  Chip,\r\n  Alert,\r\n  Card,\r\n  CardContent,\r\n  CircularProgress,\r\n  IconButton,\r\n  Tooltip,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  Slider\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Delete as DeleteIcon,\r\n  Save as SaveIcon,\r\n  Notifications as NotificationsIcon,\r\n  Settings as SettingsIcon,\r\n  Edit as EditIcon,\r\n  PersonAdd as PersonAddIcon,\r\n  Close as CloseIcon\r\n} from '@mui/icons-material';\r\nimport { alertAPI } from '../../services/api';\r\n\r\n// Mock alert settings data\r\nconst mockAlertSettings = [\r\n  {\r\n    id: 1,\r\n    sensor_type: 'temperature',\r\n    condition: 'gt',\r\n    threshold: 30,\r\n    severity: 'high',\r\n    notification_method: ['app', 'email'],\r\n    is_active: true\r\n  },\r\n  {\r\n    id: 2,\r\n    sensor_type: 'temperature',\r\n    condition: 'lt',\r\n    threshold: 10,\r\n    severity: 'medium',\r\n    notification_method: ['app'],\r\n    is_active: true\r\n  },\r\n  {\r\n    id: 3,\r\n    sensor_type: 'humidity',\r\n    condition: 'gt',\r\n    threshold: 85,\r\n    severity: 'medium',\r\n    notification_method: ['app'],\r\n    is_active: true\r\n  },\r\n  {\r\n    id: 4,\r\n    sensor_type: 'humidity',\r\n    condition: 'lt',\r\n    threshold: 30,\r\n    severity: 'medium',\r\n    notification_method: ['app', 'email'],\r\n    is_active: true\r\n  },\r\n  {\r\n    id: 5,\r\n    sensor_type: 'soil_moisture',\r\n    condition: 'lt',\r\n    threshold: 20,\r\n    severity: 'high',\r\n    notification_method: ['app', 'email', 'sms'],\r\n    is_active: true\r\n  }\r\n];\r\n\r\n// Supported sensor types\r\nconst SENSOR_TYPES = [\r\n  { id: 'temperature', name: 'Temperature', unit: 'Â°C' },\r\n  { id: 'humidity', name: 'Humidity', unit: '%' },\r\n  { id: 'light', name: 'Light', unit: 'lux' },\r\n  { id: 'soil_moisture', name: 'Soil Moisture', unit: '%' },\r\n  { id: 'co2', name: 'CO2', unit: 'ppm' },\r\n  { id: 'ph', name: 'pH Value', unit: '' },\r\n  { id: 'water_level', name: 'Water Level', unit: '%' }\r\n];\r\n\r\n// Condition types\r\nconst CONDITIONS = [\r\n  { id: 'gt', name: 'Greater Than' },\r\n  { id: 'lt', name: 'Less Than' },\r\n  { id: 'eq', name: 'Equal To' },\r\n  { id: 'gte', name: 'Greater Than or Equal To' },\r\n  { id: 'lte', name: 'Less Than or Equal To' }\r\n];\r\n\r\n// Severity levels\r\nconst SEVERITY_LEVELS = [\r\n  { id: 'high', name: 'Critical', color: 'error' },\r\n  { id: 'medium', name: 'Warning', color: 'warning' },\r\n  { id: 'low', name: 'Information', color: 'info' }\r\n];\r\n\r\n// Notification methods\r\nconst NOTIFICATION_METHODS = [\r\n  { id: 'app', name: 'In-App Notification' },\r\n  { id: 'email', name: 'Email' },\r\n  { id: 'sms', name: 'SMS' },\r\n  { id: 'webhook', name: 'Webhook' }\r\n];\r\n\r\n// Default values by sensor type\r\nconst DEFAULT_THRESHOLD_VALUES = {\r\n  temperature: { high: 30, low: 10 },\r\n  humidity: { high: 85, low: 30 },\r\n  light: { high: 50000, low: 1000 },\r\n  soil_moisture: { high: 90, low: 20 },\r\n  co2: { high: 1500, low: 300 },\r\n  ph: { high: 8.5, low: 5.5 },\r\n  water_level: { high: 90, low: 20 }\r\n};\r\n\r\nconst AlertSettings = () => {\r\n  // State management\r\n  const [alertSettings, setAlertSettings] = useState([]);\r\n  const [userPreferences, setUserPreferences] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n  const [saveLoading, setSaveLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [success, setSuccess] = useState(null);\r\n  const [selectedSetting, setSelectedSetting] = useState(null);\r\n  const [newSetting, setNewSetting] = useState({\r\n    sensor_type: '',\r\n    condition: 'gt',\r\n    threshold: '',\r\n    severity: 'medium',\r\n    notification_method: ['app'],\r\n    is_active: true\r\n  });\r\n  const [formMode, setFormMode] = useState('new'); // 'new' or 'edit'\r\n  const [personalThresholds, setPersonalThresholds] = useState({});\r\n  const [showPersonalForm, setShowPersonalForm] = useState(false);\r\n\r\n  // Load alert settings\r\n  const fetchAlertSettings = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Get system thresholds\r\n      const response = await alertAPI.getAlertThresholds();\r\n      if (response && response.success) {\r\n        setAlertSettings(response.data);\r\n      } else {\r\n        throw new Error(\"Failed to load alert thresholds\");\r\n      }\r\n      \r\n      // Load user preferences\r\n      const prefsResponse = await alertAPI.getUserPreferences();\r\n      if (prefsResponse && prefsResponse.success) {\r\n        setUserPreferences(prefsResponse.data);\r\n        \r\n        // Initialize personal thresholds from preferences or create defaults\r\n        if (prefsResponse.data.personalThresholds) {\r\n          setPersonalThresholds(prefsResponse.data.personalThresholds);\r\n        } else {\r\n          // Create default personal thresholds for each sensor type\r\n          const defaultPersonalThresholds = {};\r\n          SENSOR_TYPES.forEach(sensorType => {\r\n            defaultPersonalThresholds[sensorType.id] = { \r\n              high: DEFAULT_THRESHOLD_VALUES[sensorType.id].high,\r\n              low: DEFAULT_THRESHOLD_VALUES[sensorType.id].low\r\n            };\r\n          });\r\n          setPersonalThresholds(defaultPersonalThresholds);\r\n        }\r\n      } else {\r\n        throw new Error(\"Failed to load user preferences\");\r\n      }\r\n    } catch (err) {\r\n      console.error('Failed to get alert settings:', err);\r\n      setError('Failed to load alert settings. Please try again later.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Initial load\r\n  useEffect(() => {\r\n    fetchAlertSettings();\r\n  }, []);\r\n\r\n  // Add new alert setting\r\n  const handleAddSetting = async () => {\r\n    // Validate form\r\n    if (!newSetting.sensor_type || !newSetting.threshold || !newSetting.notification_method.length) {\r\n      setError('Please fill in all required fields.');\r\n      return;\r\n    }\r\n\r\n    setSaveLoading(true);\r\n    try {\r\n      let response;\r\n      \r\n      if (formMode === 'new') {\r\n        // Create new setting\r\n        response = await alertAPI.createAlertThreshold(newSetting);\r\n      } else {\r\n        // Update existing setting\r\n        response = await alertAPI.updateAlertThreshold(selectedSetting.id, newSetting);\r\n      }\r\n      \r\n      if (response && response.success) {\r\n        if (formMode === 'new') {\r\n          setAlertSettings([...alertSettings, response.data]);\r\n          // Reset form\r\n          setNewSetting({\r\n            sensor_type: '',\r\n            condition: 'gt',\r\n            threshold: '',\r\n            severity: 'medium',\r\n            notification_method: ['app'],\r\n            is_active: true\r\n          });\r\n          setSuccess('Alert setting created successfully.');\r\n        } else {\r\n          // Edit mode - update existing setting\r\n          const updatedSettings = alertSettings.map(setting => \r\n            setting.id === response.data.id ? response.data : setting\r\n          );\r\n          setAlertSettings(updatedSettings);\r\n          setFormMode('new');\r\n          setSelectedSetting(null);\r\n          setSuccess('Alert setting updated successfully.');\r\n        }\r\n      } else {\r\n        throw new Error(response?.message || \"Failed to save alert setting\");\r\n      }\r\n    } catch (err) {\r\n      console.error('Failed to save alert setting:', err);\r\n      setError(err.message || 'Save failed. Please try again later.');\r\n    } finally {\r\n      setSaveLoading(false);\r\n    }\r\n  };\r\n\r\n  // Edit existing alert setting\r\n  const handleEditSetting = (setting) => {\r\n    setSelectedSetting(setting);\r\n    setNewSetting({...setting});\r\n    setFormMode('edit');\r\n  };\r\n\r\n  // Delete alert setting\r\n  const handleDeleteSetting = async (id) => {\r\n    try {\r\n      const response = await alertAPI.deleteAlertThreshold(id);\r\n      \r\n      if (response && response.success) {\r\n        // Update local state\r\n        setAlertSettings(alertSettings.filter(setting => setting.id !== id));\r\n        setSuccess('Alert setting deleted successfully.');\r\n        \r\n        // If currently editing the deleted setting, reset form\r\n        if (selectedSetting && selectedSetting.id === id) {\r\n          setFormMode('new');\r\n          setSelectedSetting(null);\r\n          setNewSetting({\r\n            sensor_type: '',\r\n            condition: 'gt',\r\n            threshold: '',\r\n            severity: 'medium',\r\n            notification_method: ['app'],\r\n            is_active: true\r\n          });\r\n        }\r\n      } else {\r\n        throw new Error(response?.message || \"Failed to delete alert setting\");\r\n      }\r\n    } catch (err) {\r\n      console.error('Failed to delete alert setting:', err);\r\n      setError(err.message || 'Delete failed. Please try again later.');\r\n    }\r\n  };\r\n\r\n  // Save user preferences\r\n  const handleSaveUserPreferences = async () => {\r\n    setSaveLoading(true);\r\n    try {\r\n      // Include personal thresholds in user preferences\r\n      const prefsWithThresholds = {\r\n        ...userPreferences,\r\n        personalThresholds: personalThresholds\r\n      };\r\n      \r\n      const response = await alertAPI.updateUserPreferences(prefsWithThresholds);\r\n      \r\n      if (response && response.success) {\r\n        setSuccess('User preferences updated successfully.');\r\n        setShowPersonalForm(false);\r\n      } else {\r\n        throw new Error(response?.message || \"Failed to update user preferences\");\r\n      }\r\n    } catch (err) {\r\n      console.error('Failed to save user preferences:', err);\r\n      setError(err.message || 'Update failed. Please try again later.');\r\n    } finally {\r\n      setSaveLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handle changes to notification methods\r\n  const handleNotificationMethodChange = (method) => {\r\n    const methods = [...newSetting.notification_method];\r\n    const index = methods.indexOf(method);\r\n    \r\n    if (index === -1) {\r\n      methods.push(method);\r\n    } else {\r\n      methods.splice(index, 1);\r\n    }\r\n    \r\n    setNewSetting({\r\n      ...newSetting,\r\n      notification_method: methods\r\n    });\r\n  };\r\n  \r\n  // Handle changes to personal threshold values\r\n  const handlePersonalThresholdChange = (sensorType, threshold, value) => {\r\n    setPersonalThresholds(prev => ({\r\n      ...prev,\r\n      [sensorType]: {\r\n        ...prev[sensorType],\r\n        [threshold]: value\r\n      }\r\n    }));\r\n  };\r\n\r\n  // Get sensor type info\r\n  const getSensorTypeInfo = (typeId) => {\r\n    return SENSOR_TYPES.find(type => type.id === typeId) || { name: 'Unknown', unit: '' };\r\n  };\r\n\r\n  // Render alert setting form\r\n  const renderSettingForm = () => {\r\n    return (\r\n      <Paper sx={{ p: 3, mb: 4 }}>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          {formMode === 'new' ? 'Create New Alert Setting' : 'Edit Alert Setting'}\r\n        </Typography>\r\n        <Divider sx={{ mb: 3 }} />\r\n        \r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={6}>\r\n            <FormControl fullWidth>\r\n              <InputLabel>Sensor Type</InputLabel>\r\n              <Select\r\n                value={newSetting.sensor_type}\r\n                onChange={(e) => setNewSetting({...newSetting, sensor_type: e.target.value})}\r\n              >\r\n                {SENSOR_TYPES.map(type => (\r\n                  <MenuItem key={type.id} value={type.id}>\r\n                    {type.name} ({type.unit})\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} md={6}>\r\n            <FormControl fullWidth>\r\n              <InputLabel>Condition</InputLabel>\r\n              <Select\r\n                value={newSetting.condition}\r\n                onChange={(e) => setNewSetting({...newSetting, condition: e.target.value})}\r\n              >\r\n                {CONDITIONS.map(condition => (\r\n                  <MenuItem key={condition.id} value={condition.id}>\r\n                    {condition.name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} md={6}>\r\n            <TextField\r\n              fullWidth\r\n              label={`Threshold${newSetting.sensor_type ? ` (${getSensorTypeInfo(newSetting.sensor_type).unit})` : ''}`}\r\n              type=\"number\"\r\n              value={newSetting.threshold}\r\n              onChange={(e) => setNewSetting({...newSetting, threshold: e.target.value})}\r\n              InputProps={{\r\n                inputProps: { \r\n                  step: newSetting.sensor_type === 'ph' ? 0.1 : 1\r\n                }\r\n              }}\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} md={6}>\r\n            <FormControl fullWidth>\r\n              <InputLabel>Severity</InputLabel>\r\n              <Select\r\n                value={newSetting.severity}\r\n                onChange={(e) => setNewSetting({...newSetting, severity: e.target.value})}\r\n              >\r\n                {SEVERITY_LEVELS.map(level => (\r\n                  <MenuItem key={level.id} value={level.id}>\r\n                    {level.name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          \r\n          <Grid item xs={12}>\r\n            <Typography variant=\"subtitle1\" gutterBottom>Notification Methods</Typography>\r\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n              {NOTIFICATION_METHODS.map(method => (\r\n                <Chip\r\n                  key={method.id}\r\n                  label={method.name}\r\n                  onClick={() => handleNotificationMethodChange(method.id)}\r\n                  color={newSetting.notification_method.includes(method.id) ? 'primary' : 'default'}\r\n                  variant={newSetting.notification_method.includes(method.id) ? 'filled' : 'outlined'}\r\n                />\r\n              ))}\r\n            </Box>\r\n          </Grid>\r\n          \r\n          <Grid item xs={12}>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={newSetting.is_active}\r\n                  onChange={(e) => setNewSetting({...newSetting, is_active: e.target.checked})}\r\n                />\r\n              }\r\n              label=\"Enable this alert setting\"\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} sx={{ display: 'flex', justifyContent: 'flex-end', gap: 2 }}>\r\n            {formMode === 'edit' && (\r\n              <Button\r\n                variant=\"outlined\"\r\n                onClick={() => {\r\n                  setFormMode('new');\r\n                  setSelectedSetting(null);\r\n                  setNewSetting({\r\n                    sensor_type: '',\r\n                    condition: 'gt',\r\n                    threshold: '',\r\n                    severity: 'medium',\r\n                    notification_method: ['app'],\r\n                    is_active: true\r\n                  });\r\n                }}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            )}\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={formMode === 'new' ? <AddIcon /> : <SaveIcon />}\r\n              onClick={handleAddSetting}\r\n              disabled={saveLoading}\r\n            >\r\n              {saveLoading ? <CircularProgress size={24} /> : (formMode === 'new' ? 'Add Alert Setting' : 'Save Changes')}\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    );\r\n  };\r\n\r\n  // Render personalized thresholds form\r\n  const renderPersonalThresholdsForm = () => {\r\n    return (\r\n      <Paper sx={{ p: 3, mb: 4 }}>\r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n          <Typography variant=\"h6\">\r\n            Personalized Alert Thresholds\r\n          </Typography>\r\n          <Button \r\n            variant={showPersonalForm ? \"outlined\" : \"contained\"}\r\n            color=\"primary\"\r\n            onClick={() => setShowPersonalForm(!showPersonalForm)}\r\n            startIcon={showPersonalForm ? <CloseIcon /> : <PersonAddIcon />}\r\n          >\r\n            {showPersonalForm ? 'Cancel' : 'Customize Thresholds'}\r\n          </Button>\r\n        </Box>\r\n        <Divider sx={{ mb: 3 }} />\r\n        \r\n        {showPersonalForm ? (\r\n          <>\r\n            <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\r\n              Customize alert thresholds based on your preferences. These values will be used when generating alerts specifically for you.\r\n            </Typography>\r\n            \r\n            {SENSOR_TYPES.map(sensorType => (\r\n              <Box key={sensorType.id} sx={{ mb: 4 }}>\r\n                <Typography variant=\"subtitle1\" fontWeight=\"bold\">\r\n                  {sensorType.name} {sensorType.unit ? `(${sensorType.unit})` : ''}\r\n                </Typography>\r\n                \r\n                <Grid container spacing={2} sx={{ mt: 1 }}>\r\n                  <Grid item xs={12} md={6}>\r\n                    <Typography variant=\"body2\" gutterBottom>\r\n                      High Threshold (Alert when above this value)\r\n                    </Typography>\r\n                    <Box sx={{ px: 2 }}>\r\n                      <Slider\r\n                        value={personalThresholds[sensorType.id]?.high || DEFAULT_THRESHOLD_VALUES[sensorType.id].high}\r\n                        onChange={(_, value) => handlePersonalThresholdChange(sensorType.id, 'high', value)}\r\n                        valueLabelDisplay=\"auto\"\r\n                        min={getMinMaxForSensorType(sensorType.id).min}\r\n                        max={getMinMaxForSensorType(sensorType.id).max}\r\n                        step={sensorType.id === 'ph' ? 0.1 : 1}\r\n                        marks={[\r\n                          { value: DEFAULT_THRESHOLD_VALUES[sensorType.id].high, label: 'Default' }\r\n                        ]}\r\n                      />\r\n                    </Box>\r\n                  </Grid>\r\n                  \r\n                  <Grid item xs={12} md={6}>\r\n                    <Typography variant=\"body2\" gutterBottom>\r\n                      Low Threshold (Alert when below this value)\r\n                    </Typography>\r\n                    <Box sx={{ px: 2 }}>\r\n                      <Slider\r\n                        value={personalThresholds[sensorType.id]?.low || DEFAULT_THRESHOLD_VALUES[sensorType.id].low}\r\n                        onChange={(_, value) => handlePersonalThresholdChange(sensorType.id, 'low', value)}\r\n                        valueLabelDisplay=\"auto\"\r\n                        min={getMinMaxForSensorType(sensorType.id).min}\r\n                        max={getMinMaxForSensorType(sensorType.id).max}\r\n                        step={sensorType.id === 'ph' ? 0.1 : 1}\r\n                        marks={[\r\n                          { value: DEFAULT_THRESHOLD_VALUES[sensorType.id].low, label: 'Default' }\r\n                        ]}\r\n                      />\r\n                    </Box>\r\n                  </Grid>\r\n                </Grid>\r\n                <Divider sx={{ mt: 2 }} />\r\n              </Box>\r\n            ))}\r\n            \r\n            <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 3 }}>\r\n              <Button \r\n                variant=\"contained\" \r\n                color=\"primary\" \r\n                onClick={handleSaveUserPreferences}\r\n                startIcon={<SaveIcon />}\r\n                disabled={saveLoading}\r\n              >\r\n                {saveLoading ? <CircularProgress size={24} /> : 'Save Personal Thresholds'}\r\n              </Button>\r\n            </Box>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\r\n              You can customize alert thresholds to match your specific needs. Personalized thresholds will be used when generating alerts for you.\r\n            </Typography>\r\n            \r\n            <Grid container spacing={2}>\r\n              {SENSOR_TYPES.map(sensorType => {\r\n                const personal = personalThresholds[sensorType.id] || {};\r\n                const defaults = DEFAULT_THRESHOLD_VALUES[sensorType.id];\r\n                const hasCustom = personal.high !== defaults.high || personal.low !== defaults.low;\r\n                \r\n                return (\r\n                  <Grid item xs={12} md={6} lg={4} key={sensorType.id}>\r\n                    <Card variant=\"outlined\">\r\n                      <CardContent>\r\n                        <Typography variant=\"subtitle1\">\r\n                          {sensorType.name}\r\n                          {hasCustom && (\r\n                            <Chip\r\n                              size=\"small\"\r\n                              label=\"Customized\"\r\n                              color=\"primary\"\r\n                              sx={{ ml: 1 }}\r\n                            />\r\n                          )}\r\n                        </Typography>\r\n                        <Box sx={{ mt: 1 }}>\r\n                          <Typography variant=\"body2\">\r\n                            High threshold: <strong>{personal.high || defaults.high}{sensorType.unit}</strong>\r\n                          </Typography>\r\n                          <Typography variant=\"body2\">\r\n                            Low threshold: <strong>{personal.low || defaults.low}{sensorType.unit}</strong>\r\n                          </Typography>\r\n                        </Box>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </Grid>\r\n                );\r\n              })}\r\n            </Grid>\r\n          </>\r\n        )}\r\n      </Paper>\r\n    );\r\n  };\r\n\r\n  // Get min and max values for sensor type sliders\r\n  const getMinMaxForSensorType = (sensorType) => {\r\n    switch(sensorType) {\r\n      case 'temperature':\r\n        return { min: -10, max: 50 };\r\n      case 'humidity':\r\n        return { min: 0, max: 100 };\r\n      case 'light':\r\n        return { min: 0, max: 100000 };\r\n      case 'soil_moisture':\r\n        return { min: 0, max: 100 };\r\n      case 'co2':\r\n        return { min: 0, max: 5000 };\r\n      case 'ph':\r\n        return { min: 0, max: 14 };\r\n      case 'water_level':\r\n        return { min: 0, max: 100 };\r\n      default:\r\n        return { min: 0, max: 100 };\r\n    }\r\n  };\r\n\r\n  // Render user preferences\r\n  const renderUserPreferences = () => {\r\n    return (\r\n      <Paper sx={{ p: 3, mb: 4 }}>\r\n        <Typography variant=\"h6\" gutterBottom>User Notification Preferences</Typography>\r\n        <Divider sx={{ mb: 3 }} />\r\n        \r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={6}>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={userPreferences.receive_email_notifications}\r\n                  onChange={(e) => setUserPreferences({\r\n                    ...userPreferences,\r\n                    receive_email_notifications: e.target.checked\r\n                  })}\r\n                />\r\n              }\r\n              label=\"Receive Email Notifications\"\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} md={6}>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={userPreferences.receive_sms_notifications}\r\n                  onChange={(e) => setUserPreferences({\r\n                    ...userPreferences,\r\n                    receive_sms_notifications: e.target.checked\r\n                  })}\r\n                />\r\n              }\r\n              label=\"Receive SMS Notifications\"\r\n            />\r\n          </Grid>\r\n          \r\n          {userPreferences.receive_email_notifications && (\r\n            <Grid item xs={12} md={6}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Email Address\"\r\n                value={userPreferences.email_address || ''}\r\n                onChange={(e) => setUserPreferences({\r\n                  ...userPreferences,\r\n                  email_address: e.target.value\r\n                })}\r\n              />\r\n            </Grid>\r\n          )}\r\n          \r\n          {userPreferences.receive_sms_notifications && (\r\n            <Grid item xs={12} md={6}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Phone Number\"\r\n                value={userPreferences.phone_number || ''}\r\n                onChange={(e) => setUserPreferences({\r\n                  ...userPreferences,\r\n                  phone_number: e.target.value\r\n                })}\r\n              />\r\n            </Grid>\r\n          )}\r\n          \r\n          <Grid item xs={12} md={6}>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={userPreferences.mute_notifications}\r\n                  onChange={(e) => setUserPreferences({\r\n                    ...userPreferences,\r\n                    mute_notifications: e.target.checked\r\n                  })}\r\n                />\r\n              }\r\n              label=\"Mute All Notifications\"\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} md={6}>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={userPreferences.auto_acknowledge_low_severity}\r\n                  onChange={(e) => setUserPreferences({\r\n                    ...userPreferences,\r\n                    auto_acknowledge_low_severity: e.target.checked\r\n                  })}\r\n                />\r\n              }\r\n              label=\"Auto-acknowledge Low Severity Alerts\"\r\n            />\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} sx={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<SaveIcon />}\r\n              onClick={handleSaveUserPreferences}\r\n              disabled={saveLoading}\r\n            >\r\n              {saveLoading ? <CircularProgress size={24} /> : 'Save Preferences'}\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    );\r\n  };\r\n\r\n  // Render alert settings list\r\n  const renderAlertSettingsList = () => {\r\n    if (alertSettings.length === 0) {\r\n      return (\r\n        <Paper sx={{ p: 3, textAlign: 'center' }}>\r\n          <Typography color=\"textSecondary\">No alert settings found. Create your first one!</Typography>\r\n        </Paper>\r\n      );\r\n    }\r\n    \r\n    return (\r\n      <Paper sx={{ p: 3 }}>\r\n        <Typography variant=\"h6\" gutterBottom>System Alert Settings</Typography>\r\n        <Divider sx={{ mb: 3 }} />\r\n        \r\n        <List>\r\n          {alertSettings.map(setting => {\r\n            const sensorInfo = SENSOR_TYPES.find(s => s.id === setting.sensor_type) || { name: 'Unknown', unit: '' };\r\n            const condition = CONDITIONS.find(c => c.id === setting.condition) || { name: 'Unknown' };\r\n            const severity = SEVERITY_LEVELS.find(s => s.id === setting.severity) || { name: 'Unknown', color: 'default' };\r\n            \r\n            return (\r\n              <ListItem key={setting.id} sx={{ borderBottom: '1px solid rgba(0, 0, 0, 0.12)', py: 2 }}>\r\n                <Box sx={{ width: '100%' }}>\r\n                  <Grid container alignItems=\"center\">\r\n                    <Grid item xs={12} sm={4}>\r\n                      <Typography variant=\"subtitle1\">\r\n                        {sensorInfo.name}\r\n                        {!setting.is_active && <Chip label=\"Disabled\" color=\"default\" size=\"small\" sx={{ ml: 1 }} />}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"textSecondary\">\r\n                        {condition.name} {setting.threshold} {sensorInfo.unit}\r\n                      </Typography>\r\n                    </Grid>\r\n                    \r\n                    <Grid item xs={12} sm={3}>\r\n                      <Chip \r\n                        label={severity.name} \r\n                        color={severity.color === 'high' ? 'error' : severity.color === 'medium' ? 'warning' : 'info'} \r\n                        size=\"small\" \r\n                      />\r\n                    </Grid>\r\n                    \r\n                    <Grid item xs={12} sm={3}>\r\n                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n                        {setting.notification_method.map(method => (\r\n                          <Chip \r\n                            key={method} \r\n                            label={NOTIFICATION_METHODS.find(m => m.id === method)?.name || method} \r\n                            size=\"small\"\r\n                            variant=\"outlined\"\r\n                          />\r\n                        ))}\r\n                      </Box>\r\n                    </Grid>\r\n                    \r\n                    <Grid item xs={12} sm={2} sx={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n                      <IconButton onClick={() => handleEditSetting(setting)}>\r\n                        <EditIcon />\r\n                      </IconButton>\r\n                      <IconButton onClick={() => handleDeleteSetting(setting.id)}>\r\n                        <DeleteIcon />\r\n                      </IconButton>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Box>\r\n              </ListItem>\r\n            );\r\n          })}\r\n        </List>\r\n      </Paper>\r\n    );\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box>\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 3 }} onClose={() => setError(null)}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n      \r\n      {success && (\r\n        <Alert severity=\"success\" sx={{ mb: 3 }} onClose={() => setSuccess(null)}>\r\n          {success}\r\n        </Alert>\r\n      )}\r\n      \r\n      {renderPersonalThresholdsForm()}\r\n      \r\n      {renderSettingForm()}\r\n      \r\n      {renderUserPreferences()}\r\n      \r\n      {renderAlertSettingsList()}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AlertSettings; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}