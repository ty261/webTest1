{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LIJIN\\\\Desktop\\\\webTest\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { TOKEN_KEY, USER_KEY } from '../config';\nimport { authAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n// 用于本地存储已注册用户的键\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst REGISTERED_USERS_KEY = 'smart_farm_registered_users';\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState(null);\n  const [useLocalStorage, setUseLocalStorage] = useState(false);\n\n  // Load user state from localStorage\n  useEffect(() => {\n    const token = localStorage.getItem(TOKEN_KEY);\n    const userStr = localStorage.getItem(USER_KEY);\n    if (token && userStr) {\n      setIsAuthenticated(true);\n      try {\n        setUser(JSON.parse(userStr));\n      } catch (e) {\n        console.error('Failed to parse user data', e);\n      }\n    }\n    setIsLoading(false);\n  }, []);\n\n  // Login functionality using API\n  const login = async (email, password) => {\n    try {\n      // 尝试使用API登录\n      const response = await authAPI.login({\n        email,\n        password\n      });\n      const userData = response.data.user;\n      const token = response.data.token;\n      localStorage.setItem(TOKEN_KEY, token);\n      localStorage.setItem(USER_KEY, JSON.stringify(userData));\n      setUser(userData);\n      setIsAuthenticated(true);\n      return userData;\n    } catch (error) {\n      // 如果API登录失败，尝试本地存储的用户\n      if (useLocalStorage) {\n        const registeredUsers = JSON.parse(localStorage.getItem(REGISTERED_USERS_KEY) || '[]');\n        const foundUser = registeredUsers.find(u => u.email === email && u.password === password);\n        if (foundUser) {\n          // 创建一个不包含密码的用户数据\n          const {\n            password,\n            ...userWithoutPassword\n          } = foundUser;\n          const userData = {\n            ...userWithoutPassword,\n            role: 'user'\n          };\n\n          // 创建一个模拟token\n          const token = 'local-storage-token-' + Math.random().toString(36).substring(2);\n          localStorage.setItem(TOKEN_KEY, token);\n          localStorage.setItem(USER_KEY, JSON.stringify(userData));\n          setUser(userData);\n          setIsAuthenticated(true);\n          return userData;\n        }\n      }\n      throw error;\n    }\n  };\n\n  // Registration functionality using API with localStorage fallback\n  const register = async userData => {\n    try {\n      // 尝试使用API注册\n      const response = await authAPI.register(userData);\n\n      // 如果成功设置本地存储\n      if (useLocalStorage) {\n        // 保存到本地注册用户列表\n        const registeredUsers = JSON.parse(localStorage.getItem(REGISTERED_USERS_KEY) || '[]');\n        registeredUsers.push({\n          ...userData,\n          id: Date.now(),\n          // 生成一个唯一ID\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        });\n        localStorage.setItem(REGISTERED_USERS_KEY, JSON.stringify(registeredUsers));\n      }\n      return response.data;\n    } catch (error) {\n      if (error.message && error.message.includes('API request failed')) {\n        console.warn('API registration failed, falling back to localStorage');\n        setUseLocalStorage(true);\n\n        // 检查用户名和邮箱是否已存在\n        const registeredUsers = JSON.parse(localStorage.getItem(REGISTERED_USERS_KEY) || '[]');\n        if (registeredUsers.some(u => u.username === userData.username)) {\n          throw new Error(`Username ${userData.username} is already taken`);\n        }\n        if (registeredUsers.some(u => u.email === userData.email)) {\n          throw new Error(`Email ${userData.email} is already registered`);\n        }\n\n        // 保存到本地存储\n        const newUser = {\n          ...userData,\n          id: Date.now(),\n          // 生成一个唯一ID\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        };\n        registeredUsers.push(newUser);\n        localStorage.setItem(REGISTERED_USERS_KEY, JSON.stringify(registeredUsers));\n\n        // 返回模拟的API响应\n        return {\n          success: true,\n          message: 'User registered successfully (localStorage)',\n          data: newUser\n        };\n      }\n      throw error;\n    }\n  };\n\n  // Logout\n  const logout = () => {\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem(USER_KEY);\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n  const value = {\n    isAuthenticated,\n    isLoading,\n    user,\n    login,\n    logout,\n    register,\n    useLocalStorage,\n    setUseLocalStorage\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"JtlqvYuGlZrDPMPZFGxkCGFq6R0=\");\n_c = AuthProvider;\nexport default AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","TOKEN_KEY","USER_KEY","authAPI","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","REGISTERED_USERS_KEY","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","user","setUser","useLocalStorage","setUseLocalStorage","token","localStorage","getItem","userStr","JSON","parse","e","console","error","login","email","password","response","userData","data","setItem","stringify","registeredUsers","foundUser","find","u","userWithoutPassword","role","Math","random","toString","substring","register","push","id","Date","now","created_at","toISOString","updated_at","message","includes","warn","some","username","Error","newUser","success","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/LIJIN/Desktop/webTest/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { TOKEN_KEY, USER_KEY } from '../config';\r\nimport { authAPI } from '../services/api';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\n// 用于本地存储已注册用户的键\r\nconst REGISTERED_USERS_KEY = 'smart_farm_registered_users';\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [user, setUser] = useState(null);\r\n  const [useLocalStorage, setUseLocalStorage] = useState(false);\r\n\r\n  // Load user state from localStorage\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(TOKEN_KEY);\r\n    const userStr = localStorage.getItem(USER_KEY);\r\n\r\n    if (token && userStr) {\r\n      setIsAuthenticated(true);\r\n      try {\r\n        setUser(JSON.parse(userStr));\r\n      } catch (e) {\r\n        console.error('Failed to parse user data', e);\r\n      }\r\n    }\r\n    \r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  // Login functionality using API\r\n  const login = async (email, password) => {\r\n    try {\r\n      // 尝试使用API登录\r\n      const response = await authAPI.login({ email, password });\r\n      \r\n      const userData = response.data.user;\r\n      const token = response.data.token;\r\n      \r\n      localStorage.setItem(TOKEN_KEY, token);\r\n      localStorage.setItem(USER_KEY, JSON.stringify(userData));\r\n      \r\n      setUser(userData);\r\n      setIsAuthenticated(true);\r\n      return userData;\r\n    } catch (error) {\r\n      // 如果API登录失败，尝试本地存储的用户\r\n      if (useLocalStorage) {\r\n        const registeredUsers = JSON.parse(localStorage.getItem(REGISTERED_USERS_KEY) || '[]');\r\n        const foundUser = registeredUsers.find(u => u.email === email && u.password === password);\r\n        \r\n        if (foundUser) {\r\n          // 创建一个不包含密码的用户数据\r\n          const { password, ...userWithoutPassword } = foundUser;\r\n          const userData = {\r\n            ...userWithoutPassword,\r\n            role: 'user'\r\n          };\r\n          \r\n          // 创建一个模拟token\r\n          const token = 'local-storage-token-' + Math.random().toString(36).substring(2);\r\n          \r\n          localStorage.setItem(TOKEN_KEY, token);\r\n          localStorage.setItem(USER_KEY, JSON.stringify(userData));\r\n          \r\n          setUser(userData);\r\n          setIsAuthenticated(true);\r\n          return userData;\r\n        }\r\n      }\r\n      \r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Registration functionality using API with localStorage fallback\r\n  const register = async (userData) => {\r\n    try {\r\n      // 尝试使用API注册\r\n      const response = await authAPI.register(userData);\r\n      \r\n      // 如果成功设置本地存储\r\n      if (useLocalStorage) {\r\n        // 保存到本地注册用户列表\r\n        const registeredUsers = JSON.parse(localStorage.getItem(REGISTERED_USERS_KEY) || '[]');\r\n        registeredUsers.push({\r\n          ...userData,\r\n          id: Date.now(), // 生成一个唯一ID\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString()\r\n        });\r\n        localStorage.setItem(REGISTERED_USERS_KEY, JSON.stringify(registeredUsers));\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      if (error.message && error.message.includes('API request failed')) {\r\n        console.warn('API registration failed, falling back to localStorage');\r\n        setUseLocalStorage(true);\r\n        \r\n        // 检查用户名和邮箱是否已存在\r\n        const registeredUsers = JSON.parse(localStorage.getItem(REGISTERED_USERS_KEY) || '[]');\r\n        \r\n        if (registeredUsers.some(u => u.username === userData.username)) {\r\n          throw new Error(`Username ${userData.username} is already taken`);\r\n        }\r\n        \r\n        if (registeredUsers.some(u => u.email === userData.email)) {\r\n          throw new Error(`Email ${userData.email} is already registered`);\r\n        }\r\n        \r\n        // 保存到本地存储\r\n        const newUser = {\r\n          ...userData,\r\n          id: Date.now(), // 生成一个唯一ID\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString()\r\n        };\r\n        \r\n        registeredUsers.push(newUser);\r\n        localStorage.setItem(REGISTERED_USERS_KEY, JSON.stringify(registeredUsers));\r\n        \r\n        // 返回模拟的API响应\r\n        return {\r\n          success: true,\r\n          message: 'User registered successfully (localStorage)',\r\n          data: newUser\r\n        };\r\n      }\r\n      \r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Logout\r\n  const logout = () => {\r\n    localStorage.removeItem(TOKEN_KEY);\r\n    localStorage.removeItem(USER_KEY);\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  const value = {\r\n    isAuthenticated,\r\n    isLoading,\r\n    user,\r\n    login,\r\n    logout,\r\n    register,\r\n    useLocalStorage,\r\n    setUseLocalStorage\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\nexport default AuthProvider; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}