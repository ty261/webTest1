{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getStyleString = exports.getStringSize = exports.MEASUREMENT_SPAN_ID = void 0;\nexports.unstable_cleanupDOM = unstable_cleanupDOM;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n// DOM utils taken from\n// https://github.com/recharts/recharts/blob/master/src/util/DOMUtils.ts\n\nfunction isSsr() {\n  return typeof window === 'undefined';\n}\nconst stringCache = {\n  widthCache: {},\n  cacheCount: 0\n};\nconst MAX_CACHE_NUM = 2000;\nconst SPAN_STYLE = {\n  position: 'absolute',\n  top: '-20000px',\n  left: 0,\n  padding: 0,\n  margin: 0,\n  border: 'none',\n  whiteSpace: 'pre'\n};\nconst STYLE_LIST = ['minWidth', 'maxWidth', 'width', 'minHeight', 'maxHeight', 'height', 'top', 'left', 'fontSize', 'padding', 'margin', 'paddingLeft', 'paddingRight', 'paddingTop', 'paddingBottom', 'marginLeft', 'marginRight', 'marginTop', 'marginBottom'];\nconst MEASUREMENT_SPAN_ID = exports.MEASUREMENT_SPAN_ID = 'mui_measurement_span';\n\n/**\n *\n * @param name CSS property name\n * @param value\n * @returns add 'px' for distance properties\n */\nfunction autoCompleteStyle(name, value) {\n  if (STYLE_LIST.indexOf(name) >= 0 && value === +value) {\n    return `${value}px`;\n  }\n  return value;\n}\n\n/**\n *\n * @param text camelcase css property\n * @returns css property\n */\nfunction camelToMiddleLine(text) {\n  const strs = text.split('');\n  const formatStrs = strs.reduce((result, entry) => {\n    if (entry === entry.toUpperCase()) {\n      return [...result, '-', entry.toLowerCase()];\n    }\n    return [...result, entry];\n  }, []);\n  return formatStrs.join('');\n}\n\n/**\n *\n * @param style React style object\n * @returns CSS styling string\n */\nconst getStyleString = style => Object.keys(style).sort().reduce((result, s) => `${result}${camelToMiddleLine(s)}:${autoCompleteStyle(s, style[s])};`, '');\nexports.getStyleString = getStyleString;\nlet domCleanTimeout;\n\n/**\n *\n * @param text The string to estimate\n * @param style The style applied\n * @returns width and height of the text\n */\nconst getStringSize = (text, style = {}) => {\n  if (text === undefined || text === null || isSsr()) {\n    return {\n      width: 0,\n      height: 0\n    };\n  }\n  const str = `${text}`;\n  const styleString = getStyleString(style);\n  const cacheKey = `${str}-${styleString}`;\n  if (stringCache.widthCache[cacheKey]) {\n    return stringCache.widthCache[cacheKey];\n  }\n  try {\n    let measurementSpan = document.getElementById(MEASUREMENT_SPAN_ID);\n    if (measurementSpan === null) {\n      measurementSpan = document.createElement('span');\n      measurementSpan.setAttribute('id', MEASUREMENT_SPAN_ID);\n      measurementSpan.setAttribute('aria-hidden', 'true');\n      document.body.appendChild(measurementSpan);\n    }\n    // Need to use CSS Object Model (CSSOM) to be able to comply with Content Security Policy (CSP)\n    // https://en.wikipedia.org/wiki/Content_Security_Policy\n    const measurementSpanStyle = (0, _extends2.default)({}, SPAN_STYLE, style);\n    Object.keys(measurementSpanStyle).map(styleKey => {\n      measurementSpan.style[camelToMiddleLine(styleKey)] = autoCompleteStyle(styleKey, measurementSpanStyle[styleKey]);\n      return styleKey;\n    });\n    measurementSpan.textContent = str;\n    const rect = measurementSpan.getBoundingClientRect();\n    const result = {\n      width: rect.width,\n      height: rect.height\n    };\n    stringCache.widthCache[cacheKey] = result;\n    if (stringCache.cacheCount + 1 > MAX_CACHE_NUM) {\n      stringCache.cacheCount = 0;\n      stringCache.widthCache = {};\n    } else {\n      stringCache.cacheCount += 1;\n    }\n    if (process.env.NODE_ENV === 'test') {\n      // In test environment, we clean the measurement span immediately\n      measurementSpan.textContent = '';\n    } else {\n      if (domCleanTimeout) {\n        clearTimeout(domCleanTimeout);\n      }\n      domCleanTimeout = setTimeout(() => {\n        // Limit node cleaning to once per render cycle\n        measurementSpan.textContent = '';\n      }, 0);\n    }\n    return result;\n  } catch {\n    return {\n      width: 0,\n      height: 0\n    };\n  }\n};\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexports.getStringSize = getStringSize;\nfunction unstable_cleanupDOM() {\n  // const measurementSpan = document.getElementById(MEASUREMENT_SPAN_ID);\n  // measurementSpan?.remove();\n}","map":{"version":3,"names":["_interopRequireDefault","require","default","Object","defineProperty","exports","value","getStyleString","getStringSize","MEASUREMENT_SPAN_ID","unstable_cleanupDOM","_extends2","isSsr","window","stringCache","widthCache","cacheCount","MAX_CACHE_NUM","SPAN_STYLE","position","top","left","padding","margin","border","whiteSpace","STYLE_LIST","autoCompleteStyle","name","indexOf","camelToMiddleLine","text","strs","split","formatStrs","reduce","result","entry","toUpperCase","toLowerCase","join","style","keys","sort","s","domCleanTimeout","undefined","width","height","str","styleString","cacheKey","measurementSpan","document","getElementById","createElement","setAttribute","body","appendChild","measurementSpanStyle","map","styleKey","textContent","rect","getBoundingClientRect","process","env","NODE_ENV","clearTimeout","setTimeout"],"sources":["C:/Users/LIJIN/Desktop/webTest/Bak/webTest/frontend/node_modules/@mui/x-charts/internals/domUtils.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getStyleString = exports.getStringSize = exports.MEASUREMENT_SPAN_ID = void 0;\nexports.unstable_cleanupDOM = unstable_cleanupDOM;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n// DOM utils taken from\n// https://github.com/recharts/recharts/blob/master/src/util/DOMUtils.ts\n\nfunction isSsr() {\n  return typeof window === 'undefined';\n}\nconst stringCache = {\n  widthCache: {},\n  cacheCount: 0\n};\nconst MAX_CACHE_NUM = 2000;\nconst SPAN_STYLE = {\n  position: 'absolute',\n  top: '-20000px',\n  left: 0,\n  padding: 0,\n  margin: 0,\n  border: 'none',\n  whiteSpace: 'pre'\n};\nconst STYLE_LIST = ['minWidth', 'maxWidth', 'width', 'minHeight', 'maxHeight', 'height', 'top', 'left', 'fontSize', 'padding', 'margin', 'paddingLeft', 'paddingRight', 'paddingTop', 'paddingBottom', 'marginLeft', 'marginRight', 'marginTop', 'marginBottom'];\nconst MEASUREMENT_SPAN_ID = exports.MEASUREMENT_SPAN_ID = 'mui_measurement_span';\n\n/**\n *\n * @param name CSS property name\n * @param value\n * @returns add 'px' for distance properties\n */\nfunction autoCompleteStyle(name, value) {\n  if (STYLE_LIST.indexOf(name) >= 0 && value === +value) {\n    return `${value}px`;\n  }\n  return value;\n}\n\n/**\n *\n * @param text camelcase css property\n * @returns css property\n */\nfunction camelToMiddleLine(text) {\n  const strs = text.split('');\n  const formatStrs = strs.reduce((result, entry) => {\n    if (entry === entry.toUpperCase()) {\n      return [...result, '-', entry.toLowerCase()];\n    }\n    return [...result, entry];\n  }, []);\n  return formatStrs.join('');\n}\n\n/**\n *\n * @param style React style object\n * @returns CSS styling string\n */\nconst getStyleString = style => Object.keys(style).sort().reduce((result, s) => `${result}${camelToMiddleLine(s)}:${autoCompleteStyle(s, style[s])};`, '');\nexports.getStyleString = getStyleString;\nlet domCleanTimeout;\n\n/**\n *\n * @param text The string to estimate\n * @param style The style applied\n * @returns width and height of the text\n */\nconst getStringSize = (text, style = {}) => {\n  if (text === undefined || text === null || isSsr()) {\n    return {\n      width: 0,\n      height: 0\n    };\n  }\n  const str = `${text}`;\n  const styleString = getStyleString(style);\n  const cacheKey = `${str}-${styleString}`;\n  if (stringCache.widthCache[cacheKey]) {\n    return stringCache.widthCache[cacheKey];\n  }\n  try {\n    let measurementSpan = document.getElementById(MEASUREMENT_SPAN_ID);\n    if (measurementSpan === null) {\n      measurementSpan = document.createElement('span');\n      measurementSpan.setAttribute('id', MEASUREMENT_SPAN_ID);\n      measurementSpan.setAttribute('aria-hidden', 'true');\n      document.body.appendChild(measurementSpan);\n    }\n    // Need to use CSS Object Model (CSSOM) to be able to comply with Content Security Policy (CSP)\n    // https://en.wikipedia.org/wiki/Content_Security_Policy\n    const measurementSpanStyle = (0, _extends2.default)({}, SPAN_STYLE, style);\n    Object.keys(measurementSpanStyle).map(styleKey => {\n      measurementSpan.style[camelToMiddleLine(styleKey)] = autoCompleteStyle(styleKey, measurementSpanStyle[styleKey]);\n      return styleKey;\n    });\n    measurementSpan.textContent = str;\n    const rect = measurementSpan.getBoundingClientRect();\n    const result = {\n      width: rect.width,\n      height: rect.height\n    };\n    stringCache.widthCache[cacheKey] = result;\n    if (stringCache.cacheCount + 1 > MAX_CACHE_NUM) {\n      stringCache.cacheCount = 0;\n      stringCache.widthCache = {};\n    } else {\n      stringCache.cacheCount += 1;\n    }\n    if (process.env.NODE_ENV === 'test') {\n      // In test environment, we clean the measurement span immediately\n      measurementSpan.textContent = '';\n    } else {\n      if (domCleanTimeout) {\n        clearTimeout(domCleanTimeout);\n      }\n      domCleanTimeout = setTimeout(() => {\n        // Limit node cleaning to once per render cycle\n        measurementSpan.textContent = '';\n      }, 0);\n    }\n    return result;\n  } catch {\n    return {\n      width: 0,\n      height: 0\n    };\n  }\n};\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexports.getStringSize = getStringSize;\nfunction unstable_cleanupDOM() {\n  // const measurementSpan = document.getElementById(MEASUREMENT_SPAN_ID);\n  // measurementSpan?.remove();\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}