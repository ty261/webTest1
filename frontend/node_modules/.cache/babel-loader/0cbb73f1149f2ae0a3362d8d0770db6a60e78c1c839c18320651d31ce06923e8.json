{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LIJIN\\\\Desktop\\\\webTest\\\\frontend\\\\src\\\\pages\\\\Analytics.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Container, Typography, Paper, Grid, FormControl, InputLabel, Select, MenuItem, Button, Tabs, Tab, CircularProgress, Alert, Card, CardContent, Divider, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Chip } from '@mui/material';\nimport { LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell, AreaChart, Area } from 'recharts';\nimport { Thermostat as TemperatureIcon, Opacity as HumidityIcon, WbSunny as LightIcon, Terrain as SoilIcon, Power as PowerIcon, Speed as SpeedIcon, DateRange as DateRangeIcon, Timeline as TimelineIcon, PieChart as PieChartIcon, TableChart as TableChartIcon } from '@mui/icons-material';\nimport { format } from 'date-fns';\nimport { dashboardAPI } from '../services/api';\n\n// Sensor types and icons\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SENSOR_TYPES = [{\n  id: 'temperature',\n  name: 'Temperature',\n  icon: /*#__PURE__*/_jsxDEV(TemperatureIcon, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 51\n  }, this),\n  color: '#f44336'\n}, {\n  id: 'humidity',\n  name: 'Humidity',\n  icon: /*#__PURE__*/_jsxDEV(HumidityIcon, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 45\n  }, this),\n  color: '#2196f3'\n}, {\n  id: 'light',\n  name: 'Light',\n  icon: /*#__PURE__*/_jsxDEV(LightIcon, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 39\n  }, this),\n  color: '#ff9800'\n}, {\n  id: 'soil_moisture',\n  name: 'Soil Moisture',\n  icon: /*#__PURE__*/_jsxDEV(SoilIcon, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 55\n  }, this),\n  color: '#4caf50'\n}, {\n  id: 'co2',\n  name: 'CO2',\n  icon: /*#__PURE__*/_jsxDEV(SpeedIcon, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 35\n  }, this),\n  color: '#9c27b0'\n}, {\n  id: 'ph',\n  name: 'pH Value',\n  icon: /*#__PURE__*/_jsxDEV(SpeedIcon, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 39\n  }, this),\n  color: '#795548'\n}, {\n  id: 'water_level',\n  name: 'Water Level',\n  icon: /*#__PURE__*/_jsxDEV(HumidityIcon, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 51\n  }, this),\n  color: '#00bcd4'\n}];\n\n// Actuator types\nconst ACTUATOR_TYPES = [{\n  id: 'irrigation',\n  name: 'Irrigation System',\n  color: '#2196f3'\n}, {\n  id: 'fan',\n  name: 'Fan',\n  color: '#00bcd4'\n}, {\n  id: 'ventilation',\n  name: 'Ventilation System',\n  color: '#80deea'\n}, {\n  id: 'lighting',\n  name: 'Lighting System',\n  color: '#ff9800'\n}, {\n  id: 'heating',\n  name: 'Heating System',\n  color: '#f44336'\n}, {\n  id: 'cooling',\n  name: 'Cooling System',\n  color: '#64b5f6'\n}, {\n  id: 'curtain',\n  name: 'Curtain System',\n  color: '#ffb74d'\n}, {\n  id: 'humidifier',\n  name: 'Humidifier',\n  color: '#4db6ac'\n}, {\n  id: 'pump',\n  name: 'Water Pump',\n  color: '#4fc3f7'\n}];\n\n// Tab panel component\nconst TabPanel = props => {\n  const {\n    children,\n    value,\n    index,\n    ...other\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    role: \"tabpanel\",\n    hidden: value !== index,\n    id: `analytics-tabpanel-${index}`,\n    \"aria-labelledby\": `analytics-tab-${index}`,\n    ...other,\n    children: value === index && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        pt: 2\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n// Chart panel component\n_c = TabPanel;\nconst ChartPanel = ({\n  children,\n  title,\n  sx = {}\n}) => {\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    elevation: 0,\n    sx: {\n      p: 2,\n      bgcolor: 'background.default',\n      ...sx\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n\n// Mock sensor data generation\n_c2 = ChartPanel;\nconst generateSensorData = (sensorType, timeRange) => {\n  const data = [];\n  const now = new Date();\n  let startDate, endDate, dataPoints, interval;\n\n  // Set parameters based on time period\n  if (timeRange === '24h') {\n    startDate = new Date(Date.now() - 24 * 60 * 60 * 1000);\n    endDate = new Date();\n    dataPoints = 24;\n    interval = 60 * 60 * 1000; // 1 hour\n  } else if (timeRange === '7d') {\n    startDate = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n    endDate = new Date();\n    dataPoints = 7;\n    interval = 24 * 60 * 60 * 1000; // 1 day\n  } else if (timeRange === '30d') {\n    startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n    endDate = new Date();\n    dataPoints = 30;\n    interval = 24 * 60 * 60 * 1000; // 1 day\n  } else {\n    // Default to 24h\n    startDate = new Date(Date.now() - 24 * 60 * 60 * 1000);\n    endDate = new Date();\n    dataPoints = 24;\n    interval = 60 * 60 * 1000;\n  }\n\n  // Set generation rules based on sensor type\n  let min, max, unit;\n  switch (sensorType) {\n    case 'temperature':\n      min = 18;\n      max = 32;\n      unit = 'Â°C';\n      break;\n    case 'humidity':\n      min = 40;\n      max = 90;\n      unit = '%';\n      break;\n    case 'light':\n      min = 0;\n      max = 65000;\n      unit = 'lux';\n      break;\n    case 'soil_moisture':\n      min = 20;\n      max = 80;\n      unit = '%';\n      break;\n    case 'co2':\n      min = 350;\n      max = 1500;\n      unit = 'ppm';\n      break;\n    case 'ph':\n      min = 5.5;\n      max = 7.5;\n      unit = 'pH';\n      break;\n    case 'water_level':\n      min = 20;\n      max = 100;\n      unit = '%';\n      break;\n    default:\n      min = 0;\n      max = 100;\n      unit = '';\n  }\n\n  // Generate data points\n  for (let i = 0; i < dataPoints; i++) {\n    const timestamp = new Date(startDate.getTime() + i * interval);\n    const value = parseFloat((Math.random() * (max - min) + min).toFixed(1));\n    data.push({\n      timestamp: timestamp.toISOString(),\n      value,\n      unit\n    });\n  }\n\n  // Generate statistics\n  const values = data.map(d => d.value);\n  const stats = {\n    min: Math.min(...values),\n    max: Math.max(...values),\n    avg: parseFloat((values.reduce((a, b) => a + b, 0) / values.length).toFixed(2)),\n    unit\n  };\n  return {\n    data,\n    stats\n  };\n};\n\n// Mock actuator data generation\nconst generateActuatorData = (actuatorType, timeRange) => {\n  const data = [];\n  const now = new Date();\n  let startDate, endDate, dataPoints, interval;\n\n  // Set parameters based on time period\n  if (timeRange === '24h') {\n    startDate = new Date(Date.now() - 24 * 60 * 60 * 1000);\n    endDate = new Date();\n    dataPoints = 24;\n    interval = 60 * 60 * 1000; // 1 hour\n  } else if (timeRange === '7d') {\n    startDate = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n    endDate = new Date();\n    dataPoints = 7;\n    interval = 24 * 60 * 60 * 1000; // 1 day\n  } else if (timeRange === '30d') {\n    startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n    endDate = new Date();\n    dataPoints = 30;\n    interval = 24 * 60 * 60 * 1000; // 1 day\n  } else {\n    // Default to 24h\n    startDate = new Date(Date.now() - 24 * 60 * 60 * 1000);\n    endDate = new Date();\n    dataPoints = 24;\n    interval = 60 * 60 * 1000;\n  }\n\n  // Possible actuator statuses\n  const statuses = ['on', 'off'];\n\n  // Generate runtime data\n  let totalOnTime = 0;\n  let totalOffTime = 0;\n\n  // Generate data points\n  for (let i = 0; i < dataPoints; i++) {\n    const status = Math.random() > 0.7 ? 'off' : 'on'; // Simulate 70% on-time\n    if (status === 'on') {\n      totalOnTime += interval / (60 * 60 * 1000); // Convert to hours\n    } else {\n      totalOffTime += interval / (60 * 60 * 1000); // Convert to hours\n    }\n    const timestamp = new Date(startDate.getTime() + i * interval);\n    data.push({\n      timestamp: timestamp.toISOString(),\n      status,\n      runtime: status === 'on' ? interval / (60 * 60 * 1000) : 0 // Runtime in hours\n    });\n  }\n\n  // Generate statistics\n  const stats = {\n    totalOn: totalOnTime.toFixed(1),\n    totalOff: totalOffTime.toFixed(1),\n    pieData: [{\n      name: 'On',\n      value: totalOnTime,\n      color: '#4caf50'\n    }, {\n      name: 'Off',\n      value: totalOffTime,\n      color: '#f44336'\n    }]\n  };\n  return {\n    data: data.reverse(),\n    stats\n  };\n};\nconst Analytics = () => {\n  _s();\n  // State management\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [dataType, setDataType] = useState('sensor'); // 'sensor' or 'actuator'\n  const [sensorType, setSensorType] = useState('temperature');\n  const [actuatorType, setActuatorType] = useState('irrigation');\n  const [timeRange, setTimeRange] = useState('24h');\n  const [chartData, setChartData] = useState({});\n  const [tabValue, setTabValue] = useState(0);\n\n  // Load data\n  const loadData = async () => {\n    setLoading(true);\n    try {\n      if (dataType === 'sensor') {\n        // Simulate API fetch for sensor data\n        // In a real project, use an actual API call:\n        // const response = await analyticsAPI.getSensorData(sensorType, timeRange);\n\n        // Use mock data\n        const data = generateSensorData(sensorType, timeRange);\n        setChartData(data);\n      } else {\n        // Simulate API fetch for actuator data\n        // In a real project, use an actual API call:\n        // const response = await analyticsAPI.getActuatorData(actuatorType, timeRange);\n\n        // Use mock data\n        const data = generateActuatorData(actuatorType, timeRange);\n        setChartData(data);\n      }\n    } catch (err) {\n      console.error('Failed to get analytics data:', err);\n      setError('Failed to get data, please try again later');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load initial data\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  // Reload data when filters change\n  useEffect(() => {\n    loadData();\n  }, [dataType, sensorType, actuatorType, timeRange]);\n\n  // Handle chart type tab change\n  const handleTabChange = (event, newValue) => {\n    setTabValue(newValue);\n  };\n\n  // Format date display\n  const formatDate = dateStr => {\n    const date = new Date(dateStr);\n    return date.toLocaleString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  // Render sensor data chart\n  const renderSensorChart = () => {\n    if (!chartData.data || chartData.data.length === 0) return null;\n    const sensorInfo = SENSOR_TYPES.find(s => s.id === sensorType) || {};\n    const data = chartData.data;\n    const stats = chartData.stats;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          borderBottom: 1,\n          borderColor: 'divider',\n          mb: 2\n        },\n        children: /*#__PURE__*/_jsxDEV(Tabs, {\n          value: tabValue,\n          onChange: handleTabChange,\n          \"aria-label\": \"Chart type\",\n          children: [/*#__PURE__*/_jsxDEV(Tab, {\n            icon: /*#__PURE__*/_jsxDEV(TimelineIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 24\n            }, this),\n            label: \"Line Chart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tab, {\n            icon: /*#__PURE__*/_jsxDEV(TableChartIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 24\n            }, this),\n            label: \"Data Table\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n        value: tabValue,\n        index: 0,\n        children: /*#__PURE__*/_jsxDEV(ChartPanel, {\n          title: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: [sensorInfo.name || sensorType, \" Trend (\", stats.unit, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 15\n          }, this),\n          children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n            width: \"100%\",\n            height: 300,\n            children: /*#__PURE__*/_jsxDEV(LineChart, {\n              data: data,\n              children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n                strokeDasharray: \"3 3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 377,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n                dataKey: \"timestamp\",\n                tickFormatter: tick => format(new Date(tick), 'HH:mm MM/dd')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 378,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 382,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                formatter: value => [`${value} ${stats.unit}`, 'Value'],\n                labelFormatter: label => `Time: ${label}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 383,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 387,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Line, {\n                type: \"monotone\",\n                dataKey: \"value\",\n                stroke: sensorInfo.color || '#8884d8',\n                activeDot: {\n                  r: 8\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 388,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n        value: tabValue,\n        index: 1,\n        children: /*#__PURE__*/_jsxDEV(TableContainer, {\n          component: Paper,\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            sx: {\n              minWidth: 650\n            },\n            \"aria-label\": \"sensor data table\",\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Time\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 404,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: [\"Value (\", stats.unit, \")\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 405,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 403,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: data.map((row, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  component: \"th\",\n                  scope: \"row\",\n                  children: formatDate(row.timestamp)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 411,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: row.value\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 414,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 410,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n\n  // Render actuator data chart\n  const renderActuatorChart = () => {\n    if (!chartData.data || chartData.data.length === 0) return null;\n    const actuatorInfo = ACTUATOR_TYPES.find(a => a.id === actuatorType) || {};\n    const data = chartData.data;\n    const stats = chartData.stats;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          borderBottom: 1,\n          borderColor: 'divider',\n          mb: 2\n        },\n        children: /*#__PURE__*/_jsxDEV(Tabs, {\n          value: tabValue,\n          onChange: handleTabChange,\n          \"aria-label\": \"Chart type\",\n          children: [/*#__PURE__*/_jsxDEV(Tab, {\n            icon: /*#__PURE__*/_jsxDEV(TimelineIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 437,\n              columnNumber: 24\n            }, this),\n            label: \"Runtime\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tab, {\n            icon: /*#__PURE__*/_jsxDEV(PieChartIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 24\n            }, this),\n            label: \"Runtime Ratio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tab, {\n            icon: /*#__PURE__*/_jsxDEV(TableChartIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 439,\n              columnNumber: 24\n            }, this),\n            label: \"Data Table\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n        value: tabValue,\n        index: 0,\n        children: /*#__PURE__*/_jsxDEV(ChartPanel, {\n          title: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: [actuatorInfo.name || actuatorType, \" Runtime (hours)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 15\n          }, this),\n          children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n            width: \"100%\",\n            height: 300,\n            children: /*#__PURE__*/_jsxDEV(AreaChart, {\n              data: data,\n              children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n                strokeDasharray: \"3 3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 453,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n                dataKey: \"timestamp\",\n                tickFormatter: tick => format(new Date(tick), 'HH:mm MM/dd')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 454,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 455,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                formatter: value => [`${value} hours`, 'Runtime'],\n                labelFormatter: label => `Time: ${label}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 456,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 460,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Area, {\n                type: \"monotone\",\n                dataKey: \"runtime\",\n                name: \"Runtime\",\n                stroke: actuatorInfo.color || '#8884d8',\n                fill: actuatorInfo.color || '#8884d8'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 461,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n        value: tabValue,\n        index: 1,\n        children: /*#__PURE__*/_jsxDEV(ChartPanel, {\n          title: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: [actuatorInfo.name || actuatorType, \" Runtime Ratio\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 15\n          }, this),\n          children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n            width: \"100%\",\n            height: 300,\n            children: /*#__PURE__*/_jsxDEV(PieChart, {\n              children: [/*#__PURE__*/_jsxDEV(Pie, {\n                data: stats.pieData,\n                cx: \"50%\",\n                cy: \"50%\",\n                labelLine: false,\n                outerRadius: 80,\n                fill: \"#8884d8\",\n                dataKey: \"value\",\n                nameKey: \"name\",\n                label: ({\n                  name,\n                  percent\n                }) => `${name}: ${(percent * 100).toFixed(0)}%`,\n                children: stats.pieData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n                  fill: entry.color\n                }, `cell-${index}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 495,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 483,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                formatter: value => [`${value.toFixed(1)} hours`, 'Time']\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 498,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 499,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n        value: tabValue,\n        index: 2,\n        children: /*#__PURE__*/_jsxDEV(TableContainer, {\n          component: Paper,\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            sx: {\n              minWidth: 650\n            },\n            \"aria-label\": \"actuator data table\",\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Time\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 510,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 511,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Runtime (hours)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 512,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 509,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 508,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: data.map((row, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  component: \"th\",\n                  scope: \"row\",\n                  children: formatDate(row.timestamp)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 518,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: /*#__PURE__*/_jsxDEV(Chip, {\n                    label: row.status === 'on' ? 'On' : row.status === 'off' ? 'Off' : 'Error',\n                    color: row.status === 'on' ? 'success' : row.status === 'off' ? 'default' : 'error',\n                    size: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 522,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 521,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: row.runtime\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 528,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 517,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 515,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n\n  // Render stat cards\n  const renderStatCards = () => {\n    if (!chartData.stats) return null;\n    const stats = chartData.stats;\n    if (dataType === 'sensor') {\n      return /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 4,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: /*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                color: \"text.secondary\",\n                gutterBottom: true,\n                children: \"Minimum Value\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 551,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h4\",\n                component: \"div\",\n                children: [stats.min, \" \", stats.unit]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 554,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 550,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 549,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 4,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: /*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                color: \"text.secondary\",\n                gutterBottom: true,\n                children: \"Maximum Value\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 563,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h4\",\n                component: \"div\",\n                children: [stats.max, \" \", stats.unit]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 566,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 562,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 561,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 4,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: /*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                color: \"text.secondary\",\n                gutterBottom: true,\n                children: \"Average Value\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 575,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h4\",\n                component: \"div\",\n                children: [stats.avg, \" \", stats.unit]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 578,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 574,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 573,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 9\n      }, this);\n    } else {\n      const runStats = chartData.stats;\n      return /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: /*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                color: \"text.secondary\",\n                gutterBottom: true,\n                children: \"Total Runtime\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 594,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h4\",\n                component: \"div\",\n                children: [runStats.totalOn, \" hours\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 597,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 593,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 592,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: /*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                color: \"text.secondary\",\n                gutterBottom: true,\n                children: \"Runtime Ratio\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 606,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h4\",\n                component: \"div\",\n                children: [(runStats.totalOn / (parseFloat(runStats.totalOn) + parseFloat(runStats.totalOff)) * 100).toFixed(1), \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 609,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 605,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 604,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"lg\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 4,\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        component: \"h1\",\n        gutterBottom: true,\n        children: \"Data Analysis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 623,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        children: \"View historical data and trend analysis for sensors and actuators\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 622,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 3,\n        mb: 4\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 3,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"Data Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 636,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: dataType,\n              label: \"Data Type\",\n              onChange: e => setDataType(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"sensor\",\n                children: \"Sensor Data\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 642,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"actuator\",\n                children: \"Actuator Data\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 643,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 637,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 635,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 634,\n          columnNumber: 11\n        }, this), dataType === 'sensor' ? /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 3,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"Sensor Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 651,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: sensorType,\n              label: \"Sensor Type\",\n              onChange: e => setSensorType(e.target.value),\n              children: SENSOR_TYPES.map(type => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: type.id,\n                children: /*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    display: 'flex',\n                    alignItems: 'center'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(Box, {\n                    sx: {\n                      mr: 1,\n                      color: type.color\n                    },\n                    children: type.icon\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 660,\n                    columnNumber: 25\n                  }, this), type.name]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 659,\n                  columnNumber: 23\n                }, this)\n              }, type.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 658,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 652,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 650,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 649,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 3,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"Actuator Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 671,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: actuatorType,\n              label: \"Actuator Type\",\n              onChange: e => setActuatorType(e.target.value),\n              children: ACTUATOR_TYPES.map(type => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: type.id,\n                children: type.name\n              }, type.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 678,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 672,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 670,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 669,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 3,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"Time Range\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 689,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: timeRange,\n              label: \"Time Range\",\n              onChange: e => setTimeRange(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"24h\",\n                children: \"Last 24 hours\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 695,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"7d\",\n                children: \"Last 7 days\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 696,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"30d\",\n                children: \"Last 30 days\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 697,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 690,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 688,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 687,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 3,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            fullWidth: true,\n            onClick: loadData,\n            startIcon: /*#__PURE__*/_jsxDEV(DateRangeIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 707,\n              columnNumber: 26\n            }, this),\n            children: \"Apply Filters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 703,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 702,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 632,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 3\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 717,\n      columnNumber: 9\n    }, this), loading && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center',\n        my: 5\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 725,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 724,\n      columnNumber: 9\n    }, this), !loading && !error && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 4\n      },\n      children: renderStatCards()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 731,\n      columnNumber: 9\n    }, this), !loading && !error && /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 3\n      },\n      children: dataType === 'sensor' ? renderSensorChart() : renderActuatorChart()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 738,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 621,\n    columnNumber: 5\n  }, this);\n};\n_s(Analytics, \"yaxDMOw6z0WS/Y5bxiej7zKgYKc=\");\n_c3 = Analytics;\nexport default Analytics;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"TabPanel\");\n$RefreshReg$(_c2, \"ChartPanel\");\n$RefreshReg$(_c3, \"Analytics\");","map":{"version":3,"names":["React","useState","useEffect","Box","Container","Typography","Paper","Grid","FormControl","InputLabel","Select","MenuItem","Button","Tabs","Tab","CircularProgress","Alert","Card","CardContent","Divider","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Chip","LineChart","Line","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","PieChart","Pie","Cell","AreaChart","Area","Thermostat","TemperatureIcon","Opacity","HumidityIcon","WbSunny","LightIcon","Terrain","SoilIcon","Power","PowerIcon","Speed","SpeedIcon","DateRange","DateRangeIcon","Timeline","TimelineIcon","PieChartIcon","TableChart","TableChartIcon","format","dashboardAPI","jsxDEV","_jsxDEV","Fragment","_Fragment","SENSOR_TYPES","id","name","icon","fileName","_jsxFileName","lineNumber","columnNumber","color","ACTUATOR_TYPES","TabPanel","props","children","value","index","other","role","hidden","sx","pt","_c","ChartPanel","title","elevation","p","bgcolor","variant","gutterBottom","_c2","generateSensorData","sensorType","timeRange","data","now","Date","startDate","endDate","dataPoints","interval","min","max","unit","i","timestamp","getTime","parseFloat","Math","random","toFixed","push","toISOString","values","map","d","stats","avg","reduce","a","b","length","generateActuatorData","actuatorType","statuses","totalOnTime","totalOffTime","status","runtime","totalOn","totalOff","pieData","reverse","Analytics","_s","loading","setLoading","error","setError","dataType","setDataType","setSensorType","setActuatorType","setTimeRange","chartData","setChartData","tabValue","setTabValue","loadData","err","console","handleTabChange","event","newValue","formatDate","dateStr","date","toLocaleString","month","day","hour","minute","renderSensorChart","sensorInfo","find","s","borderBottom","borderColor","mb","onChange","label","width","height","strokeDasharray","dataKey","tickFormatter","tick","formatter","labelFormatter","type","stroke","activeDot","r","component","minWidth","align","row","scope","renderActuatorChart","actuatorInfo","fill","cx","cy","labelLine","outerRadius","nameKey","percent","entry","size","renderStatCards","container","spacing","item","xs","sm","runStats","maxWidth","mt","alignItems","md","fullWidth","e","target","display","mr","onClick","startIcon","severity","justifyContent","my","_c3","$RefreshReg$"],"sources":["C:/Users/LIJIN/Desktop/webTest/frontend/src/pages/Analytics.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Box, \r\n  Container, \r\n  Typography, \r\n  Paper, \r\n  Grid, \r\n  FormControl, \r\n  InputLabel, \r\n  Select, \r\n  MenuItem, \r\n  Button, \r\n  Tabs, \r\n  Tab, \r\n  CircularProgress, \r\n  Alert, \r\n  Card, \r\n  CardContent, \r\n  Divider,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Chip\r\n} from '@mui/material';\r\nimport { \r\n  LineChart, \r\n  Line, \r\n  BarChart, \r\n  Bar,\r\n  XAxis, \r\n  YAxis, \r\n  CartesianGrid, \r\n  Tooltip, \r\n  Legend, \r\n  ResponsiveContainer,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  AreaChart,\r\n  Area\r\n} from 'recharts';\r\nimport {\r\n  Thermostat as TemperatureIcon,\r\n  Opacity as HumidityIcon,\r\n  WbSunny as LightIcon,\r\n  Terrain as SoilIcon,\r\n  Power as PowerIcon,\r\n  Speed as SpeedIcon,\r\n  DateRange as DateRangeIcon,\r\n  Timeline as TimelineIcon,\r\n  PieChart as PieChartIcon,\r\n  TableChart as TableChartIcon\r\n} from '@mui/icons-material';\r\nimport { format } from 'date-fns';\r\nimport { dashboardAPI } from '../services/api';\r\n\r\n// Sensor types and icons\r\nconst SENSOR_TYPES = [\r\n  { id: 'temperature', name: 'Temperature', icon: <TemperatureIcon />, color: '#f44336' },\r\n  { id: 'humidity', name: 'Humidity', icon: <HumidityIcon />, color: '#2196f3' },\r\n  { id: 'light', name: 'Light', icon: <LightIcon />, color: '#ff9800' },\r\n  { id: 'soil_moisture', name: 'Soil Moisture', icon: <SoilIcon />, color: '#4caf50' },\r\n  { id: 'co2', name: 'CO2', icon: <SpeedIcon />, color: '#9c27b0' },\r\n  { id: 'ph', name: 'pH Value', icon: <SpeedIcon />, color: '#795548' },\r\n  { id: 'water_level', name: 'Water Level', icon: <HumidityIcon />, color: '#00bcd4' }\r\n];\r\n\r\n// Actuator types\r\nconst ACTUATOR_TYPES = [\r\n  { id: 'irrigation', name: 'Irrigation System', color: '#2196f3' },\r\n  { id: 'fan', name: 'Fan', color: '#00bcd4' },\r\n  { id: 'ventilation', name: 'Ventilation System', color: '#80deea' },\r\n  { id: 'lighting', name: 'Lighting System', color: '#ff9800' },\r\n  { id: 'heating', name: 'Heating System', color: '#f44336' },\r\n  { id: 'cooling', name: 'Cooling System', color: '#64b5f6' },\r\n  { id: 'curtain', name: 'Curtain System', color: '#ffb74d' },\r\n  { id: 'humidifier', name: 'Humidifier', color: '#4db6ac' },\r\n  { id: 'pump', name: 'Water Pump', color: '#4fc3f7' }\r\n];\r\n\r\n// Tab panel component\r\nconst TabPanel = (props) => {\r\n  const { children, value, index, ...other } = props;\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`analytics-tabpanel-${index}`}\r\n      aria-labelledby={`analytics-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box sx={{ pt: 2 }}>\r\n          {children}\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Chart panel component\r\nconst ChartPanel = ({ children, title, sx = {} }) => {\r\n  return (\r\n    <Paper elevation={0} sx={{ p: 2, bgcolor: 'background.default', ...sx }}>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        {title}\r\n      </Typography>\r\n      {children}\r\n    </Paper>\r\n  );\r\n};\r\n\r\n// Mock sensor data generation\r\nconst generateSensorData = (sensorType, timeRange) => {\r\n  const data = [];\r\n  const now = new Date();\r\n  let startDate, endDate, dataPoints, interval;\r\n\r\n  // Set parameters based on time period\r\n  if (timeRange === '24h') {\r\n    startDate = new Date(Date.now() - 24 * 60 * 60 * 1000);\r\n    endDate = new Date();\r\n    dataPoints = 24;\r\n    interval = 60 * 60 * 1000; // 1 hour\r\n  } else if (timeRange === '7d') {\r\n    startDate = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\r\n    endDate = new Date();\r\n    dataPoints = 7;\r\n    interval = 24 * 60 * 60 * 1000; // 1 day\r\n  } else if (timeRange === '30d') {\r\n    startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\r\n    endDate = new Date();\r\n    dataPoints = 30;\r\n    interval = 24 * 60 * 60 * 1000; // 1 day\r\n  } else {\r\n    // Default to 24h\r\n    startDate = new Date(Date.now() - 24 * 60 * 60 * 1000);\r\n    endDate = new Date();\r\n    dataPoints = 24;\r\n    interval = 60 * 60 * 1000;\r\n  }\r\n\r\n  // Set generation rules based on sensor type\r\n  let min, max, unit;\r\n  switch(sensorType) {\r\n    case 'temperature':\r\n      min = 18;\r\n      max = 32;\r\n      unit = 'Â°C';\r\n      break;\r\n    case 'humidity':\r\n      min = 40;\r\n      max = 90;\r\n      unit = '%';\r\n      break;\r\n    case 'light':\r\n      min = 0;\r\n      max = 65000;\r\n      unit = 'lux';\r\n      break;\r\n    case 'soil_moisture':\r\n      min = 20;\r\n      max = 80;\r\n      unit = '%';\r\n      break;\r\n    case 'co2':\r\n      min = 350;\r\n      max = 1500;\r\n      unit = 'ppm';\r\n      break;\r\n    case 'ph':\r\n      min = 5.5;\r\n      max = 7.5;\r\n      unit = 'pH';\r\n      break;\r\n    case 'water_level':\r\n      min = 20;\r\n      max = 100;\r\n      unit = '%';\r\n      break;\r\n    default:\r\n      min = 0;\r\n      max = 100;\r\n      unit = '';\r\n  }\r\n\r\n  // Generate data points\r\n  for (let i = 0; i < dataPoints; i++) {\r\n    const timestamp = new Date(startDate.getTime() + i * interval);\r\n    const value = parseFloat((Math.random() * (max - min) + min).toFixed(1));\r\n    data.push({\r\n      timestamp: timestamp.toISOString(),\r\n      value,\r\n      unit\r\n    });\r\n  }\r\n\r\n  // Generate statistics\r\n  const values = data.map(d => d.value);\r\n  const stats = {\r\n    min: Math.min(...values),\r\n    max: Math.max(...values),\r\n    avg: parseFloat((values.reduce((a, b) => a + b, 0) / values.length).toFixed(2)),\r\n    unit\r\n  };\r\n\r\n  return { data, stats };\r\n};\r\n\r\n// Mock actuator data generation\r\nconst generateActuatorData = (actuatorType, timeRange) => {\r\n  const data = [];\r\n  const now = new Date();\r\n  let startDate, endDate, dataPoints, interval;\r\n\r\n  // Set parameters based on time period\r\n  if (timeRange === '24h') {\r\n    startDate = new Date(Date.now() - 24 * 60 * 60 * 1000);\r\n    endDate = new Date();\r\n    dataPoints = 24;\r\n    interval = 60 * 60 * 1000; // 1 hour\r\n  } else if (timeRange === '7d') {\r\n    startDate = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\r\n    endDate = new Date();\r\n    dataPoints = 7;\r\n    interval = 24 * 60 * 60 * 1000; // 1 day\r\n  } else if (timeRange === '30d') {\r\n    startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\r\n    endDate = new Date();\r\n    dataPoints = 30;\r\n    interval = 24 * 60 * 60 * 1000; // 1 day\r\n  } else {\r\n    // Default to 24h\r\n    startDate = new Date(Date.now() - 24 * 60 * 60 * 1000);\r\n    endDate = new Date();\r\n    dataPoints = 24;\r\n    interval = 60 * 60 * 1000;\r\n  }\r\n\r\n  // Possible actuator statuses\r\n  const statuses = ['on', 'off'];\r\n  \r\n  // Generate runtime data\r\n  let totalOnTime = 0;\r\n  let totalOffTime = 0;\r\n  \r\n  // Generate data points\r\n  for (let i = 0; i < dataPoints; i++) {\r\n    const status = Math.random() > 0.7 ? 'off' : 'on'; // Simulate 70% on-time\r\n    if (status === 'on') {\r\n      totalOnTime += interval / (60 * 60 * 1000); // Convert to hours\r\n    } else {\r\n      totalOffTime += interval / (60 * 60 * 1000); // Convert to hours\r\n    }\r\n    \r\n    const timestamp = new Date(startDate.getTime() + i * interval);\r\n    \r\n    data.push({\r\n      timestamp: timestamp.toISOString(),\r\n      status,\r\n      runtime: status === 'on' ? (interval / (60 * 60 * 1000)) : 0 // Runtime in hours\r\n    });\r\n  }\r\n  \r\n  // Generate statistics\r\n  const stats = {\r\n    totalOn: totalOnTime.toFixed(1),\r\n    totalOff: totalOffTime.toFixed(1),\r\n    pieData: [\r\n      { name: 'On', value: totalOnTime, color: '#4caf50' },\r\n      { name: 'Off', value: totalOffTime, color: '#f44336' }\r\n    ]\r\n  };\r\n  \r\n  return {\r\n    data: data.reverse(),\r\n    stats\r\n  };\r\n};\r\n\r\nconst Analytics = () => {\r\n  // State management\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [dataType, setDataType] = useState('sensor'); // 'sensor' or 'actuator'\r\n  const [sensorType, setSensorType] = useState('temperature');\r\n  const [actuatorType, setActuatorType] = useState('irrigation');\r\n  const [timeRange, setTimeRange] = useState('24h');\r\n  const [chartData, setChartData] = useState({});\r\n  const [tabValue, setTabValue] = useState(0);\r\n\r\n  // Load data\r\n  const loadData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      if (dataType === 'sensor') {\r\n        // Simulate API fetch for sensor data\r\n        // In a real project, use an actual API call:\r\n        // const response = await analyticsAPI.getSensorData(sensorType, timeRange);\r\n        \r\n        // Use mock data\r\n        const data = generateSensorData(sensorType, timeRange);\r\n        setChartData(data);\r\n      } else {\r\n        // Simulate API fetch for actuator data\r\n        // In a real project, use an actual API call:\r\n        // const response = await analyticsAPI.getActuatorData(actuatorType, timeRange);\r\n        \r\n        // Use mock data\r\n        const data = generateActuatorData(actuatorType, timeRange);\r\n        setChartData(data);\r\n      }\r\n    } catch (err) {\r\n      console.error('Failed to get analytics data:', err);\r\n      setError('Failed to get data, please try again later');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Load initial data\r\n  useEffect(() => {\r\n    loadData();\r\n  }, []);\r\n  \r\n  // Reload data when filters change\r\n  useEffect(() => {\r\n    loadData();\r\n  }, [dataType, sensorType, actuatorType, timeRange]);\r\n  \r\n  // Handle chart type tab change\r\n  const handleTabChange = (event, newValue) => {\r\n    setTabValue(newValue);\r\n  };\r\n  \r\n  // Format date display\r\n  const formatDate = (dateStr) => {\r\n    const date = new Date(dateStr);\r\n    return date.toLocaleString('en-US', { \r\n      month: 'short', \r\n      day: 'numeric', \r\n      hour: '2-digit', \r\n      minute: '2-digit'\r\n    });\r\n  };\r\n  \r\n  // Render sensor data chart\r\n  const renderSensorChart = () => {\r\n    if (!chartData.data || chartData.data.length === 0) return null;\r\n    \r\n    const sensorInfo = SENSOR_TYPES.find(s => s.id === sensorType) || {};\r\n    const data = chartData.data;\r\n    const stats = chartData.stats;\r\n    \r\n    return (\r\n      <>\r\n        <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>\r\n          <Tabs value={tabValue} onChange={handleTabChange} aria-label=\"Chart type\">\r\n            <Tab icon={<TimelineIcon />} label=\"Line Chart\" />\r\n            <Tab icon={<TableChartIcon />} label=\"Data Table\" />\r\n          </Tabs>\r\n        </Box>\r\n        \r\n        <TabPanel value={tabValue} index={0}>\r\n          <ChartPanel \r\n            title={\r\n              <Typography variant=\"h6\">\r\n                {sensorInfo.name || sensorType} Trend ({stats.unit})\r\n              </Typography>\r\n            }\r\n          >\r\n            <ResponsiveContainer width=\"100%\" height={300}>\r\n              <LineChart data={data}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis \r\n                  dataKey=\"timestamp\" \r\n                  tickFormatter={(tick) => format(new Date(tick), 'HH:mm MM/dd')}\r\n                />\r\n                <YAxis />\r\n                <Tooltip \r\n                  formatter={(value) => [`${value} ${stats.unit}`, 'Value']}\r\n                  labelFormatter={(label) => `Time: ${label}`}\r\n                />\r\n                <Legend />\r\n                <Line \r\n                  type=\"monotone\" \r\n                  dataKey=\"value\" \r\n                  stroke={sensorInfo.color || '#8884d8'} \r\n                  activeDot={{ r: 8 }} \r\n                />\r\n              </LineChart>\r\n            </ResponsiveContainer>\r\n          </ChartPanel>\r\n        </TabPanel>\r\n        \r\n        <TabPanel value={tabValue} index={1}>\r\n          <TableContainer component={Paper}>\r\n            <Table sx={{ minWidth: 650 }} aria-label=\"sensor data table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Time</TableCell>\r\n                  <TableCell align=\"right\">Value ({stats.unit})</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {data.map((row, index) => (\r\n                  <TableRow key={index}>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      {formatDate(row.timestamp)}\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">{row.value}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </TabPanel>\r\n      </>\r\n    );\r\n  };\r\n  \r\n  // Render actuator data chart\r\n  const renderActuatorChart = () => {\r\n    if (!chartData.data || chartData.data.length === 0) return null;\r\n    \r\n    const actuatorInfo = ACTUATOR_TYPES.find(a => a.id === actuatorType) || {};\r\n    const data = chartData.data;\r\n    const stats = chartData.stats;\r\n    \r\n    return (\r\n      <>\r\n        <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>\r\n          <Tabs value={tabValue} onChange={handleTabChange} aria-label=\"Chart type\">\r\n            <Tab icon={<TimelineIcon />} label=\"Runtime\" />\r\n            <Tab icon={<PieChartIcon />} label=\"Runtime Ratio\" />\r\n            <Tab icon={<TableChartIcon />} label=\"Data Table\" />\r\n          </Tabs>\r\n        </Box>\r\n        \r\n        <TabPanel value={tabValue} index={0}>\r\n          <ChartPanel \r\n            title={\r\n              <Typography variant=\"h6\">\r\n                {actuatorInfo.name || actuatorType} Runtime (hours)\r\n              </Typography>\r\n            }\r\n          >\r\n            <ResponsiveContainer width=\"100%\" height={300}>\r\n              <AreaChart data={data}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"timestamp\" tickFormatter={(tick) => format(new Date(tick), 'HH:mm MM/dd')} />\r\n                <YAxis />\r\n                <Tooltip \r\n                  formatter={(value) => [`${value} hours`, 'Runtime']}\r\n                  labelFormatter={(label) => `Time: ${label}`}\r\n                />\r\n                <Legend />\r\n                <Area \r\n                  type=\"monotone\" \r\n                  dataKey=\"runtime\" \r\n                  name=\"Runtime\"\r\n                  stroke={actuatorInfo.color || '#8884d8'} \r\n                  fill={actuatorInfo.color || '#8884d8'} \r\n                />\r\n              </AreaChart>\r\n            </ResponsiveContainer>\r\n          </ChartPanel>\r\n        </TabPanel>\r\n        \r\n        <TabPanel value={tabValue} index={1}>\r\n          <ChartPanel \r\n            title={\r\n              <Typography variant=\"h6\">\r\n                {actuatorInfo.name || actuatorType} Runtime Ratio\r\n              </Typography>\r\n            }\r\n          >\r\n            <ResponsiveContainer width=\"100%\" height={300}>\r\n              <PieChart>\r\n                <Pie\r\n                  data={stats.pieData}\r\n                  cx=\"50%\"\r\n                  cy=\"50%\"\r\n                  labelLine={false}\r\n                  outerRadius={80}\r\n                  fill=\"#8884d8\"\r\n                  dataKey=\"value\"\r\n                  nameKey=\"name\"\r\n                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\r\n                >\r\n                  {stats.pieData.map((entry, index) => (\r\n                    <Cell key={`cell-${index}`} fill={entry.color} />\r\n                  ))}\r\n                </Pie>\r\n                <Tooltip formatter={(value) => [`${value.toFixed(1)} hours`, 'Time']} />\r\n                <Legend />\r\n              </PieChart>\r\n            </ResponsiveContainer>\r\n          </ChartPanel>\r\n        </TabPanel>\r\n        \r\n        <TabPanel value={tabValue} index={2}>\r\n          <TableContainer component={Paper}>\r\n            <Table sx={{ minWidth: 650 }} aria-label=\"actuator data table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Time</TableCell>\r\n                  <TableCell align=\"right\">Status</TableCell>\r\n                  <TableCell align=\"right\">Runtime (hours)</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {data.map((row, index) => (\r\n                  <TableRow key={index}>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      {formatDate(row.timestamp)}\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                      <Chip \r\n                        label={row.status === 'on' ? 'On' : (row.status === 'off' ? 'Off' : 'Error')} \r\n                        color={row.status === 'on' ? 'success' : (row.status === 'off' ? 'default' : 'error')}\r\n                        size=\"small\"\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">{row.runtime}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </TabPanel>\r\n      </>\r\n    );\r\n  };\r\n  \r\n  // Render stat cards\r\n  const renderStatCards = () => {\r\n    if (!chartData.stats) return null;\r\n    \r\n    const stats = chartData.stats;\r\n    \r\n    if (dataType === 'sensor') {\r\n      return (\r\n        <Grid container spacing={3} sx={{ mb: 3 }}>\r\n          <Grid item xs={12} sm={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography color=\"text.secondary\" gutterBottom>\r\n                  Minimum Value\r\n                </Typography>\r\n                <Typography variant=\"h4\" component=\"div\">\r\n                  {stats.min} {stats.unit}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography color=\"text.secondary\" gutterBottom>\r\n                  Maximum Value\r\n                </Typography>\r\n                <Typography variant=\"h4\" component=\"div\">\r\n                  {stats.max} {stats.unit}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography color=\"text.secondary\" gutterBottom>\r\n                  Average Value\r\n                </Typography>\r\n                <Typography variant=\"h4\" component=\"div\">\r\n                  {stats.avg} {stats.unit}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      );\r\n    } else {\r\n      const runStats = chartData.stats;\r\n      \r\n      return (\r\n        <Grid container spacing={3} sx={{ mb: 3 }}>\r\n          <Grid item xs={12} sm={6}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography color=\"text.secondary\" gutterBottom>\r\n                  Total Runtime\r\n                </Typography>\r\n                <Typography variant=\"h4\" component=\"div\">\r\n                  {runStats.totalOn} hours\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Card>\r\n              <CardContent>\r\n                <Typography color=\"text.secondary\" gutterBottom>\r\n                  Runtime Ratio\r\n                </Typography>\r\n                <Typography variant=\"h4\" component=\"div\">\r\n                  {(runStats.totalOn / (parseFloat(runStats.totalOn) + parseFloat(runStats.totalOff)) * 100).toFixed(1)}%\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      <Box sx={{ mt: 4, mb: 3 }}>\r\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\r\n          Data Analysis\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"textSecondary\">\r\n          View historical data and trend analysis for sensors and actuators\r\n        </Typography>\r\n      </Box>\r\n\r\n      {/* Filter conditions */}\r\n      <Paper sx={{ p: 3, mb: 4 }}>\r\n        <Grid container spacing={3} alignItems=\"center\">\r\n          <Grid item xs={12} md={3}>\r\n            <FormControl fullWidth>\r\n              <InputLabel>Data Type</InputLabel>\r\n              <Select\r\n                value={dataType}\r\n                label=\"Data Type\"\r\n                onChange={(e) => setDataType(e.target.value)}\r\n              >\r\n                <MenuItem value=\"sensor\">Sensor Data</MenuItem>\r\n                <MenuItem value=\"actuator\">Actuator Data</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          \r\n          {dataType === 'sensor' ? (\r\n            <Grid item xs={12} md={3}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Sensor Type</InputLabel>\r\n                <Select\r\n                  value={sensorType}\r\n                  label=\"Sensor Type\"\r\n                  onChange={(e) => setSensorType(e.target.value)}\r\n                >\r\n                  {SENSOR_TYPES.map(type => (\r\n                    <MenuItem key={type.id} value={type.id}>\r\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <Box sx={{ mr: 1, color: type.color }}>{type.icon}</Box>\r\n                        {type.name}\r\n                      </Box>\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n          ) : (\r\n            <Grid item xs={12} md={3}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Actuator Type</InputLabel>\r\n                <Select\r\n                  value={actuatorType}\r\n                  label=\"Actuator Type\"\r\n                  onChange={(e) => setActuatorType(e.target.value)}\r\n                >\r\n                  {ACTUATOR_TYPES.map(type => (\r\n                    <MenuItem key={type.id} value={type.id}>\r\n                      {type.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n          )}\r\n          \r\n          <Grid item xs={12} md={3}>\r\n            <FormControl fullWidth>\r\n              <InputLabel>Time Range</InputLabel>\r\n              <Select\r\n                value={timeRange}\r\n                label=\"Time Range\"\r\n                onChange={(e) => setTimeRange(e.target.value)}\r\n              >\r\n                <MenuItem value=\"24h\">Last 24 hours</MenuItem>\r\n                <MenuItem value=\"7d\">Last 7 days</MenuItem>\r\n                <MenuItem value=\"30d\">Last 30 days</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} md={3}>\r\n            <Button \r\n              variant=\"contained\" \r\n              fullWidth\r\n              onClick={loadData}\r\n              startIcon={<DateRangeIcon />}\r\n            >\r\n              Apply Filters\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n\r\n      {/* Error message */}\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Loading message */}\r\n      {loading && (\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', my: 5 }}>\r\n          <CircularProgress />\r\n        </Box>\r\n      )}\r\n\r\n      {/* Stat cards */}\r\n      {!loading && !error && (\r\n        <Box sx={{ mb: 4 }}>\r\n          {renderStatCards()}\r\n        </Box>\r\n      )}\r\n\r\n      {/* Chart content */}\r\n      {!loading && !error && (\r\n        <Paper sx={{ p: 3 }}>\r\n          {dataType === 'sensor' ? renderSensorChart() : renderActuatorChart()}\r\n        </Paper>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Analytics; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}