{"ast":null,"code":"import { API_URL, TOKEN_KEY } from '../config';\n\n// Client-side mock database for actuators\nconst mockActuatorDatabase = {\n  actuators: [{\n    id: 1,\n    name: 'Greenhouse 1 Irrigation System',\n    type: 'irrigation',\n    location: 'Greenhouse 1',\n    status: 'off',\n    mode: 'manual',\n    is_active: true,\n    mqtt_topic: 'farm/actuators/irrigation/1',\n    created_at: '2023-10-01T08:00:00Z',\n    updated_at: '2023-11-15T10:30:00Z',\n    last_control_time: '2023-11-14T14:20:00Z',\n    description: 'Main irrigation system for Greenhouse 1',\n    parameters: {\n      water_flow: 2.5,\n      duration: 30,\n      schedule: 'daily',\n      auto_threshold: 30\n    }\n  }, {\n    id: 2,\n    name: 'Greenhouse 2 Ventilation Fan',\n    type: 'fan',\n    location: 'Greenhouse 2',\n    status: 'low',\n    mode: 'auto',\n    is_active: true,\n    mqtt_topic: 'farm/actuators/fan/2',\n    created_at: '2023-10-01T08:00:00Z',\n    updated_at: '2023-11-15T10:30:00Z',\n    description: 'Main ventilation fan for Greenhouse 2',\n    parameters: {\n      speed: 2,\n      max_speed: 5,\n      direction: 'forward',\n      auto_trigger_temp: 28\n    }\n  }, {\n    id: 3,\n    name: 'Greenhouse 1 Lighting System',\n    type: 'lighting',\n    location: 'Greenhouse 1',\n    status: 'on',\n    mode: 'auto',\n    is_active: true,\n    mqtt_topic: 'farm/actuators/lighting/1',\n    created_at: '2023-10-01T08:00:00Z',\n    updated_at: '2023-11-15T10:30:00Z',\n    description: 'Main lighting system for Greenhouse 1',\n    parameters: {\n      brightness: 80,\n      color_temp: 4000,\n      schedule_on: '06:00',\n      schedule_off: '20:00'\n    }\n  }, {\n    id: 4,\n    name: 'Greenhouse 3 Humidifier',\n    type: 'humidifier',\n    location: 'Greenhouse 3',\n    status: 'off',\n    mode: 'manual',\n    is_active: false,\n    mqtt_topic: 'farm/actuators/humidifier/1',\n    created_at: '2023-10-01T08:00:00Z',\n    updated_at: '2023-11-15T10:30:00Z',\n    description: 'Main humidifier for Greenhouse 3',\n    parameters: {\n      capacity: 5,\n      auto_trigger_humidity: 40,\n      auto_stop_humidity: 60\n    }\n  }],\n  logs: []\n};\n\n// Helper function to update actuator in mock database\nconst updateActuatorInDatabase = (id, updates) => {\n  const index = mockActuatorDatabase.actuators.findIndex(a => a.id === parseInt(id));\n  if (index !== -1) {\n    const updatedActuator = {\n      ...mockActuatorDatabase.actuators[index],\n      ...updates,\n      updated_at: new Date().toISOString()\n    };\n    mockActuatorDatabase.actuators[index] = updatedActuator;\n    console.log(`执行器 ${id} 已更新:`, updatedActuator);\n    return updatedActuator;\n  }\n  return null;\n};\n\n// Helper function to add a log to the mock database\nconst addLogToDatabase = (actuatorId, status, message, source = 'web', user = 'admin') => {\n  const newLog = {\n    id: mockActuatorDatabase.logs.length + 1,\n    actuator_id: parseInt(actuatorId),\n    timestamp: new Date().toISOString(),\n    status,\n    message,\n    user,\n    source\n  };\n  mockActuatorDatabase.logs.unshift(newLog); // Add to beginning of array\n  console.log(`执行器 ${actuatorId} 添加日志:`, newLog);\n  return newLog;\n};\n\n// Create common API call method\nconst apiCall = async (endpoint, method = 'GET', data = null) => {\n  // 确保endpoint以/开头，并且以/结尾，避免308重定向问题\n  let normalizedEndpoint = endpoint.startsWith('/') ? endpoint : `/${endpoint}`;\n  normalizedEndpoint = normalizedEndpoint.endsWith('/') ? normalizedEndpoint : `${normalizedEndpoint}/`;\n  const url = `${API_URL}${normalizedEndpoint}`;\n  console.log(`调用API: ${url}`); // 调试用\n\n  const options = {\n    method,\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    // 添加重定向跟随\n    redirect: 'follow'\n  };\n\n  // Add authorization token\n  const token = localStorage.getItem(TOKEN_KEY);\n  if (token) {\n    options.headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  // Add request body data\n  if (data) {\n    options.body = JSON.stringify(data);\n  }\n  try {\n    // Use real API instead of mock response\n    const response = await fetch(url, options);\n\n    // 检查是否有重定向\n    if (response.redirected) {\n      console.log(`API重定向: ${response.url}`);\n    }\n    const result = await response.json();\n    console.log(`API响应: ${normalizedEndpoint}`, result); // 添加日志以调试\n\n    // 直接返回后端的响应结果，不需要额外处理\n    return result;\n  } catch (error) {\n    console.error('API调用错误:', error);\n    throw error;\n  }\n};\n\n// Mock API response - Keep for reference but not used\nconst mockApiResponse = (endpoint, method, data) => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      // Return mock data based on different endpoints\n      if (endpoint.startsWith('/dashboard') && method === 'GET') {\n        resolve({\n          data: {\n            success: true,\n            data: {\n              sensors: {\n                total: 12,\n                active: 10,\n                latest_readings: {\n                  temperature: {\n                    value: 24.5,\n                    unit: '°C',\n                    sensor_location: 'Greenhouse 1',\n                    timestamp: new Date().toISOString()\n                  },\n                  humidity: {\n                    value: 65,\n                    unit: '%',\n                    sensor_location: 'Greenhouse 1',\n                    timestamp: new Date().toISOString()\n                  },\n                  light: {\n                    value: 3500,\n                    unit: 'lux',\n                    sensor_location: 'Greenhouse 2',\n                    timestamp: new Date().toISOString()\n                  },\n                  soil_moisture: {\n                    value: 42,\n                    unit: '%',\n                    sensor_location: 'Greenhouse 1',\n                    timestamp: new Date().toISOString()\n                  }\n                }\n              },\n              actuators: {\n                total: 8,\n                active: 6,\n                statuses: {\n                  irrigation: {\n                    on: 1,\n                    off: 2,\n                    error: 0\n                  },\n                  ventilation: {\n                    on: 2,\n                    off: 1,\n                    error: 0\n                  },\n                  lighting: {\n                    on: 1,\n                    off: 1,\n                    error: 0\n                  },\n                  heating: {\n                    on: 0,\n                    off: 1,\n                    error: 0\n                  }\n                }\n              },\n              alerts: {\n                total: 5,\n                unread: 2,\n                recent: [{\n                  id: 1,\n                  type: 'temperature',\n                  message: 'Greenhouse 1 temperature above threshold (30°C)',\n                  created_at: new Date(Date.now() - 10 * 60000).toISOString(),\n                  is_read: false\n                }, {\n                  id: 2,\n                  type: 'actuator',\n                  message: 'Greenhouse 2 irrigation system started',\n                  created_at: new Date(Date.now() - 30 * 60000).toISOString(),\n                  is_read: true\n                }]\n              }\n            }\n          }\n        });\n      }\n      // Mock get all actuators\n      else if (endpoint === '/actuators' && method === 'GET') {\n        resolve({\n          data: {\n            success: true,\n            data: [{\n              id: 1,\n              name: 'Greenhouse 1 Irrigation System',\n              type: 'irrigation',\n              location: 'Greenhouse 1',\n              status: 'off',\n              mode: 'manual',\n              is_active: true,\n              mqtt_topic: 'farm/actuators/irrigation/1',\n              created_at: '2023-10-01T08:00:00Z',\n              updated_at: '2023-11-15T10:30:00Z',\n              last_control_time: '2023-11-14T14:20:00Z'\n            }, {\n              id: 2,\n              name: 'Greenhouse 2 Ventilation Fan',\n              type: 'fan',\n              location: 'Greenhouse 2',\n              status: 'low',\n              mode: 'auto',\n              is_active: true,\n              mqtt_topic: 'farm/actuators/fan/2',\n              created_at: '2023-10-01T08:00:00Z',\n              updated_at: '2023-11-15T10:30:00Z',\n              parameters: {\n                speed: 2,\n                max_speed: 5,\n                direction: 'forward'\n              }\n            }, {\n              id: 3,\n              name: 'Greenhouse 1 Lighting System',\n              type: 'lighting',\n              location: 'Greenhouse 1',\n              status: 'on',\n              mode: 'auto',\n              is_active: true,\n              mqtt_topic: 'farm/actuators/lighting/1',\n              created_at: '2023-10-01T08:00:00Z',\n              updated_at: '2023-11-15T10:30:00Z',\n              parameters: {\n                brightness: 80,\n                color_temp: 4000\n              }\n            }, {\n              id: 4,\n              name: 'Greenhouse 3 Humidifier',\n              type: 'humidifier',\n              location: 'Greenhouse 3',\n              status: 'off',\n              mode: 'manual',\n              is_active: false,\n              mqtt_topic: 'farm/actuators/humidifier/1',\n              created_at: '2023-10-01T08:00:00Z',\n              updated_at: '2023-11-15T10:30:00Z'\n            }]\n          }\n        });\n      }\n      // Mock get all sensors\n      else if (endpoint === '/sensors' && method === 'GET') {\n        resolve({\n          data: {\n            success: true,\n            data: [{\n              id: 1,\n              name: 'Temperature Sensor 1',\n              type: 'temperature',\n              location: 'Greenhouse 1',\n              status: 'active',\n              last_reading: {\n                value: 24.5,\n                unit: '°C',\n                timestamp: new Date().toISOString()\n              }\n            }, {\n              id: 2,\n              name: 'Humidity Sensor 1',\n              type: 'humidity',\n              location: 'Greenhouse 1',\n              status: 'active',\n              last_reading: {\n                value: 65,\n                unit: '%',\n                timestamp: new Date().toISOString()\n              }\n            }, {\n              id: 3,\n              name: 'Light Sensor 1',\n              type: 'light',\n              location: 'Greenhouse 2',\n              status: 'active',\n              last_reading: {\n                value: 3500,\n                unit: 'lux',\n                timestamp: new Date().toISOString()\n              }\n            }, {\n              id: 4,\n              name: 'Soil Moisture Sensor 1',\n              type: 'soil_moisture',\n              location: 'Greenhouse 1',\n              status: 'inactive',\n              last_reading: {\n                value: 42,\n                unit: '%',\n                timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\n              }\n            }]\n          }\n        });\n      }\n      // Mock get single sensor\n      else if (endpoint.match(/\\/sensors\\/\\d+$/) && method === 'GET') {\n        const id = parseInt(endpoint.split('/').pop());\n        let sensor = {};\n        switch (id) {\n          case 1:\n            sensor = {\n              id: 1,\n              name: 'Temperature Sensor 1',\n              type: 'temperature',\n              location: 'Greenhouse 1',\n              status: 'active',\n              description: 'Primary temperature sensor for monitoring greenhouse conditions.',\n              mqtt_topic: 'farm/sensors/temperature/1',\n              created_at: '2023-10-01T08:00:00Z',\n              updated_at: '2023-11-15T10:30:00Z',\n              model: 'DHT22',\n              manufacturer: 'Acme Sensors',\n              calibration_date: '2023-09-15T00:00:00Z',\n              last_reading: {\n                value: 24.5,\n                unit: '°C',\n                timestamp: new Date().toISOString()\n              },\n              history: [{\n                timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(),\n                value: 24.5\n              }, {\n                timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n                value: 25.1\n              }, {\n                timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(),\n                value: 25.4\n              }, {\n                timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),\n                value: 25.8\n              }, {\n                timestamp: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(),\n                value: 26.2\n              }, {\n                timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),\n                value: 26.5\n              }]\n            };\n            break;\n          case 2:\n            sensor = {\n              id: 2,\n              name: 'Humidity Sensor 1',\n              type: 'humidity',\n              location: 'Greenhouse 1',\n              status: 'active',\n              description: 'Primary humidity sensor for monitoring greenhouse conditions.',\n              mqtt_topic: 'farm/sensors/humidity/1',\n              created_at: '2023-10-01T08:00:00Z',\n              updated_at: '2023-11-15T10:30:00Z',\n              model: 'DHT22',\n              manufacturer: 'Acme Sensors',\n              calibration_date: '2023-09-15T00:00:00Z',\n              last_reading: {\n                value: 65,\n                unit: '%',\n                timestamp: new Date().toISOString()\n              },\n              history: [{\n                timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(),\n                value: 65\n              }, {\n                timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n                value: 64\n              }, {\n                timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(),\n                value: 63\n              }, {\n                timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),\n                value: 62\n              }, {\n                timestamp: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(),\n                value: 60\n              }, {\n                timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),\n                value: 59\n              }]\n            };\n            break;\n          case 3:\n            sensor = {\n              id: 3,\n              name: 'Light Sensor 1',\n              type: 'light',\n              location: 'Greenhouse 2',\n              status: 'active',\n              description: 'Light sensor for monitoring lighting conditions.',\n              mqtt_topic: 'farm/sensors/light/1',\n              created_at: '2023-10-01T08:00:00Z',\n              updated_at: '2023-11-15T10:30:00Z',\n              model: 'BH1750',\n              manufacturer: 'Acme Sensors',\n              calibration_date: '2023-09-15T00:00:00Z',\n              last_reading: {\n                value: 3500,\n                unit: 'lux',\n                timestamp: new Date().toISOString()\n              },\n              history: [{\n                timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(),\n                value: 3500\n              }, {\n                timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n                value: 3200\n              }, {\n                timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(),\n                value: 2900\n              }, {\n                timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),\n                value: 2500\n              }, {\n                timestamp: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(),\n                value: 2000\n              }, {\n                timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),\n                value: 1500\n              }]\n            };\n            break;\n          case 4:\n            sensor = {\n              id: 4,\n              name: 'Soil Moisture Sensor 1',\n              type: 'soil_moisture',\n              location: 'Greenhouse 1',\n              status: 'inactive',\n              description: 'Soil moisture sensor for monitoring soil conditions.',\n              mqtt_topic: 'farm/sensors/soil_moisture/1',\n              created_at: '2023-10-01T08:00:00Z',\n              updated_at: '2023-11-15T10:30:00Z',\n              model: 'YL-69',\n              manufacturer: 'Acme Sensors',\n              calibration_date: '2023-09-15T00:00:00Z',\n              last_reading: {\n                value: 42,\n                unit: '%',\n                timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\n              },\n              history: [{\n                timestamp: new Date(Date.now() - 25 * 60 * 60 * 1000).toISOString(),\n                value: 42\n              }, {\n                timestamp: new Date(Date.now() - 26 * 60 * 60 * 1000).toISOString(),\n                value: 43\n              }, {\n                timestamp: new Date(Date.now() - 27 * 60 * 60 * 1000).toISOString(),\n                value: 44\n              }, {\n                timestamp: new Date(Date.now() - 28 * 60 * 60 * 1000).toISOString(),\n                value: 45\n              }, {\n                timestamp: new Date(Date.now() - 29 * 60 * 60 * 1000).toISOString(),\n                value: 46\n              }, {\n                timestamp: new Date(Date.now() - 30 * 60 * 60 * 1000).toISOString(),\n                value: 47\n              }]\n            };\n            break;\n          default:\n            sensor = null;\n        }\n        resolve({\n          data: {\n            success: true,\n            data: sensor\n          }\n        });\n      }\n      // Mock get actuator operation logs\n      else if (endpoint.match(/\\/actuators\\/\\d+\\/logs$/) && method === 'GET') {\n        resolve({\n          data: {\n            success: true,\n            data: [{\n              id: 1,\n              actuator_id: parseInt(endpoint.split('/')[2]),\n              timestamp: new Date(Date.now() - 1000 * 60 * 5).toISOString(),\n              status: 'on',\n              message: 'Manual activation of actuator',\n              user: 'admin',\n              source: 'web'\n            }, {\n              id: 2,\n              actuator_id: parseInt(endpoint.split('/')[2]),\n              timestamp: new Date(Date.now() - 1000 * 60 * 60).toISOString(),\n              status: 'off',\n              message: 'Actuator turned off by automatic rule',\n              user: 'system',\n              source: 'rule'\n            }, {\n              id: 3,\n              actuator_id: parseInt(endpoint.split('/')[2]),\n              timestamp: new Date(Date.now() - 1000 * 60 * 60 * 12).toISOString(),\n              status: 'on',\n              message: 'Adjusted actuator parameters',\n              user: 'admin',\n              source: 'api'\n            }]\n          }\n        });\n      }\n      // Mock get actuator allowed statuses\n      else if (endpoint.match(/\\/actuators\\/\\d+\\/statuses$/) && method === 'GET') {\n        const id = parseInt(endpoint.split('/')[2]);\n        let statuses = [];\n        switch (id) {\n          case 1:\n            // Irrigation\n            statuses = ['on', 'off'];\n            break;\n          case 2:\n            // Fan\n            statuses = ['off', 'low', 'medium', 'high'];\n            break;\n          case 3:\n            // Lighting\n            statuses = ['on', 'off', 'dim'];\n            break;\n          case 4:\n            // Humidifier\n            statuses = ['on', 'off', 'auto'];\n            break;\n          default:\n            statuses = ['on', 'off'];\n        }\n        resolve({\n          data: {\n            success: true,\n            data: statuses\n          }\n        });\n      }\n      // Mock control actuator\n      else if (endpoint.match(/\\/actuators\\/\\d+\\/control$/) && method === 'POST') {\n        resolve({\n          data: {\n            success: true,\n            message: 'Operation successful',\n            data: {\n              ...data,\n              timestamp: new Date().toISOString()\n            }\n          }\n        });\n      }\n      // Mock update actuator\n      else if (endpoint.match(/\\/actuators\\/\\d+$/) && method === 'PUT') {\n        resolve({\n          data: {\n            success: true,\n            message: 'Update successful',\n            data: {\n              ...data,\n              updated_at: new Date().toISOString()\n            }\n          }\n        });\n      }\n      // Mock update actuator auto rules\n      else if (endpoint.match(/\\/actuators\\/\\d+\\/rules$/) && method === 'PUT') {\n        resolve({\n          data: {\n            success: true,\n            message: 'Rule update successful',\n            data: {\n              ...data,\n              updated_at: new Date().toISOString()\n            }\n          }\n        });\n      }\n      // Mock update actuator parameters\n      else if (endpoint.match(/\\/actuators\\/\\d+\\/parameters$/) && method === 'PUT') {\n        resolve({\n          data: {\n            success: true,\n            message: 'Parameter update successful',\n            data: {\n              ...data,\n              updated_at: new Date().toISOString()\n            }\n          }\n        });\n      }\n      // Mock register user\n      else if (endpoint === '/users/register' && method === 'POST') {\n        // 模拟用户注册\n        if (!data.username || !data.email || !data.password) {\n          resolve({\n            data: {\n              success: false,\n              message: 'Missing required fields'\n            },\n            status: 400\n          });\n          return;\n        }\n\n        // 模拟检查用户名是否已存在\n        if (data.username === 'admin' || data.username === 'user1') {\n          resolve({\n            data: {\n              success: false,\n              message: `Username ${data.username} is already taken`\n            },\n            status: 409\n          });\n          return;\n        }\n\n        // 模拟检查邮箱是否已存在\n        if (data.email === 'admin@smartfarm.com' || data.email === 'user1@smartfarm.com') {\n          resolve({\n            data: {\n              success: false,\n              message: `Email ${data.email} is already registered`\n            },\n            status: 409\n          });\n          return;\n        }\n\n        // 注册成功\n        resolve({\n          data: {\n            success: true,\n            message: 'User registered successfully',\n            data: {\n              id: Math.floor(Math.random() * 1000) + 10,\n              username: data.username,\n              email: data.email,\n              role: 'user',\n              is_active: true,\n              created_at: new Date().toISOString(),\n              updated_at: new Date().toISOString()\n            }\n          },\n          status: 201\n        });\n      }\n      // Mock login user\n      else if (endpoint === '/users/login' && method === 'POST') {\n        // 模拟用户登录\n        if (!data.email || !data.password) {\n          resolve({\n            data: {\n              success: false,\n              message: 'Missing required fields'\n            },\n            status: 400\n          });\n          return;\n        }\n\n        // 检查测试账户\n        if (data.email === 'admin@smartfarm.com' && data.password === 'password123' || data.email === 'user1@smartfarm.com' && data.password === 'password123' || data.password === 'password123') {\n          // 任何email只要密码对都通过\n          const isAdmin = data.email === 'admin@smartfarm.com';\n          const isUser = data.email === 'user1@smartfarm.com';\n          resolve({\n            data: {\n              success: true,\n              message: 'Login successful',\n              data: {\n                user: {\n                  id: isAdmin ? 1 : isUser ? 2 : 999,\n                  username: isAdmin ? 'admin' : isUser ? 'user1' : data.email.split('@')[0],\n                  email: data.email,\n                  role: isAdmin ? 'admin' : 'user',\n                  is_active: true,\n                  last_login: new Date().toISOString(),\n                  created_at: '2023-01-01T00:00:00Z',\n                  updated_at: new Date().toISOString()\n                },\n                token: 'mock-jwt-token-' + Math.random().toString(36).substring(2)\n              }\n            },\n            status: 200\n          });\n        } else {\n          resolve({\n            data: {\n              success: false,\n              message: 'Invalid email or password'\n            },\n            status: 401\n          });\n        }\n      }\n      // Other endpoints can be added as needed\n      else {\n        resolve({\n          data: {\n            success: true,\n            message: 'Operation completed',\n            data: null\n          }\n        });\n      }\n    }, 500); // Simulate network delay\n  });\n};\n\n// Export API services with corrected endpoint paths\nexport const authAPI = {\n  login: data => apiCall('/users/login', 'POST', data),\n  register: data => apiCall('/users/register', 'POST', data),\n  getProfile: () => apiCall('/users/profile'),\n  updateProfile: data => apiCall('/users/profile', 'PUT', data),\n  changePassword: data => apiCall('/users/change-password', 'POST', data)\n};\nexport const dashboardAPI = {\n  getSummary: () => {\n    // Use mock data for dashboard summary to avoid API issues\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          success: true,\n          data: {\n            sensors: {\n              total: 12,\n              active: 10,\n              latest_readings: {\n                temperature: {\n                  value: 24.5,\n                  unit: '°C',\n                  sensor_location: 'Greenhouse 1',\n                  timestamp: new Date().toISOString()\n                },\n                humidity: {\n                  value: 65,\n                  unit: '%',\n                  sensor_location: 'Greenhouse 1',\n                  timestamp: new Date().toISOString()\n                },\n                light: {\n                  value: 3500,\n                  unit: 'lux',\n                  sensor_location: 'Greenhouse 2',\n                  timestamp: new Date().toISOString()\n                },\n                soil_moisture: {\n                  value: 42,\n                  unit: '%',\n                  sensor_location: 'Greenhouse 1',\n                  timestamp: new Date().toISOString()\n                }\n              }\n            },\n            actuators: {\n              total: 8,\n              active: 6,\n              statuses: {\n                irrigation: {\n                  on: 1,\n                  off: 2,\n                  error: 0\n                },\n                ventilation: {\n                  on: 2,\n                  off: 1,\n                  error: 0\n                },\n                lighting: {\n                  on: 1,\n                  off: 1,\n                  error: 0\n                },\n                heating: {\n                  on: 0,\n                  off: 1,\n                  error: 0\n                }\n              }\n            },\n            alerts: {\n              total: 5,\n              unread: 2,\n              recent: [{\n                id: 1,\n                type: 'temperature',\n                message: 'Greenhouse 1 temperature above threshold (30°C)',\n                created_at: new Date(Date.now() - 10 * 60000).toISOString(),\n                is_read: false\n              }, {\n                id: 2,\n                type: 'actuator',\n                message: 'Greenhouse 2 irrigation system started',\n                created_at: new Date(Date.now() - 30 * 60000).toISOString(),\n                is_read: true\n              }]\n            }\n          }\n        });\n      }, 500); // Simulate network delay\n    });\n  }\n};\nexport const sensorAPI = {\n  getAllSensors: () => {\n    // Use mock data for sensors to avoid API issues\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          success: true,\n          data: [{\n            id: 1,\n            name: 'Temperature Sensor 1',\n            type: 'temperature',\n            location: 'Greenhouse 1',\n            status: 'active',\n            last_reading: {\n              value: 24.5,\n              unit: '°C',\n              timestamp: new Date().toISOString()\n            }\n          }, {\n            id: 2,\n            name: 'Humidity Sensor 1',\n            type: 'humidity',\n            location: 'Greenhouse 1',\n            status: 'active',\n            last_reading: {\n              value: 65,\n              unit: '%',\n              timestamp: new Date().toISOString()\n            }\n          }, {\n            id: 3,\n            name: 'Light Sensor 1',\n            type: 'light',\n            location: 'Greenhouse 2',\n            status: 'active',\n            last_reading: {\n              value: 3500,\n              unit: 'lux',\n              timestamp: new Date().toISOString()\n            }\n          }, {\n            id: 4,\n            name: 'Soil Moisture Sensor 1',\n            type: 'soil_moisture',\n            location: 'Greenhouse 1',\n            status: 'inactive',\n            last_reading: {\n              value: 42,\n              unit: '%',\n              timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\n            }\n          }]\n        });\n      }, 500); // Simulate network delay\n    });\n  },\n  getSensor: id => apiCall(`/sensors/${id}`),\n  getSensorData: (id, timeRange) => apiCall(`/sensors/${id}/data?timeRange=${timeRange}`),\n  updateSensor: (id, data) => apiCall(`/sensors/${id}`, 'PUT', data),\n  calibrateSensor: (id, data) => apiCall(`/sensors/${id}/calibrate`, 'POST', data)\n};\nexport const actuatorAPI = {\n  getAllActuators: () => {\n    // Use mock data for actuators from the mock database\n    console.log('获取所有执行器列表');\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          success: true,\n          data: mockActuatorDatabase.actuators\n        });\n      }, 500); // Simulate network delay\n    });\n  },\n  getActuator: id => {\n    // Use mock data for actuator details from the mock database\n    console.log(`获取执行器详情, ID: ${id}`);\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const actuator = mockActuatorDatabase.actuators.find(a => a.id === parseInt(id)) || {\n          id: parseInt(id),\n          name: `Unknown Actuator ${id}`,\n          type: 'unknown',\n          location: 'Unknown',\n          status: 'error',\n          mode: 'manual',\n          is_active: false,\n          mqtt_topic: `farm/actuators/unknown/${id}`,\n          created_at: '2023-10-01T08:00:00Z',\n          updated_at: '2023-11-15T10:30:00Z'\n        };\n        resolve({\n          success: true,\n          data: actuator\n        });\n      }, 500); // Simulate network delay\n    });\n  },\n  getActuatorLogs: id => {\n    // Get logs for specific actuator from mock database\n    console.log(`获取执行器日志, ID: ${id}`);\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const logs = mockActuatorDatabase.logs.filter(log => log.actuator_id === parseInt(id)).sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n        if (logs.length === 0) {\n          // If no logs exist yet, return some default ones\n          logs.push({\n            id: 1,\n            actuator_id: parseInt(id),\n            timestamp: new Date(Date.now() - 1000 * 60 * 5).toISOString(),\n            status: 'on',\n            message: 'Manual activation of actuator',\n            user: 'admin',\n            source: 'web'\n          }, {\n            id: 2,\n            actuator_id: parseInt(id),\n            timestamp: new Date(Date.now() - 1000 * 60 * 60).toISOString(),\n            status: 'off',\n            message: 'Actuator turned off by automatic rule',\n            user: 'system',\n            source: 'rule'\n          });\n        }\n        resolve({\n          success: true,\n          data: logs\n        });\n      }, 500); // Simulate network delay\n    });\n  },\n  getActuatorStatuses: id => {\n    // Return available statuses based on actuator type\n    console.log(`获取执行器状态选项, ID: ${id}`);\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const actuator = mockActuatorDatabase.actuators.find(a => a.id === parseInt(id));\n        let statuses = ['on', 'off']; // Default statuses\n\n        if (actuator) {\n          switch (actuator.type) {\n            case 'fan':\n              statuses = ['off', 'low', 'medium', 'high'];\n              break;\n            case 'lighting':\n              statuses = ['on', 'off', 'dim'];\n              break;\n            case 'humidifier':\n              statuses = ['on', 'off', 'auto'];\n              break;\n            case 'curtain':\n              statuses = ['open', 'closed', 'half'];\n              break;\n          }\n        }\n        resolve({\n          success: true,\n          data: statuses\n        });\n      }, 500); // Simulate network delay\n    });\n  },\n  controlActuator: (id, data) => {\n    // Update actuator status in mock database\n    console.log(`控制执行器, ID: ${id}, 操作: ${JSON.stringify(data)}`);\n    return new Promise(resolve => {\n      setTimeout(() => {\n        // Get the action from the data\n        const action = data.action;\n\n        // Update the actuator in the database\n        const updatedActuator = updateActuatorInDatabase(id, {\n          status: action,\n          last_control_time: new Date().toISOString()\n        });\n\n        // Add a log entry\n        const log = addLogToDatabase(id, action, `Actuator ${action === 'on' ? 'turned on' : 'turned off'} manually`);\n        resolve({\n          success: true,\n          message: 'Operation successful',\n          data: {\n            actuator: updatedActuator,\n            log: log\n          }\n        });\n      }, 500); // Simulate network delay\n    });\n  },\n  updateActuator: (id, data) => {\n    // Update actuator properties in mock database\n    console.log(`更新执行器, ID: ${id}, 数据: ${JSON.stringify(data)}`);\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const updatedActuator = updateActuatorInDatabase(id, data);\n        if (updatedActuator) {\n          addLogToDatabase(id, updatedActuator.status, 'Actuator settings updated');\n          resolve({\n            success: true,\n            message: 'Update successful',\n            data: updatedActuator\n          });\n        } else {\n          resolve({\n            success: false,\n            message: `Actuator with ID ${id} not found`\n          });\n        }\n      }, 500); // Simulate network delay\n    });\n  },\n  updateActuatorRules: (id, data) => {\n    // Update actuator rules in mock database\n    console.log(`更新执行器规则, ID: ${id}, 规则: ${JSON.stringify(data)}`);\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const actuator = mockActuatorDatabase.actuators.find(a => a.id === parseInt(id));\n        if (actuator) {\n          const updatedActuator = updateActuatorInDatabase(id, {\n            rules: data\n          });\n          addLogToDatabase(id, actuator.status, 'Actuator automation rules updated');\n          resolve({\n            success: true,\n            message: 'Rules updated successfully',\n            data: updatedActuator\n          });\n        } else {\n          resolve({\n            success: false,\n            message: `Actuator with ID ${id} not found`\n          });\n        }\n      }, 500); // Simulate network delay\n    });\n  },\n  updateActuatorParameters: (id, data) => {\n    // Update actuator parameters in mock database\n    console.log(`更新执行器参数, ID: ${id}, 参数: ${JSON.stringify(data)}`);\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const actuator = mockActuatorDatabase.actuators.find(a => a.id === parseInt(id));\n        if (actuator) {\n          const updatedActuator = updateActuatorInDatabase(id, {\n            parameters: {\n              ...actuator.parameters,\n              ...data\n            }\n          });\n          addLogToDatabase(id, actuator.status, 'Actuator parameters updated');\n          resolve({\n            success: true,\n            message: 'Parameters updated successfully',\n            data: updatedActuator\n          });\n        } else {\n          resolve({\n            success: false,\n            message: `Actuator with ID ${id} not found`\n          });\n        }\n      }, 500); // Simulate network delay\n    });\n  }\n};\nexport const alertAPI = {\n  getAlerts: (page = 1, limit = 10) => apiCall(`/alerts?page=${page}&limit=${limit}`),\n  markAsRead: id => apiCall(`/alerts/${id}/read`, 'POST'),\n  markAllAsRead: () => apiCall('/alerts/read-all', 'POST'),\n  deleteAlert: id => apiCall(`/alerts/${id}`, 'DELETE'),\n  getAlertSettings: () => apiCall('/alerts/settings'),\n  updateAlertSettings: data => apiCall('/alerts/settings', 'PUT', data)\n};\nexport const analyticsAPI = {\n  getSensorStats: timeRange => apiCall(`/analytics/sensors?timeRange=${timeRange}`),\n  getActuatorStats: timeRange => apiCall(`/analytics/actuators?timeRange=${timeRange}`),\n  getCorrelationData: (sensors, timeRange) => apiCall(`/analytics/correlation?sensors=${sensors.join(',')}&timeRange=${timeRange}`),\n  getEnergyUsage: timeRange => apiCall(`/analytics/energy?timeRange=${timeRange}`),\n  getYieldData: timeRange => apiCall(`/analytics/yield?timeRange=${timeRange}`)\n};\nexport const settingsAPI = {\n  getSystemSettings: () => apiCall('/settings/system'),\n  updateSystemSettings: data => apiCall('/settings/system', 'PUT', data),\n  getNotificationSettings: () => apiCall('/settings/notifications'),\n  updateNotificationSettings: data => apiCall('/settings/notifications', 'PUT', data),\n  getBackupSettings: () => apiCall('/settings/backup'),\n  updateBackupSettings: data => apiCall('/settings/backup', 'PUT', data),\n  backupNow: () => apiCall('/settings/backup/now', 'POST'),\n  restoreBackup: id => apiCall(`/settings/backup/restore/${id}`, 'POST'),\n  getDeviceSettings: () => apiCall('/settings/devices'),\n  updateDeviceSettings: data => apiCall('/settings/devices', 'PUT', data)\n};","map":{"version":3,"names":["API_URL","TOKEN_KEY","mockActuatorDatabase","actuators","id","name","type","location","status","mode","is_active","mqtt_topic","created_at","updated_at","last_control_time","description","parameters","water_flow","duration","schedule","auto_threshold","speed","max_speed","direction","auto_trigger_temp","brightness","color_temp","schedule_on","schedule_off","capacity","auto_trigger_humidity","auto_stop_humidity","logs","updateActuatorInDatabase","updates","index","findIndex","a","parseInt","updatedActuator","Date","toISOString","console","log","addLogToDatabase","actuatorId","message","source","user","newLog","length","actuator_id","timestamp","unshift","apiCall","endpoint","method","data","normalizedEndpoint","startsWith","endsWith","url","options","headers","redirect","token","localStorage","getItem","body","JSON","stringify","response","fetch","redirected","result","json","error","mockApiResponse","Promise","resolve","setTimeout","success","sensors","total","active","latest_readings","temperature","value","unit","sensor_location","humidity","light","soil_moisture","statuses","irrigation","on","off","ventilation","lighting","heating","alerts","unread","recent","now","is_read","last_reading","match","split","pop","sensor","model","manufacturer","calibration_date","history","username","email","password","Math","floor","random","role","isAdmin","isUser","last_login","toString","substring","authAPI","login","register","getProfile","updateProfile","changePassword","dashboardAPI","getSummary","sensorAPI","getAllSensors","getSensor","getSensorData","timeRange","updateSensor","calibrateSensor","actuatorAPI","getAllActuators","getActuator","actuator","find","getActuatorLogs","filter","sort","b","push","getActuatorStatuses","controlActuator","action","updateActuator","updateActuatorRules","rules","updateActuatorParameters","alertAPI","getAlerts","page","limit","markAsRead","markAllAsRead","deleteAlert","getAlertSettings","updateAlertSettings","analyticsAPI","getSensorStats","getActuatorStats","getCorrelationData","join","getEnergyUsage","getYieldData","settingsAPI","getSystemSettings","updateSystemSettings","getNotificationSettings","updateNotificationSettings","getBackupSettings","updateBackupSettings","backupNow","restoreBackup","getDeviceSettings","updateDeviceSettings"],"sources":["C:/Users/LIJIN/Desktop/webTest/frontend/src/services/api.js"],"sourcesContent":["import { API_URL, TOKEN_KEY } from '../config';\r\n\r\n// Client-side mock database for actuators\r\nconst mockActuatorDatabase = {\r\n  actuators: [\r\n    {\r\n      id: 1,\r\n      name: 'Greenhouse 1 Irrigation System',\r\n      type: 'irrigation',\r\n      location: 'Greenhouse 1',\r\n      status: 'off',\r\n      mode: 'manual',\r\n      is_active: true,\r\n      mqtt_topic: 'farm/actuators/irrigation/1',\r\n      created_at: '2023-10-01T08:00:00Z',\r\n      updated_at: '2023-11-15T10:30:00Z',\r\n      last_control_time: '2023-11-14T14:20:00Z',\r\n      description: 'Main irrigation system for Greenhouse 1',\r\n      parameters: {\r\n        water_flow: 2.5,\r\n        duration: 30,\r\n        schedule: 'daily',\r\n        auto_threshold: 30\r\n      }\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Greenhouse 2 Ventilation Fan',\r\n      type: 'fan',\r\n      location: 'Greenhouse 2',\r\n      status: 'low',\r\n      mode: 'auto',\r\n      is_active: true,\r\n      mqtt_topic: 'farm/actuators/fan/2',\r\n      created_at: '2023-10-01T08:00:00Z',\r\n      updated_at: '2023-11-15T10:30:00Z',\r\n      description: 'Main ventilation fan for Greenhouse 2',\r\n      parameters: {\r\n        speed: 2,\r\n        max_speed: 5,\r\n        direction: 'forward',\r\n        auto_trigger_temp: 28\r\n      }\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Greenhouse 1 Lighting System',\r\n      type: 'lighting',\r\n      location: 'Greenhouse 1',\r\n      status: 'on',\r\n      mode: 'auto',\r\n      is_active: true,\r\n      mqtt_topic: 'farm/actuators/lighting/1',\r\n      created_at: '2023-10-01T08:00:00Z',\r\n      updated_at: '2023-11-15T10:30:00Z',\r\n      description: 'Main lighting system for Greenhouse 1',\r\n      parameters: {\r\n        brightness: 80,\r\n        color_temp: 4000,\r\n        schedule_on: '06:00',\r\n        schedule_off: '20:00'\r\n      }\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'Greenhouse 3 Humidifier',\r\n      type: 'humidifier',\r\n      location: 'Greenhouse 3',\r\n      status: 'off',\r\n      mode: 'manual',\r\n      is_active: false,\r\n      mqtt_topic: 'farm/actuators/humidifier/1',\r\n      created_at: '2023-10-01T08:00:00Z',\r\n      updated_at: '2023-11-15T10:30:00Z',\r\n      description: 'Main humidifier for Greenhouse 3',\r\n      parameters: {\r\n        capacity: 5,\r\n        auto_trigger_humidity: 40,\r\n        auto_stop_humidity: 60\r\n      }\r\n    }\r\n  ],\r\n  logs: []\r\n};\r\n\r\n// Helper function to update actuator in mock database\r\nconst updateActuatorInDatabase = (id, updates) => {\r\n  const index = mockActuatorDatabase.actuators.findIndex(a => a.id === parseInt(id));\r\n  if (index !== -1) {\r\n    const updatedActuator = {\r\n      ...mockActuatorDatabase.actuators[index],\r\n      ...updates,\r\n      updated_at: new Date().toISOString()\r\n    };\r\n    mockActuatorDatabase.actuators[index] = updatedActuator;\r\n    console.log(`执行器 ${id} 已更新:`, updatedActuator);\r\n    return updatedActuator;\r\n  }\r\n  return null;\r\n};\r\n\r\n// Helper function to add a log to the mock database\r\nconst addLogToDatabase = (actuatorId, status, message, source = 'web', user = 'admin') => {\r\n  const newLog = {\r\n    id: mockActuatorDatabase.logs.length + 1,\r\n    actuator_id: parseInt(actuatorId),\r\n    timestamp: new Date().toISOString(),\r\n    status,\r\n    message,\r\n    user,\r\n    source\r\n  };\r\n  mockActuatorDatabase.logs.unshift(newLog); // Add to beginning of array\r\n  console.log(`执行器 ${actuatorId} 添加日志:`, newLog);\r\n  return newLog;\r\n};\r\n\r\n// Create common API call method\r\nconst apiCall = async (endpoint, method = 'GET', data = null) => {\r\n  // 确保endpoint以/开头，并且以/结尾，避免308重定向问题\r\n  let normalizedEndpoint = endpoint.startsWith('/') ? endpoint : `/${endpoint}`;\r\n  normalizedEndpoint = normalizedEndpoint.endsWith('/') ? normalizedEndpoint : `${normalizedEndpoint}/`;\r\n  \r\n  const url = `${API_URL}${normalizedEndpoint}`;\r\n  \r\n  console.log(`调用API: ${url}`); // 调试用\r\n  \r\n  const options = {\r\n    method,\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    // 添加重定向跟随\r\n    redirect: 'follow'\r\n  };\r\n\r\n  // Add authorization token\r\n  const token = localStorage.getItem(TOKEN_KEY);\r\n  if (token) {\r\n    options.headers['Authorization'] = `Bearer ${token}`;\r\n  }\r\n\r\n  // Add request body data\r\n  if (data) {\r\n    options.body = JSON.stringify(data);\r\n  }\r\n\r\n  try {\r\n    // Use real API instead of mock response\r\n    const response = await fetch(url, options);\r\n    \r\n    // 检查是否有重定向\r\n    if (response.redirected) {\r\n      console.log(`API重定向: ${response.url}`);\r\n    }\r\n    \r\n    const result = await response.json();\r\n    \r\n    console.log(`API响应: ${normalizedEndpoint}`, result);  // 添加日志以调试\r\n    \r\n    // 直接返回后端的响应结果，不需要额外处理\r\n    return result;\r\n  } catch (error) {\r\n    console.error('API调用错误:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Mock API response - Keep for reference but not used\r\nconst mockApiResponse = (endpoint, method, data) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      // Return mock data based on different endpoints\r\n      if (endpoint.startsWith('/dashboard') && method === 'GET') {\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            data: {\r\n              sensors: {\r\n                total: 12,\r\n                active: 10,\r\n                latest_readings: {\r\n                  temperature: {\r\n                    value: 24.5,\r\n                    unit: '°C',\r\n                    sensor_location: 'Greenhouse 1',\r\n                    timestamp: new Date().toISOString()\r\n                  },\r\n                  humidity: {\r\n                    value: 65,\r\n                    unit: '%',\r\n                    sensor_location: 'Greenhouse 1',\r\n                    timestamp: new Date().toISOString()\r\n                  },\r\n                  light: {\r\n                    value: 3500,\r\n                    unit: 'lux',\r\n                    sensor_location: 'Greenhouse 2',\r\n                    timestamp: new Date().toISOString()\r\n                  },\r\n                  soil_moisture: {\r\n                    value: 42,\r\n                    unit: '%',\r\n                    sensor_location: 'Greenhouse 1',\r\n                    timestamp: new Date().toISOString()\r\n                  }\r\n                }\r\n              },\r\n              actuators: {\r\n                total: 8,\r\n                active: 6,\r\n                statuses: {\r\n                  irrigation: { on: 1, off: 2, error: 0 },\r\n                  ventilation: { on: 2, off: 1, error: 0 },\r\n                  lighting: { on: 1, off: 1, error: 0 },\r\n                  heating: { on: 0, off: 1, error: 0 }\r\n                }\r\n              },\r\n              alerts: {\r\n                total: 5,\r\n                unread: 2,\r\n                recent: [\r\n                  {\r\n                    id: 1,\r\n                    type: 'temperature',\r\n                    message: 'Greenhouse 1 temperature above threshold (30°C)',\r\n                    created_at: new Date(Date.now() - 10 * 60000).toISOString(),\r\n                    is_read: false\r\n                  },\r\n                  {\r\n                    id: 2,\r\n                    type: 'actuator',\r\n                    message: 'Greenhouse 2 irrigation system started',\r\n                    created_at: new Date(Date.now() - 30 * 60000).toISOString(),\r\n                    is_read: true\r\n                  }\r\n                ]\r\n              }\r\n            }\r\n          }\r\n        });\r\n      } \r\n      // Mock get all actuators\r\n      else if (endpoint === '/actuators' && method === 'GET') {\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            data: [\r\n              {\r\n                id: 1,\r\n                name: 'Greenhouse 1 Irrigation System',\r\n                type: 'irrigation',\r\n                location: 'Greenhouse 1',\r\n                status: 'off',\r\n                mode: 'manual',\r\n                is_active: true,\r\n                mqtt_topic: 'farm/actuators/irrigation/1',\r\n                created_at: '2023-10-01T08:00:00Z',\r\n                updated_at: '2023-11-15T10:30:00Z',\r\n                last_control_time: '2023-11-14T14:20:00Z'\r\n              },\r\n              {\r\n                id: 2,\r\n                name: 'Greenhouse 2 Ventilation Fan',\r\n                type: 'fan',\r\n                location: 'Greenhouse 2',\r\n                status: 'low',\r\n                mode: 'auto',\r\n                is_active: true,\r\n                mqtt_topic: 'farm/actuators/fan/2',\r\n                created_at: '2023-10-01T08:00:00Z',\r\n                updated_at: '2023-11-15T10:30:00Z',\r\n                parameters: {\r\n                  speed: 2,\r\n                  max_speed: 5,\r\n                  direction: 'forward'\r\n                }\r\n              },\r\n              {\r\n                id: 3,\r\n                name: 'Greenhouse 1 Lighting System',\r\n                type: 'lighting',\r\n                location: 'Greenhouse 1',\r\n                status: 'on',\r\n                mode: 'auto',\r\n                is_active: true,\r\n                mqtt_topic: 'farm/actuators/lighting/1',\r\n                created_at: '2023-10-01T08:00:00Z',\r\n                updated_at: '2023-11-15T10:30:00Z',\r\n                parameters: {\r\n                  brightness: 80,\r\n                  color_temp: 4000\r\n                }\r\n              },\r\n              {\r\n                id: 4,\r\n                name: 'Greenhouse 3 Humidifier',\r\n                type: 'humidifier',\r\n                location: 'Greenhouse 3',\r\n                status: 'off',\r\n                mode: 'manual',\r\n                is_active: false,\r\n                mqtt_topic: 'farm/actuators/humidifier/1',\r\n                created_at: '2023-10-01T08:00:00Z',\r\n                updated_at: '2023-11-15T10:30:00Z'\r\n              }\r\n            ]\r\n          }\r\n        });\r\n      }\r\n      // Mock get all sensors\r\n      else if (endpoint === '/sensors' && method === 'GET') {\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            data: [\r\n              {\r\n                id: 1,\r\n                name: 'Temperature Sensor 1',\r\n                type: 'temperature',\r\n                location: 'Greenhouse 1',\r\n                status: 'active',\r\n                last_reading: {\r\n                  value: 24.5,\r\n                  unit: '°C',\r\n                  timestamp: new Date().toISOString()\r\n                }\r\n              },\r\n              {\r\n                id: 2,\r\n                name: 'Humidity Sensor 1',\r\n                type: 'humidity',\r\n                location: 'Greenhouse 1',\r\n                status: 'active',\r\n                last_reading: {\r\n                  value: 65,\r\n                  unit: '%',\r\n                  timestamp: new Date().toISOString()\r\n                }\r\n              },\r\n              {\r\n                id: 3,\r\n                name: 'Light Sensor 1',\r\n                type: 'light',\r\n                location: 'Greenhouse 2',\r\n                status: 'active',\r\n                last_reading: {\r\n                  value: 3500,\r\n                  unit: 'lux',\r\n                  timestamp: new Date().toISOString()\r\n                }\r\n              },\r\n              {\r\n                id: 4,\r\n                name: 'Soil Moisture Sensor 1',\r\n                type: 'soil_moisture',\r\n                location: 'Greenhouse 1',\r\n                status: 'inactive',\r\n                last_reading: {\r\n                  value: 42,\r\n                  unit: '%',\r\n                  timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        });\r\n      }\r\n      // Mock get single sensor\r\n      else if (endpoint.match(/\\/sensors\\/\\d+$/) && method === 'GET') {\r\n        const id = parseInt(endpoint.split('/').pop());\r\n        let sensor = {};\r\n\r\n        switch(id) {\r\n          case 1:\r\n            sensor = {\r\n              id: 1,\r\n              name: 'Temperature Sensor 1',\r\n              type: 'temperature',\r\n              location: 'Greenhouse 1',\r\n              status: 'active',\r\n              description: 'Primary temperature sensor for monitoring greenhouse conditions.',\r\n              mqtt_topic: 'farm/sensors/temperature/1',\r\n              created_at: '2023-10-01T08:00:00Z',\r\n              updated_at: '2023-11-15T10:30:00Z',\r\n              model: 'DHT22',\r\n              manufacturer: 'Acme Sensors',\r\n              calibration_date: '2023-09-15T00:00:00Z',\r\n              last_reading: {\r\n                value: 24.5,\r\n                unit: '°C',\r\n                timestamp: new Date().toISOString()\r\n              },\r\n              history: [\r\n                { timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(), value: 24.5 },\r\n                { timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), value: 25.1 },\r\n                { timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(), value: 25.4 },\r\n                { timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(), value: 25.8 },\r\n                { timestamp: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(), value: 26.2 },\r\n                { timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(), value: 26.5 }\r\n              ]\r\n            };\r\n            break;\r\n          case 2:\r\n            sensor = {\r\n              id: 2,\r\n              name: 'Humidity Sensor 1',\r\n              type: 'humidity',\r\n              location: 'Greenhouse 1',\r\n              status: 'active',\r\n              description: 'Primary humidity sensor for monitoring greenhouse conditions.',\r\n              mqtt_topic: 'farm/sensors/humidity/1',\r\n              created_at: '2023-10-01T08:00:00Z',\r\n              updated_at: '2023-11-15T10:30:00Z',\r\n              model: 'DHT22',\r\n              manufacturer: 'Acme Sensors',\r\n              calibration_date: '2023-09-15T00:00:00Z',\r\n              last_reading: {\r\n                value: 65,\r\n                unit: '%',\r\n                timestamp: new Date().toISOString()\r\n              },\r\n              history: [\r\n                { timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(), value: 65 },\r\n                { timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), value: 64 },\r\n                { timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(), value: 63 },\r\n                { timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(), value: 62 },\r\n                { timestamp: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(), value: 60 },\r\n                { timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(), value: 59 }\r\n              ]\r\n            };\r\n            break;\r\n          case 3:\r\n            sensor = {\r\n              id: 3,\r\n              name: 'Light Sensor 1',\r\n              type: 'light',\r\n              location: 'Greenhouse 2',\r\n              status: 'active',\r\n              description: 'Light sensor for monitoring lighting conditions.',\r\n              mqtt_topic: 'farm/sensors/light/1',\r\n              created_at: '2023-10-01T08:00:00Z',\r\n              updated_at: '2023-11-15T10:30:00Z',\r\n              model: 'BH1750',\r\n              manufacturer: 'Acme Sensors',\r\n              calibration_date: '2023-09-15T00:00:00Z',\r\n              last_reading: {\r\n                value: 3500,\r\n                unit: 'lux',\r\n                timestamp: new Date().toISOString()\r\n              },\r\n              history: [\r\n                { timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(), value: 3500 },\r\n                { timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), value: 3200 },\r\n                { timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(), value: 2900 },\r\n                { timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(), value: 2500 },\r\n                { timestamp: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(), value: 2000 },\r\n                { timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(), value: 1500 }\r\n              ]\r\n            };\r\n            break;\r\n          case 4:\r\n            sensor = {\r\n              id: 4,\r\n              name: 'Soil Moisture Sensor 1',\r\n              type: 'soil_moisture',\r\n              location: 'Greenhouse 1',\r\n              status: 'inactive',\r\n              description: 'Soil moisture sensor for monitoring soil conditions.',\r\n              mqtt_topic: 'farm/sensors/soil_moisture/1',\r\n              created_at: '2023-10-01T08:00:00Z',\r\n              updated_at: '2023-11-15T10:30:00Z',\r\n              model: 'YL-69',\r\n              manufacturer: 'Acme Sensors',\r\n              calibration_date: '2023-09-15T00:00:00Z',\r\n              last_reading: {\r\n                value: 42,\r\n                unit: '%',\r\n                timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\r\n              },\r\n              history: [\r\n                { timestamp: new Date(Date.now() - 25 * 60 * 60 * 1000).toISOString(), value: 42 },\r\n                { timestamp: new Date(Date.now() - 26 * 60 * 60 * 1000).toISOString(), value: 43 },\r\n                { timestamp: new Date(Date.now() - 27 * 60 * 60 * 1000).toISOString(), value: 44 },\r\n                { timestamp: new Date(Date.now() - 28 * 60 * 60 * 1000).toISOString(), value: 45 },\r\n                { timestamp: new Date(Date.now() - 29 * 60 * 60 * 1000).toISOString(), value: 46 },\r\n                { timestamp: new Date(Date.now() - 30 * 60 * 60 * 1000).toISOString(), value: 47 }\r\n              ]\r\n            };\r\n            break;\r\n          default:\r\n            sensor = null;\r\n        }\r\n\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            data: sensor\r\n          }\r\n        });\r\n      }\r\n      // Mock get actuator operation logs\r\n      else if (endpoint.match(/\\/actuators\\/\\d+\\/logs$/) && method === 'GET') {\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            data: [\r\n              {\r\n                id: 1,\r\n                actuator_id: parseInt(endpoint.split('/')[2]),\r\n                timestamp: new Date(Date.now() - 1000 * 60 * 5).toISOString(),\r\n                status: 'on',\r\n                message: 'Manual activation of actuator',\r\n                user: 'admin',\r\n                source: 'web'\r\n              },\r\n              {\r\n                id: 2,\r\n                actuator_id: parseInt(endpoint.split('/')[2]),\r\n                timestamp: new Date(Date.now() - 1000 * 60 * 60).toISOString(),\r\n                status: 'off',\r\n                message: 'Actuator turned off by automatic rule',\r\n                user: 'system',\r\n                source: 'rule'\r\n              },\r\n              {\r\n                id: 3,\r\n                actuator_id: parseInt(endpoint.split('/')[2]),\r\n                timestamp: new Date(Date.now() - 1000 * 60 * 60 * 12).toISOString(),\r\n                status: 'on',\r\n                message: 'Adjusted actuator parameters',\r\n                user: 'admin',\r\n                source: 'api'\r\n              }\r\n            ]\r\n          }\r\n        });\r\n      }\r\n      // Mock get actuator allowed statuses\r\n      else if (endpoint.match(/\\/actuators\\/\\d+\\/statuses$/) && method === 'GET') {\r\n        const id = parseInt(endpoint.split('/')[2]);\r\n        let statuses = [];\r\n        \r\n        switch(id) {\r\n          case 1: // Irrigation\r\n            statuses = ['on', 'off'];\r\n            break;\r\n          case 2: // Fan\r\n            statuses = ['off', 'low', 'medium', 'high'];\r\n            break;\r\n          case 3: // Lighting\r\n            statuses = ['on', 'off', 'dim'];\r\n            break;\r\n          case 4: // Humidifier\r\n            statuses = ['on', 'off', 'auto'];\r\n            break;\r\n          default:\r\n            statuses = ['on', 'off'];\r\n        }\r\n        \r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            data: statuses\r\n          }\r\n        });\r\n      }\r\n      // Mock control actuator\r\n      else if (endpoint.match(/\\/actuators\\/\\d+\\/control$/) && method === 'POST') {\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            message: 'Operation successful',\r\n            data: {\r\n              ...data,\r\n              timestamp: new Date().toISOString()\r\n            }\r\n          }\r\n        });\r\n      }\r\n      // Mock update actuator\r\n      else if (endpoint.match(/\\/actuators\\/\\d+$/) && method === 'PUT') {\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            message: 'Update successful',\r\n            data: {\r\n              ...data,\r\n              updated_at: new Date().toISOString()\r\n            }\r\n          }\r\n        });\r\n      }\r\n      // Mock update actuator auto rules\r\n      else if (endpoint.match(/\\/actuators\\/\\d+\\/rules$/) && method === 'PUT') {\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            message: 'Rule update successful',\r\n            data: {\r\n              ...data,\r\n              updated_at: new Date().toISOString()\r\n            }\r\n          }\r\n        });\r\n      }\r\n      // Mock update actuator parameters\r\n      else if (endpoint.match(/\\/actuators\\/\\d+\\/parameters$/) && method === 'PUT') {\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            message: 'Parameter update successful',\r\n            data: {\r\n              ...data,\r\n              updated_at: new Date().toISOString()\r\n            }\r\n          }\r\n        });\r\n      }\r\n      // Mock register user\r\n      else if (endpoint === '/users/register' && method === 'POST') {\r\n        // 模拟用户注册\r\n        if (!data.username || !data.email || !data.password) {\r\n          resolve({\r\n            data: {\r\n              success: false,\r\n              message: 'Missing required fields',\r\n            },\r\n            status: 400\r\n          });\r\n          return;\r\n        }\r\n        \r\n        // 模拟检查用户名是否已存在\r\n        if (data.username === 'admin' || data.username === 'user1') {\r\n          resolve({\r\n            data: {\r\n              success: false,\r\n              message: `Username ${data.username} is already taken`,\r\n            },\r\n            status: 409\r\n          });\r\n          return;\r\n        }\r\n        \r\n        // 模拟检查邮箱是否已存在\r\n        if (data.email === 'admin@smartfarm.com' || data.email === 'user1@smartfarm.com') {\r\n          resolve({\r\n            data: {\r\n              success: false,\r\n              message: `Email ${data.email} is already registered`,\r\n            },\r\n            status: 409\r\n          });\r\n          return;\r\n        }\r\n        \r\n        // 注册成功\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            message: 'User registered successfully',\r\n            data: {\r\n              id: Math.floor(Math.random() * 1000) + 10,\r\n              username: data.username,\r\n              email: data.email,\r\n              role: 'user',\r\n              is_active: true,\r\n              created_at: new Date().toISOString(),\r\n              updated_at: new Date().toISOString()\r\n            }\r\n          },\r\n          status: 201\r\n        });\r\n      }\r\n      // Mock login user\r\n      else if (endpoint === '/users/login' && method === 'POST') {\r\n        // 模拟用户登录\r\n        if (!data.email || !data.password) {\r\n          resolve({\r\n            data: {\r\n              success: false,\r\n              message: 'Missing required fields',\r\n            },\r\n            status: 400\r\n          });\r\n          return;\r\n        }\r\n        \r\n        // 检查测试账户\r\n        if ((data.email === 'admin@smartfarm.com' && data.password === 'password123') || \r\n            (data.email === 'user1@smartfarm.com' && data.password === 'password123') ||\r\n            data.password === 'password123') {  // 任何email只要密码对都通过\r\n          const isAdmin = data.email === 'admin@smartfarm.com';\r\n          const isUser = data.email === 'user1@smartfarm.com';\r\n          \r\n          resolve({\r\n            data: {\r\n              success: true,\r\n              message: 'Login successful',\r\n              data: {\r\n                user: {\r\n                  id: isAdmin ? 1 : (isUser ? 2 : 999),\r\n                  username: isAdmin ? 'admin' : (isUser ? 'user1' : data.email.split('@')[0]),\r\n                  email: data.email,\r\n                  role: isAdmin ? 'admin' : 'user',\r\n                  is_active: true,\r\n                  last_login: new Date().toISOString(),\r\n                  created_at: '2023-01-01T00:00:00Z',\r\n                  updated_at: new Date().toISOString()\r\n                },\r\n                token: 'mock-jwt-token-' + Math.random().toString(36).substring(2)\r\n              }\r\n            },\r\n            status: 200\r\n          });\r\n        } else {\r\n          resolve({\r\n            data: {\r\n              success: false,\r\n              message: 'Invalid email or password',\r\n            },\r\n            status: 401\r\n          });\r\n        }\r\n      }\r\n      // Other endpoints can be added as needed\r\n      else {\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            message: 'Operation completed',\r\n            data: null\r\n          }\r\n        });\r\n      }\r\n    }, 500); // Simulate network delay\r\n  });\r\n};\r\n\r\n// Export API services with corrected endpoint paths\r\nexport const authAPI = {\r\n  login: (data) => apiCall('/users/login', 'POST', data),\r\n  register: (data) => apiCall('/users/register', 'POST', data),\r\n  getProfile: () => apiCall('/users/profile'),\r\n  updateProfile: (data) => apiCall('/users/profile', 'PUT', data),\r\n  changePassword: (data) => apiCall('/users/change-password', 'POST', data),\r\n};\r\n\r\nexport const dashboardAPI = {\r\n  getSummary: () => {\r\n    // Use mock data for dashboard summary to avoid API issues\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          success: true,\r\n          data: {\r\n            sensors: {\r\n              total: 12,\r\n              active: 10,\r\n              latest_readings: {\r\n                temperature: {\r\n                  value: 24.5,\r\n                  unit: '°C',\r\n                  sensor_location: 'Greenhouse 1',\r\n                  timestamp: new Date().toISOString()\r\n                },\r\n                humidity: {\r\n                  value: 65,\r\n                  unit: '%',\r\n                  sensor_location: 'Greenhouse 1',\r\n                  timestamp: new Date().toISOString()\r\n                },\r\n                light: {\r\n                  value: 3500,\r\n                  unit: 'lux',\r\n                  sensor_location: 'Greenhouse 2',\r\n                  timestamp: new Date().toISOString()\r\n                },\r\n                soil_moisture: {\r\n                  value: 42,\r\n                  unit: '%',\r\n                  sensor_location: 'Greenhouse 1',\r\n                  timestamp: new Date().toISOString()\r\n                }\r\n              }\r\n            },\r\n            actuators: {\r\n              total: 8,\r\n              active: 6,\r\n              statuses: {\r\n                irrigation: { on: 1, off: 2, error: 0 },\r\n                ventilation: { on: 2, off: 1, error: 0 },\r\n                lighting: { on: 1, off: 1, error: 0 },\r\n                heating: { on: 0, off: 1, error: 0 }\r\n              }\r\n            },\r\n            alerts: {\r\n              total: 5,\r\n              unread: 2,\r\n              recent: [\r\n                {\r\n                  id: 1,\r\n                  type: 'temperature',\r\n                  message: 'Greenhouse 1 temperature above threshold (30°C)',\r\n                  created_at: new Date(Date.now() - 10 * 60000).toISOString(),\r\n                  is_read: false\r\n                },\r\n                {\r\n                  id: 2,\r\n                  type: 'actuator',\r\n                  message: 'Greenhouse 2 irrigation system started',\r\n                  created_at: new Date(Date.now() - 30 * 60000).toISOString(),\r\n                  is_read: true\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        });\r\n      }, 500); // Simulate network delay\r\n    });\r\n  },\r\n};\r\n\r\nexport const sensorAPI = {\r\n  getAllSensors: () => {\r\n    // Use mock data for sensors to avoid API issues\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          success: true,\r\n          data: [\r\n            {\r\n              id: 1,\r\n              name: 'Temperature Sensor 1',\r\n              type: 'temperature',\r\n              location: 'Greenhouse 1',\r\n              status: 'active',\r\n              last_reading: {\r\n                value: 24.5,\r\n                unit: '°C',\r\n                timestamp: new Date().toISOString()\r\n              }\r\n            },\r\n            {\r\n              id: 2,\r\n              name: 'Humidity Sensor 1',\r\n              type: 'humidity',\r\n              location: 'Greenhouse 1',\r\n              status: 'active',\r\n              last_reading: {\r\n                value: 65,\r\n                unit: '%',\r\n                timestamp: new Date().toISOString()\r\n              }\r\n            },\r\n            {\r\n              id: 3,\r\n              name: 'Light Sensor 1',\r\n              type: 'light',\r\n              location: 'Greenhouse 2',\r\n              status: 'active',\r\n              last_reading: {\r\n                value: 3500,\r\n                unit: 'lux',\r\n                timestamp: new Date().toISOString()\r\n              }\r\n            },\r\n            {\r\n              id: 4,\r\n              name: 'Soil Moisture Sensor 1',\r\n              type: 'soil_moisture',\r\n              location: 'Greenhouse 1',\r\n              status: 'inactive',\r\n              last_reading: {\r\n                value: 42,\r\n                unit: '%',\r\n                timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\r\n              }\r\n            }\r\n          ]\r\n        });\r\n      }, 500); // Simulate network delay\r\n    });\r\n  },\r\n  getSensor: (id) => apiCall(`/sensors/${id}`),\r\n  getSensorData: (id, timeRange) => apiCall(`/sensors/${id}/data?timeRange=${timeRange}`),\r\n  updateSensor: (id, data) => apiCall(`/sensors/${id}`, 'PUT', data),\r\n  calibrateSensor: (id, data) => apiCall(`/sensors/${id}/calibrate`, 'POST', data),\r\n};\r\n\r\nexport const actuatorAPI = {\r\n  getAllActuators: () => {\r\n    // Use mock data for actuators from the mock database\r\n    console.log('获取所有执行器列表');\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          success: true,\r\n          data: mockActuatorDatabase.actuators\r\n        });\r\n      }, 500); // Simulate network delay\r\n    });\r\n  },\r\n  getActuator: (id) => {\r\n    // Use mock data for actuator details from the mock database\r\n    console.log(`获取执行器详情, ID: ${id}`);\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const actuator = mockActuatorDatabase.actuators.find(a => a.id === parseInt(id)) || {\r\n          id: parseInt(id),\r\n          name: `Unknown Actuator ${id}`,\r\n          type: 'unknown',\r\n          location: 'Unknown',\r\n          status: 'error',\r\n          mode: 'manual',\r\n          is_active: false,\r\n          mqtt_topic: `farm/actuators/unknown/${id}`,\r\n          created_at: '2023-10-01T08:00:00Z',\r\n          updated_at: '2023-11-15T10:30:00Z'\r\n        };\r\n        \r\n        resolve({\r\n          success: true,\r\n          data: actuator\r\n        });\r\n      }, 500); // Simulate network delay\r\n    });\r\n  },\r\n  getActuatorLogs: (id) => {\r\n    // Get logs for specific actuator from mock database\r\n    console.log(`获取执行器日志, ID: ${id}`);\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const logs = mockActuatorDatabase.logs\r\n          .filter(log => log.actuator_id === parseInt(id))\r\n          .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\r\n          \r\n        if (logs.length === 0) {\r\n          // If no logs exist yet, return some default ones\r\n          logs.push(\r\n            {\r\n              id: 1,\r\n              actuator_id: parseInt(id),\r\n              timestamp: new Date(Date.now() - 1000 * 60 * 5).toISOString(),\r\n              status: 'on',\r\n              message: 'Manual activation of actuator',\r\n              user: 'admin',\r\n              source: 'web'\r\n            },\r\n            {\r\n              id: 2,\r\n              actuator_id: parseInt(id),\r\n              timestamp: new Date(Date.now() - 1000 * 60 * 60).toISOString(),\r\n              status: 'off',\r\n              message: 'Actuator turned off by automatic rule',\r\n              user: 'system',\r\n              source: 'rule'\r\n            }\r\n          );\r\n        }\r\n        \r\n        resolve({\r\n          success: true,\r\n          data: logs\r\n        });\r\n      }, 500); // Simulate network delay\r\n    });\r\n  },\r\n  getActuatorStatuses: (id) => {\r\n    // Return available statuses based on actuator type\r\n    console.log(`获取执行器状态选项, ID: ${id}`);\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const actuator = mockActuatorDatabase.actuators.find(a => a.id === parseInt(id));\r\n        let statuses = ['on', 'off']; // Default statuses\r\n        \r\n        if (actuator) {\r\n          switch(actuator.type) {\r\n            case 'fan':\r\n              statuses = ['off', 'low', 'medium', 'high'];\r\n              break;\r\n            case 'lighting':\r\n              statuses = ['on', 'off', 'dim'];\r\n              break;\r\n            case 'humidifier':\r\n              statuses = ['on', 'off', 'auto'];\r\n              break;\r\n            case 'curtain':\r\n              statuses = ['open', 'closed', 'half'];\r\n              break;\r\n          }\r\n        }\r\n        \r\n        resolve({\r\n          success: true,\r\n          data: statuses\r\n        });\r\n      }, 500); // Simulate network delay\r\n    });\r\n  },\r\n  controlActuator: (id, data) => {\r\n    // Update actuator status in mock database\r\n    console.log(`控制执行器, ID: ${id}, 操作: ${JSON.stringify(data)}`);\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        // Get the action from the data\r\n        const action = data.action;\r\n        \r\n        // Update the actuator in the database\r\n        const updatedActuator = updateActuatorInDatabase(id, {\r\n          status: action,\r\n          last_control_time: new Date().toISOString()\r\n        });\r\n        \r\n        // Add a log entry\r\n        const log = addLogToDatabase(\r\n          id, \r\n          action, \r\n          `Actuator ${action === 'on' ? 'turned on' : 'turned off'} manually`\r\n        );\r\n        \r\n        resolve({\r\n          success: true,\r\n          message: 'Operation successful',\r\n          data: {\r\n            actuator: updatedActuator,\r\n            log: log\r\n          }\r\n        });\r\n      }, 500); // Simulate network delay\r\n    });\r\n  },\r\n  updateActuator: (id, data) => {\r\n    // Update actuator properties in mock database\r\n    console.log(`更新执行器, ID: ${id}, 数据: ${JSON.stringify(data)}`);\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const updatedActuator = updateActuatorInDatabase(id, data);\r\n        \r\n        if (updatedActuator) {\r\n          addLogToDatabase(\r\n            id, \r\n            updatedActuator.status, \r\n            'Actuator settings updated'\r\n          );\r\n          \r\n          resolve({\r\n            success: true,\r\n            message: 'Update successful',\r\n            data: updatedActuator\r\n          });\r\n        } else {\r\n          resolve({\r\n            success: false,\r\n            message: `Actuator with ID ${id} not found`,\r\n          });\r\n        }\r\n      }, 500); // Simulate network delay\r\n    });\r\n  },\r\n  updateActuatorRules: (id, data) => {\r\n    // Update actuator rules in mock database\r\n    console.log(`更新执行器规则, ID: ${id}, 规则: ${JSON.stringify(data)}`);\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const actuator = mockActuatorDatabase.actuators.find(a => a.id === parseInt(id));\r\n        \r\n        if (actuator) {\r\n          const updatedActuator = updateActuatorInDatabase(id, {\r\n            rules: data\r\n          });\r\n          \r\n          addLogToDatabase(\r\n            id, \r\n            actuator.status, \r\n            'Actuator automation rules updated'\r\n          );\r\n          \r\n          resolve({\r\n            success: true,\r\n            message: 'Rules updated successfully',\r\n            data: updatedActuator\r\n          });\r\n        } else {\r\n          resolve({\r\n            success: false,\r\n            message: `Actuator with ID ${id} not found`,\r\n          });\r\n        }\r\n      }, 500); // Simulate network delay\r\n    });\r\n  },\r\n  updateActuatorParameters: (id, data) => {\r\n    // Update actuator parameters in mock database\r\n    console.log(`更新执行器参数, ID: ${id}, 参数: ${JSON.stringify(data)}`);\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const actuator = mockActuatorDatabase.actuators.find(a => a.id === parseInt(id));\r\n        \r\n        if (actuator) {\r\n          const updatedActuator = updateActuatorInDatabase(id, {\r\n            parameters: {\r\n              ...actuator.parameters,\r\n              ...data\r\n            }\r\n          });\r\n          \r\n          addLogToDatabase(\r\n            id, \r\n            actuator.status, \r\n            'Actuator parameters updated'\r\n          );\r\n          \r\n          resolve({\r\n            success: true,\r\n            message: 'Parameters updated successfully',\r\n            data: updatedActuator\r\n          });\r\n        } else {\r\n          resolve({\r\n            success: false,\r\n            message: `Actuator with ID ${id} not found`,\r\n          });\r\n        }\r\n      }, 500); // Simulate network delay\r\n    });\r\n  },\r\n};\r\n\r\nexport const alertAPI = {\r\n  getAlerts: (page = 1, limit = 10) => apiCall(`/alerts?page=${page}&limit=${limit}`),\r\n  markAsRead: (id) => apiCall(`/alerts/${id}/read`, 'POST'),\r\n  markAllAsRead: () => apiCall('/alerts/read-all', 'POST'),\r\n  deleteAlert: (id) => apiCall(`/alerts/${id}`, 'DELETE'),\r\n  getAlertSettings: () => apiCall('/alerts/settings'),\r\n  updateAlertSettings: (data) => apiCall('/alerts/settings', 'PUT', data),\r\n};\r\n\r\nexport const analyticsAPI = {\r\n  getSensorStats: (timeRange) => apiCall(`/analytics/sensors?timeRange=${timeRange}`),\r\n  getActuatorStats: (timeRange) => apiCall(`/analytics/actuators?timeRange=${timeRange}`),\r\n  getCorrelationData: (sensors, timeRange) => apiCall(`/analytics/correlation?sensors=${sensors.join(',')}&timeRange=${timeRange}`),\r\n  getEnergyUsage: (timeRange) => apiCall(`/analytics/energy?timeRange=${timeRange}`),\r\n  getYieldData: (timeRange) => apiCall(`/analytics/yield?timeRange=${timeRange}`),\r\n};\r\n\r\nexport const settingsAPI = {\r\n  getSystemSettings: () => apiCall('/settings/system'),\r\n  updateSystemSettings: (data) => apiCall('/settings/system', 'PUT', data),\r\n  getNotificationSettings: () => apiCall('/settings/notifications'),\r\n  updateNotificationSettings: (data) => apiCall('/settings/notifications', 'PUT', data),\r\n  getBackupSettings: () => apiCall('/settings/backup'),\r\n  updateBackupSettings: (data) => apiCall('/settings/backup', 'PUT', data),\r\n  backupNow: () => apiCall('/settings/backup/now', 'POST'),\r\n  restoreBackup: (id) => apiCall(`/settings/backup/restore/${id}`, 'POST'),\r\n  getDeviceSettings: () => apiCall('/settings/devices'),\r\n  updateDeviceSettings: (data) => apiCall('/settings/devices', 'PUT', data),\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}