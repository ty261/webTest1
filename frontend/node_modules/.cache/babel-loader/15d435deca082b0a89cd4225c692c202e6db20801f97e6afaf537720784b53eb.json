{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDefaultBaseline = getDefaultBaseline;\nexports.getDefaultTextAnchor = getDefaultTextAnchor;\nvar _clampAngle = require(\"../internals/clampAngle\");\n/**\n * Provide the text-anchor based on the angle between the text and the associated element.\n * - 0 means the element is on top of the text, 180 bellow, and 90 on the right of the text.\n * @param {number} angle The angle between the text and the element.\n * @returns\n */\nfunction getDefaultTextAnchor(angle) {\n  const adjustedAngle = (0, _clampAngle.clampAngle)(angle);\n  if (adjustedAngle <= 30 || adjustedAngle >= 330) {\n    // +/-30° around 0°\n    return 'middle';\n  }\n  if (adjustedAngle <= 210 && adjustedAngle >= 150) {\n    // +/-30° around 180°\n    return 'middle';\n  }\n  if (adjustedAngle <= 180) {\n    return 'end';\n  }\n  return 'start';\n}\nfunction getDefaultBaseline(angle) {\n  const adjustedAngle = (0, _clampAngle.clampAngle)(angle);\n  if (adjustedAngle <= 30 || adjustedAngle >= 330) {\n    // +/-60° around 0°\n    return 'hanging';\n  }\n  if (adjustedAngle <= 210 && adjustedAngle >= 150) {\n    // +/-60° around 180°\n    return 'auto';\n  }\n  return 'central';\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","getDefaultBaseline","getDefaultTextAnchor","_clampAngle","require","angle","adjustedAngle","clampAngle"],"sources":["C:/Users/LIJIN/Desktop/webTest/Bak/webTest/frontend/node_modules/@mui/x-charts/ChartsText/defaultTextPlacement.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDefaultBaseline = getDefaultBaseline;\nexports.getDefaultTextAnchor = getDefaultTextAnchor;\nvar _clampAngle = require(\"../internals/clampAngle\");\n/**\n * Provide the text-anchor based on the angle between the text and the associated element.\n * - 0 means the element is on top of the text, 180 bellow, and 90 on the right of the text.\n * @param {number} angle The angle between the text and the element.\n * @returns\n */\nfunction getDefaultTextAnchor(angle) {\n  const adjustedAngle = (0, _clampAngle.clampAngle)(angle);\n  if (adjustedAngle <= 30 || adjustedAngle >= 330) {\n    // +/-30° around 0°\n    return 'middle';\n  }\n  if (adjustedAngle <= 210 && adjustedAngle >= 150) {\n    // +/-30° around 180°\n    return 'middle';\n  }\n  if (adjustedAngle <= 180) {\n    return 'end';\n  }\n  return 'start';\n}\nfunction getDefaultBaseline(angle) {\n  const adjustedAngle = (0, _clampAngle.clampAngle)(angle);\n  if (adjustedAngle <= 30 || adjustedAngle >= 330) {\n    // +/-60° around 0°\n    return 'hanging';\n  }\n  if (adjustedAngle <= 210 && adjustedAngle >= 150) {\n    // +/-60° around 180°\n    return 'auto';\n  }\n  return 'central';\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,kBAAkB,GAAGA,kBAAkB;AAC/CF,OAAO,CAACG,oBAAoB,GAAGA,oBAAoB;AACnD,IAAIC,WAAW,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,oBAAoBA,CAACG,KAAK,EAAE;EACnC,MAAMC,aAAa,GAAG,CAAC,CAAC,EAAEH,WAAW,CAACI,UAAU,EAAEF,KAAK,CAAC;EACxD,IAAIC,aAAa,IAAI,EAAE,IAAIA,aAAa,IAAI,GAAG,EAAE;IAC/C;IACA,OAAO,QAAQ;EACjB;EACA,IAAIA,aAAa,IAAI,GAAG,IAAIA,aAAa,IAAI,GAAG,EAAE;IAChD;IACA,OAAO,QAAQ;EACjB;EACA,IAAIA,aAAa,IAAI,GAAG,EAAE;IACxB,OAAO,KAAK;EACd;EACA,OAAO,OAAO;AAChB;AACA,SAASL,kBAAkBA,CAACI,KAAK,EAAE;EACjC,MAAMC,aAAa,GAAG,CAAC,CAAC,EAAEH,WAAW,CAACI,UAAU,EAAEF,KAAK,CAAC;EACxD,IAAIC,aAAa,IAAI,EAAE,IAAIA,aAAa,IAAI,GAAG,EAAE;IAC/C;IACA,OAAO,SAAS;EAClB;EACA,IAAIA,aAAa,IAAI,GAAG,IAAIA,aAAa,IAAI,GAAG,EAAE;IAChD;IACA,OAAO,MAAM;EACf;EACA,OAAO,SAAS;AAClB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}