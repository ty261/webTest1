{"ast":null,"code":"import { API_URL, TOKEN_KEY } from '../config';\n\n// Create common API call method\nconst apiCall = async (endpoint, method = 'GET', data = null) => {\n  // 确保endpoint以/开头，并且以/结尾，避免308重定向问题\n  let normalizedEndpoint = endpoint.startsWith('/') ? endpoint : `/${endpoint}`;\n  normalizedEndpoint = normalizedEndpoint.endsWith('/') ? normalizedEndpoint : `${normalizedEndpoint}/`;\n  const url = `${API_URL}${normalizedEndpoint}`;\n  console.log(`调用API: ${url}`); // 调试用\n\n  const options = {\n    method,\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    // 添加重定向跟随\n    redirect: 'follow'\n  };\n\n  // Add authorization token\n  const token = localStorage.getItem(TOKEN_KEY);\n  if (token) {\n    options.headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  // Add request body data\n  if (data) {\n    options.body = JSON.stringify(data);\n  }\n  try {\n    // Use real API instead of mock response\n    const response = await fetch(url, options);\n\n    // 检查是否有重定向\n    if (response.redirected) {\n      console.log(`API重定向: ${response.url}`);\n    }\n    const result = await response.json();\n    console.log(`API响应: ${normalizedEndpoint}`, result); // 添加日志以调试\n\n    // 直接返回后端的响应结果，不需要额外处理\n    return result;\n  } catch (error) {\n    console.error('API调用错误:', error);\n    throw error;\n  }\n};\n\n// Mock API response - Keep for reference but not used\nconst mockApiResponse = (endpoint, method, data) => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      // Return mock data based on different endpoints\n      if (endpoint.startsWith('/dashboard') && method === 'GET') {\n        resolve({\n          data: {\n            success: true,\n            data: {\n              sensors: {\n                total: 12,\n                active: 10,\n                latest_readings: {\n                  temperature: {\n                    value: 24.5,\n                    unit: '°C',\n                    sensor_location: 'Greenhouse 1',\n                    timestamp: new Date().toISOString()\n                  },\n                  humidity: {\n                    value: 65,\n                    unit: '%',\n                    sensor_location: 'Greenhouse 1',\n                    timestamp: new Date().toISOString()\n                  },\n                  light: {\n                    value: 3500,\n                    unit: 'lux',\n                    sensor_location: 'Greenhouse 2',\n                    timestamp: new Date().toISOString()\n                  },\n                  soil_moisture: {\n                    value: 42,\n                    unit: '%',\n                    sensor_location: 'Greenhouse 1',\n                    timestamp: new Date().toISOString()\n                  }\n                }\n              },\n              actuators: {\n                total: 8,\n                active: 6,\n                statuses: {\n                  irrigation: {\n                    on: 1,\n                    off: 2,\n                    error: 0\n                  },\n                  ventilation: {\n                    on: 2,\n                    off: 1,\n                    error: 0\n                  },\n                  lighting: {\n                    on: 1,\n                    off: 1,\n                    error: 0\n                  },\n                  heating: {\n                    on: 0,\n                    off: 1,\n                    error: 0\n                  }\n                }\n              },\n              alerts: {\n                total: 5,\n                unread: 2,\n                recent: [{\n                  id: 1,\n                  type: 'temperature',\n                  message: 'Greenhouse 1 temperature above threshold (30°C)',\n                  created_at: new Date(Date.now() - 10 * 60000).toISOString(),\n                  is_read: false\n                }, {\n                  id: 2,\n                  type: 'actuator',\n                  message: 'Greenhouse 2 irrigation system started',\n                  created_at: new Date(Date.now() - 30 * 60000).toISOString(),\n                  is_read: true\n                }]\n              }\n            }\n          }\n        });\n      }\n      // Mock get all actuators\n      else if (endpoint === '/actuators' && method === 'GET') {\n        resolve({\n          data: {\n            success: true,\n            data: [{\n              id: 1,\n              name: 'Greenhouse 1 Irrigation System',\n              type: 'irrigation',\n              location: 'Greenhouse 1',\n              status: 'off',\n              mode: 'manual',\n              is_active: true,\n              mqtt_topic: 'farm/actuators/irrigation/1',\n              created_at: '2023-10-01T08:00:00Z',\n              updated_at: '2023-11-15T10:30:00Z',\n              last_control_time: '2023-11-14T14:20:00Z'\n            }, {\n              id: 2,\n              name: 'Greenhouse 2 Ventilation Fan',\n              type: 'fan',\n              location: 'Greenhouse 2',\n              status: 'low',\n              mode: 'auto',\n              is_active: true,\n              mqtt_topic: 'farm/actuators/fan/2',\n              created_at: '2023-10-01T08:00:00Z',\n              updated_at: '2023-11-15T10:30:00Z',\n              parameters: {\n                speed: 2,\n                max_speed: 5,\n                direction: 'forward'\n              }\n            }, {\n              id: 3,\n              name: 'Greenhouse 1 Lighting System',\n              type: 'lighting',\n              location: 'Greenhouse 1',\n              status: 'on',\n              mode: 'auto',\n              is_active: true,\n              mqtt_topic: 'farm/actuators/lighting/1',\n              created_at: '2023-10-01T08:00:00Z',\n              updated_at: '2023-11-15T10:30:00Z',\n              parameters: {\n                brightness: 80,\n                color_temp: 4000\n              }\n            }, {\n              id: 4,\n              name: 'Greenhouse 3 Humidifier',\n              type: 'humidifier',\n              location: 'Greenhouse 3',\n              status: 'off',\n              mode: 'manual',\n              is_active: false,\n              mqtt_topic: 'farm/actuators/humidifier/1',\n              created_at: '2023-10-01T08:00:00Z',\n              updated_at: '2023-11-15T10:30:00Z'\n            }]\n          }\n        });\n      }\n      // Mock get all sensors\n      else if (endpoint === '/sensors' && method === 'GET') {\n        resolve({\n          data: {\n            success: true,\n            data: [{\n              id: 1,\n              name: 'Temperature Sensor 1',\n              type: 'temperature',\n              location: 'Greenhouse 1',\n              status: 'active',\n              last_reading: {\n                value: 24.5,\n                unit: '°C',\n                timestamp: new Date().toISOString()\n              }\n            }, {\n              id: 2,\n              name: 'Humidity Sensor 1',\n              type: 'humidity',\n              location: 'Greenhouse 1',\n              status: 'active',\n              last_reading: {\n                value: 65,\n                unit: '%',\n                timestamp: new Date().toISOString()\n              }\n            }, {\n              id: 3,\n              name: 'Light Sensor 1',\n              type: 'light',\n              location: 'Greenhouse 2',\n              status: 'active',\n              last_reading: {\n                value: 3500,\n                unit: 'lux',\n                timestamp: new Date().toISOString()\n              }\n            }, {\n              id: 4,\n              name: 'Soil Moisture Sensor 1',\n              type: 'soil_moisture',\n              location: 'Greenhouse 1',\n              status: 'inactive',\n              last_reading: {\n                value: 42,\n                unit: '%',\n                timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\n              }\n            }]\n          }\n        });\n      }\n      // Mock get single sensor\n      else if (endpoint.match(/\\/sensors\\/\\d+$/) && method === 'GET') {\n        const id = parseInt(endpoint.split('/').pop());\n        let sensor = {};\n        switch (id) {\n          case 1:\n            sensor = {\n              id: 1,\n              name: 'Temperature Sensor 1',\n              type: 'temperature',\n              location: 'Greenhouse 1',\n              status: 'active',\n              description: 'Primary temperature sensor for monitoring greenhouse conditions.',\n              mqtt_topic: 'farm/sensors/temperature/1',\n              created_at: '2023-10-01T08:00:00Z',\n              updated_at: '2023-11-15T10:30:00Z',\n              model: 'DHT22',\n              manufacturer: 'Acme Sensors',\n              calibration_date: '2023-09-15T00:00:00Z',\n              last_reading: {\n                value: 24.5,\n                unit: '°C',\n                timestamp: new Date().toISOString()\n              },\n              history: [{\n                timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(),\n                value: 24.5\n              }, {\n                timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n                value: 25.1\n              }, {\n                timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(),\n                value: 25.4\n              }, {\n                timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),\n                value: 25.8\n              }, {\n                timestamp: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(),\n                value: 26.2\n              }, {\n                timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),\n                value: 26.5\n              }]\n            };\n            break;\n          case 2:\n            sensor = {\n              id: 2,\n              name: 'Humidity Sensor 1',\n              type: 'humidity',\n              location: 'Greenhouse 1',\n              status: 'active',\n              description: 'Primary humidity sensor for monitoring greenhouse conditions.',\n              mqtt_topic: 'farm/sensors/humidity/1',\n              created_at: '2023-10-01T08:00:00Z',\n              updated_at: '2023-11-15T10:30:00Z',\n              model: 'DHT22',\n              manufacturer: 'Acme Sensors',\n              calibration_date: '2023-09-15T00:00:00Z',\n              last_reading: {\n                value: 65,\n                unit: '%',\n                timestamp: new Date().toISOString()\n              },\n              history: [{\n                timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(),\n                value: 65\n              }, {\n                timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n                value: 64\n              }, {\n                timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(),\n                value: 63\n              }, {\n                timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),\n                value: 62\n              }, {\n                timestamp: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(),\n                value: 60\n              }, {\n                timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),\n                value: 59\n              }]\n            };\n            break;\n          case 3:\n            sensor = {\n              id: 3,\n              name: 'Light Sensor 1',\n              type: 'light',\n              location: 'Greenhouse 2',\n              status: 'active',\n              description: 'Light sensor for monitoring lighting conditions.',\n              mqtt_topic: 'farm/sensors/light/1',\n              created_at: '2023-10-01T08:00:00Z',\n              updated_at: '2023-11-15T10:30:00Z',\n              model: 'BH1750',\n              manufacturer: 'Acme Sensors',\n              calibration_date: '2023-09-15T00:00:00Z',\n              last_reading: {\n                value: 3500,\n                unit: 'lux',\n                timestamp: new Date().toISOString()\n              },\n              history: [{\n                timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(),\n                value: 3500\n              }, {\n                timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n                value: 3200\n              }, {\n                timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(),\n                value: 2900\n              }, {\n                timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),\n                value: 2500\n              }, {\n                timestamp: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(),\n                value: 2000\n              }, {\n                timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),\n                value: 1500\n              }]\n            };\n            break;\n          case 4:\n            sensor = {\n              id: 4,\n              name: 'Soil Moisture Sensor 1',\n              type: 'soil_moisture',\n              location: 'Greenhouse 1',\n              status: 'inactive',\n              description: 'Soil moisture sensor for monitoring soil conditions.',\n              mqtt_topic: 'farm/sensors/soil_moisture/1',\n              created_at: '2023-10-01T08:00:00Z',\n              updated_at: '2023-11-15T10:30:00Z',\n              model: 'YL-69',\n              manufacturer: 'Acme Sensors',\n              calibration_date: '2023-09-15T00:00:00Z',\n              last_reading: {\n                value: 42,\n                unit: '%',\n                timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\n              },\n              history: [{\n                timestamp: new Date(Date.now() - 25 * 60 * 60 * 1000).toISOString(),\n                value: 42\n              }, {\n                timestamp: new Date(Date.now() - 26 * 60 * 60 * 1000).toISOString(),\n                value: 43\n              }, {\n                timestamp: new Date(Date.now() - 27 * 60 * 60 * 1000).toISOString(),\n                value: 44\n              }, {\n                timestamp: new Date(Date.now() - 28 * 60 * 60 * 1000).toISOString(),\n                value: 45\n              }, {\n                timestamp: new Date(Date.now() - 29 * 60 * 60 * 1000).toISOString(),\n                value: 46\n              }, {\n                timestamp: new Date(Date.now() - 30 * 60 * 60 * 1000).toISOString(),\n                value: 47\n              }]\n            };\n            break;\n          default:\n            sensor = null;\n        }\n        resolve({\n          data: {\n            success: true,\n            data: sensor\n          }\n        });\n      }\n      // Mock get actuator operation logs\n      else if (endpoint.match(/\\/actuators\\/\\d+\\/logs$/) && method === 'GET') {\n        resolve({\n          data: {\n            success: true,\n            data: [{\n              id: 1,\n              actuator_id: parseInt(endpoint.split('/')[2]),\n              timestamp: new Date(Date.now() - 1000 * 60 * 5).toISOString(),\n              status: 'on',\n              message: 'Manual activation of actuator',\n              user: 'admin',\n              source: 'web'\n            }, {\n              id: 2,\n              actuator_id: parseInt(endpoint.split('/')[2]),\n              timestamp: new Date(Date.now() - 1000 * 60 * 60).toISOString(),\n              status: 'off',\n              message: 'Actuator turned off by automatic rule',\n              user: 'system',\n              source: 'rule'\n            }, {\n              id: 3,\n              actuator_id: parseInt(endpoint.split('/')[2]),\n              timestamp: new Date(Date.now() - 1000 * 60 * 60 * 12).toISOString(),\n              status: 'on',\n              message: 'Adjusted actuator parameters',\n              user: 'admin',\n              source: 'api'\n            }]\n          }\n        });\n      }\n      // Mock get actuator allowed statuses\n      else if (endpoint.match(/\\/actuators\\/\\d+\\/statuses$/) && method === 'GET') {\n        const id = parseInt(endpoint.split('/')[2]);\n        let statuses = [];\n        switch (id) {\n          case 1:\n            // Irrigation\n            statuses = ['on', 'off'];\n            break;\n          case 2:\n            // Fan\n            statuses = ['off', 'low', 'medium', 'high'];\n            break;\n          case 3:\n            // Lighting\n            statuses = ['on', 'off', 'dim'];\n            break;\n          case 4:\n            // Humidifier\n            statuses = ['on', 'off', 'auto'];\n            break;\n          default:\n            statuses = ['on', 'off'];\n        }\n        resolve({\n          data: {\n            success: true,\n            data: statuses\n          }\n        });\n      }\n      // Mock control actuator\n      else if (endpoint.match(/\\/actuators\\/\\d+\\/control$/) && method === 'POST') {\n        resolve({\n          data: {\n            success: true,\n            message: 'Operation successful',\n            data: {\n              ...data,\n              timestamp: new Date().toISOString()\n            }\n          }\n        });\n      }\n      // Mock update actuator\n      else if (endpoint.match(/\\/actuators\\/\\d+$/) && method === 'PUT') {\n        resolve({\n          data: {\n            success: true,\n            message: 'Update successful',\n            data: {\n              ...data,\n              updated_at: new Date().toISOString()\n            }\n          }\n        });\n      }\n      // Mock update actuator auto rules\n      else if (endpoint.match(/\\/actuators\\/\\d+\\/rules$/) && method === 'PUT') {\n        resolve({\n          data: {\n            success: true,\n            message: 'Rule update successful',\n            data: {\n              ...data,\n              updated_at: new Date().toISOString()\n            }\n          }\n        });\n      }\n      // Mock update actuator parameters\n      else if (endpoint.match(/\\/actuators\\/\\d+\\/parameters$/) && method === 'PUT') {\n        resolve({\n          data: {\n            success: true,\n            message: 'Parameter update successful',\n            data: {\n              ...data,\n              updated_at: new Date().toISOString()\n            }\n          }\n        });\n      }\n      // Mock register user\n      else if (endpoint === '/users/register' && method === 'POST') {\n        // 模拟用户注册\n        if (!data.username || !data.email || !data.password) {\n          resolve({\n            data: {\n              success: false,\n              message: 'Missing required fields'\n            },\n            status: 400\n          });\n          return;\n        }\n\n        // 模拟检查用户名是否已存在\n        if (data.username === 'admin' || data.username === 'user1') {\n          resolve({\n            data: {\n              success: false,\n              message: `Username ${data.username} is already taken`\n            },\n            status: 409\n          });\n          return;\n        }\n\n        // 模拟检查邮箱是否已存在\n        if (data.email === 'admin@smartfarm.com' || data.email === 'user1@smartfarm.com') {\n          resolve({\n            data: {\n              success: false,\n              message: `Email ${data.email} is already registered`\n            },\n            status: 409\n          });\n          return;\n        }\n\n        // 注册成功\n        resolve({\n          data: {\n            success: true,\n            message: 'User registered successfully',\n            data: {\n              id: Math.floor(Math.random() * 1000) + 10,\n              username: data.username,\n              email: data.email,\n              role: 'user',\n              is_active: true,\n              created_at: new Date().toISOString(),\n              updated_at: new Date().toISOString()\n            }\n          },\n          status: 201\n        });\n      }\n      // Mock login user\n      else if (endpoint === '/users/login' && method === 'POST') {\n        // 模拟用户登录\n        if (!data.email || !data.password) {\n          resolve({\n            data: {\n              success: false,\n              message: 'Missing required fields'\n            },\n            status: 400\n          });\n          return;\n        }\n\n        // 检查测试账户\n        if (data.email === 'admin@smartfarm.com' && data.password === 'password123' || data.email === 'user1@smartfarm.com' && data.password === 'password123' || data.password === 'password123') {\n          // 任何email只要密码对都通过\n          const isAdmin = data.email === 'admin@smartfarm.com';\n          const isUser = data.email === 'user1@smartfarm.com';\n          resolve({\n            data: {\n              success: true,\n              message: 'Login successful',\n              data: {\n                user: {\n                  id: isAdmin ? 1 : isUser ? 2 : 999,\n                  username: isAdmin ? 'admin' : isUser ? 'user1' : data.email.split('@')[0],\n                  email: data.email,\n                  role: isAdmin ? 'admin' : 'user',\n                  is_active: true,\n                  last_login: new Date().toISOString(),\n                  created_at: '2023-01-01T00:00:00Z',\n                  updated_at: new Date().toISOString()\n                },\n                token: 'mock-jwt-token-' + Math.random().toString(36).substring(2)\n              }\n            },\n            status: 200\n          });\n        } else {\n          resolve({\n            data: {\n              success: false,\n              message: 'Invalid email or password'\n            },\n            status: 401\n          });\n        }\n      }\n      // Other endpoints can be added as needed\n      else {\n        resolve({\n          data: {\n            success: true,\n            message: 'Operation completed',\n            data: null\n          }\n        });\n      }\n    }, 500); // Simulate network delay\n  });\n};\n\n// Export API services with corrected endpoint paths\nexport const authAPI = {\n  login: data => apiCall('/users/login', 'POST', data),\n  register: data => apiCall('/users/register', 'POST', data),\n  getProfile: () => apiCall('/users/profile'),\n  updateProfile: data => apiCall('/users/profile', 'PUT', data),\n  changePassword: data => apiCall('/users/change-password', 'POST', data)\n};\nexport const dashboardAPI = {\n  getSummary: () => {\n    // Use mock data for dashboard summary to avoid API issues\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          success: true,\n          data: {\n            sensors: {\n              total: 12,\n              active: 10,\n              latest_readings: {\n                temperature: {\n                  value: 24.5,\n                  unit: '°C',\n                  sensor_location: 'Greenhouse 1',\n                  timestamp: new Date().toISOString()\n                },\n                humidity: {\n                  value: 65,\n                  unit: '%',\n                  sensor_location: 'Greenhouse 1',\n                  timestamp: new Date().toISOString()\n                },\n                light: {\n                  value: 3500,\n                  unit: 'lux',\n                  sensor_location: 'Greenhouse 2',\n                  timestamp: new Date().toISOString()\n                },\n                soil_moisture: {\n                  value: 42,\n                  unit: '%',\n                  sensor_location: 'Greenhouse 1',\n                  timestamp: new Date().toISOString()\n                }\n              }\n            },\n            actuators: {\n              total: 8,\n              active: 6,\n              statuses: {\n                irrigation: {\n                  on: 1,\n                  off: 2,\n                  error: 0\n                },\n                ventilation: {\n                  on: 2,\n                  off: 1,\n                  error: 0\n                },\n                lighting: {\n                  on: 1,\n                  off: 1,\n                  error: 0\n                },\n                heating: {\n                  on: 0,\n                  off: 1,\n                  error: 0\n                }\n              }\n            },\n            alerts: {\n              total: 5,\n              unread: 2,\n              recent: [{\n                id: 1,\n                type: 'temperature',\n                message: 'Greenhouse 1 temperature above threshold (30°C)',\n                created_at: new Date(Date.now() - 10 * 60000).toISOString(),\n                is_read: false\n              }, {\n                id: 2,\n                type: 'actuator',\n                message: 'Greenhouse 2 irrigation system started',\n                created_at: new Date(Date.now() - 30 * 60000).toISOString(),\n                is_read: true\n              }]\n            }\n          }\n        });\n      }, 500); // Simulate network delay\n    });\n  }\n};\nexport const sensorAPI = {\n  getAllSensors: () => {\n    // Use mock data for sensors to avoid API issues\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          success: true,\n          data: [{\n            id: 1,\n            name: 'Temperature Sensor 1',\n            type: 'temperature',\n            location: 'Greenhouse 1',\n            status: 'active',\n            last_reading: {\n              value: 24.5,\n              unit: '°C',\n              timestamp: new Date().toISOString()\n            }\n          }, {\n            id: 2,\n            name: 'Humidity Sensor 1',\n            type: 'humidity',\n            location: 'Greenhouse 1',\n            status: 'active',\n            last_reading: {\n              value: 65,\n              unit: '%',\n              timestamp: new Date().toISOString()\n            }\n          }, {\n            id: 3,\n            name: 'Light Sensor 1',\n            type: 'light',\n            location: 'Greenhouse 2',\n            status: 'active',\n            last_reading: {\n              value: 3500,\n              unit: 'lux',\n              timestamp: new Date().toISOString()\n            }\n          }, {\n            id: 4,\n            name: 'Soil Moisture Sensor 1',\n            type: 'soil_moisture',\n            location: 'Greenhouse 1',\n            status: 'inactive',\n            last_reading: {\n              value: 42,\n              unit: '%',\n              timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\n            }\n          }]\n        });\n      }, 500); // Simulate network delay\n    });\n  },\n  getSensor: id => apiCall(`/sensors/${id}`),\n  getSensorData: (id, timeRange) => apiCall(`/sensors/${id}/data?timeRange=${timeRange}`),\n  updateSensor: (id, data) => apiCall(`/sensors/${id}`, 'PUT', data),\n  calibrateSensor: (id, data) => apiCall(`/sensors/${id}/calibrate`, 'POST', data)\n};\nexport const actuatorAPI = {\n  getAllActuators: () => {\n    // Use mock data for actuators to avoid API issues\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          success: true,\n          data: [{\n            id: 1,\n            name: 'Greenhouse 1 Irrigation System',\n            type: 'irrigation',\n            location: 'Greenhouse 1',\n            status: 'off',\n            mode: 'manual',\n            is_active: true,\n            mqtt_topic: 'farm/actuators/irrigation/1',\n            created_at: '2023-10-01T08:00:00Z',\n            updated_at: '2023-11-15T10:30:00Z',\n            last_control_time: '2023-11-14T14:20:00Z'\n          }, {\n            id: 2,\n            name: 'Greenhouse 2 Ventilation Fan',\n            type: 'fan',\n            location: 'Greenhouse 2',\n            status: 'low',\n            mode: 'auto',\n            is_active: true,\n            mqtt_topic: 'farm/actuators/fan/2',\n            created_at: '2023-10-01T08:00:00Z',\n            updated_at: '2023-11-15T10:30:00Z',\n            parameters: {\n              speed: 2,\n              max_speed: 5,\n              direction: 'forward'\n            }\n          }, {\n            id: 3,\n            name: 'Greenhouse 1 Lighting System',\n            type: 'lighting',\n            location: 'Greenhouse 1',\n            status: 'on',\n            mode: 'auto',\n            is_active: true,\n            mqtt_topic: 'farm/actuators/lighting/1',\n            created_at: '2023-10-01T08:00:00Z',\n            updated_at: '2023-11-15T10:30:00Z',\n            parameters: {\n              brightness: 80,\n              color_temp: 4000\n            }\n          }, {\n            id: 4,\n            name: 'Greenhouse 3 Humidifier',\n            type: 'humidifier',\n            location: 'Greenhouse 3',\n            status: 'off',\n            mode: 'manual',\n            is_active: false,\n            mqtt_topic: 'farm/actuators/humidifier/1',\n            created_at: '2023-10-01T08:00:00Z',\n            updated_at: '2023-11-15T10:30:00Z'\n          }]\n        });\n      }, 500); // Simulate network delay\n    });\n  },\n  getActuator: id => {\n    // Use mock data for actuator details to avoid API issues\n    console.log(`模拟获取执行器详情, ID: ${id}`);\n    return new Promise(resolve => {\n      setTimeout(() => {\n        let actuator = null;\n\n        // Return specific details based on actuator ID\n        switch (parseInt(id)) {\n          case 1:\n            actuator = {\n              id: 1,\n              name: 'Greenhouse 1 Irrigation System',\n              type: 'irrigation',\n              location: 'Greenhouse 1',\n              status: 'off',\n              mode: 'manual',\n              is_active: true,\n              mqtt_topic: 'farm/actuators/irrigation/1',\n              created_at: '2023-10-01T08:00:00Z',\n              updated_at: '2023-11-15T10:30:00Z',\n              last_control_time: '2023-11-14T14:20:00Z',\n              description: 'Main irrigation system for Greenhouse 1',\n              parameters: {\n                water_flow: 2.5,\n                duration: 30,\n                schedule: 'daily',\n                auto_threshold: 30\n              }\n            };\n            break;\n          case 2:\n            actuator = {\n              id: 2,\n              name: 'Greenhouse 2 Ventilation Fan',\n              type: 'fan',\n              location: 'Greenhouse 2',\n              status: 'low',\n              mode: 'auto',\n              is_active: true,\n              mqtt_topic: 'farm/actuators/fan/2',\n              created_at: '2023-10-01T08:00:00Z',\n              updated_at: '2023-11-15T10:30:00Z',\n              description: 'Main ventilation fan for Greenhouse 2',\n              parameters: {\n                speed: 2,\n                max_speed: 5,\n                direction: 'forward',\n                auto_trigger_temp: 28\n              }\n            };\n            break;\n          case 3:\n            actuator = {\n              id: 3,\n              name: 'Greenhouse 1 Lighting System',\n              type: 'lighting',\n              location: 'Greenhouse 1',\n              status: 'on',\n              mode: 'auto',\n              is_active: true,\n              mqtt_topic: 'farm/actuators/lighting/1',\n              created_at: '2023-10-01T08:00:00Z',\n              updated_at: '2023-11-15T10:30:00Z',\n              description: 'Main lighting system for Greenhouse 1',\n              parameters: {\n                brightness: 80,\n                color_temp: 4000,\n                schedule_on: '06:00',\n                schedule_off: '20:00'\n              }\n            };\n            break;\n          case 4:\n            actuator = {\n              id: 4,\n              name: 'Greenhouse 3 Humidifier',\n              type: 'humidifier',\n              location: 'Greenhouse 3',\n              status: 'off',\n              mode: 'manual',\n              is_active: false,\n              mqtt_topic: 'farm/actuators/humidifier/1',\n              created_at: '2023-10-01T08:00:00Z',\n              updated_at: '2023-11-15T10:30:00Z',\n              description: 'Main humidifier for Greenhouse 3',\n              parameters: {\n                capacity: 5,\n                auto_trigger_humidity: 40,\n                auto_stop_humidity: 60\n              }\n            };\n            break;\n          default:\n            actuator = {\n              id: parseInt(id),\n              name: `Unknown Actuator ${id}`,\n              type: 'unknown',\n              location: 'Unknown',\n              status: 'error',\n              mode: 'manual',\n              is_active: false,\n              mqtt_topic: `farm/actuators/unknown/${id}`,\n              created_at: '2023-10-01T08:00:00Z',\n              updated_at: '2023-11-15T10:30:00Z'\n            };\n        }\n        resolve({\n          success: true,\n          data: actuator\n        });\n      }, 500); // Simulate network delay\n    });\n  },\n  getActuatorLogs: id => {\n    // Use mock data for actuator logs to avoid API issues\n    console.log(`模拟获取执行器日志, ID: ${id}`);\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          success: true,\n          data: [{\n            id: 1,\n            actuator_id: parseInt(id),\n            timestamp: new Date(Date.now() - 1000 * 60 * 5).toISOString(),\n            status: 'on',\n            message: 'Manual activation of actuator',\n            user: 'admin',\n            source: 'web'\n          }, {\n            id: 2,\n            actuator_id: parseInt(id),\n            timestamp: new Date(Date.now() - 1000 * 60 * 60).toISOString(),\n            status: 'off',\n            message: 'Actuator turned off by automatic rule',\n            user: 'system',\n            source: 'rule'\n          }, {\n            id: 3,\n            actuator_id: parseInt(id),\n            timestamp: new Date(Date.now() - 1000 * 60 * 60 * 12).toISOString(),\n            status: 'on',\n            message: 'Adjusted actuator parameters',\n            user: 'admin',\n            source: 'api'\n          }]\n        });\n      }, 500); // Simulate network delay\n    });\n  },\n  getActuatorStatuses: id => apiCall(`/actuators/${id}/statuses`),\n  controlActuator: (id, data) => {\n    // Use mock data for actuator control to avoid API issues\n    console.log(`模拟控制执行器 ID: ${id}, 操作: ${JSON.stringify(data)}`);\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          success: true,\n          message: 'Operation successful',\n          data: {\n            ...data,\n            actuator_id: id,\n            timestamp: new Date().toISOString()\n          }\n        });\n      }, 500); // Simulate network delay\n    });\n  },\n  updateActuator: (id, data) => apiCall(`/actuators/${id}`, 'PUT', data),\n  updateActuatorRules: (id, data) => apiCall(`/actuators/${id}/rules`, 'PUT', data),\n  updateActuatorParameters: (id, data) => apiCall(`/actuators/${id}/parameters`, 'PUT', data)\n};\nexport const alertAPI = {\n  getAlerts: (page = 1, limit = 10) => apiCall(`/alerts?page=${page}&limit=${limit}`),\n  markAsRead: id => apiCall(`/alerts/${id}/read`, 'POST'),\n  markAllAsRead: () => apiCall('/alerts/read-all', 'POST'),\n  deleteAlert: id => apiCall(`/alerts/${id}`, 'DELETE'),\n  getAlertSettings: () => apiCall('/alerts/settings'),\n  updateAlertSettings: data => apiCall('/alerts/settings', 'PUT', data)\n};\nexport const analyticsAPI = {\n  getSensorStats: timeRange => apiCall(`/analytics/sensors?timeRange=${timeRange}`),\n  getActuatorStats: timeRange => apiCall(`/analytics/actuators?timeRange=${timeRange}`),\n  getCorrelationData: (sensors, timeRange) => apiCall(`/analytics/correlation?sensors=${sensors.join(',')}&timeRange=${timeRange}`),\n  getEnergyUsage: timeRange => apiCall(`/analytics/energy?timeRange=${timeRange}`),\n  getYieldData: timeRange => apiCall(`/analytics/yield?timeRange=${timeRange}`)\n};\nexport const settingsAPI = {\n  getSystemSettings: () => apiCall('/settings/system'),\n  updateSystemSettings: data => apiCall('/settings/system', 'PUT', data),\n  getNotificationSettings: () => apiCall('/settings/notifications'),\n  updateNotificationSettings: data => apiCall('/settings/notifications', 'PUT', data),\n  getBackupSettings: () => apiCall('/settings/backup'),\n  updateBackupSettings: data => apiCall('/settings/backup', 'PUT', data),\n  backupNow: () => apiCall('/settings/backup/now', 'POST'),\n  restoreBackup: id => apiCall(`/settings/backup/restore/${id}`, 'POST'),\n  getDeviceSettings: () => apiCall('/settings/devices'),\n  updateDeviceSettings: data => apiCall('/settings/devices', 'PUT', data)\n};","map":{"version":3,"names":["API_URL","TOKEN_KEY","apiCall","endpoint","method","data","normalizedEndpoint","startsWith","endsWith","url","console","log","options","headers","redirect","token","localStorage","getItem","body","JSON","stringify","response","fetch","redirected","result","json","error","mockApiResponse","Promise","resolve","setTimeout","success","sensors","total","active","latest_readings","temperature","value","unit","sensor_location","timestamp","Date","toISOString","humidity","light","soil_moisture","actuators","statuses","irrigation","on","off","ventilation","lighting","heating","alerts","unread","recent","id","type","message","created_at","now","is_read","name","location","status","mode","is_active","mqtt_topic","updated_at","last_control_time","parameters","speed","max_speed","direction","brightness","color_temp","last_reading","match","parseInt","split","pop","sensor","description","model","manufacturer","calibration_date","history","actuator_id","user","source","username","email","password","Math","floor","random","role","isAdmin","isUser","last_login","toString","substring","authAPI","login","register","getProfile","updateProfile","changePassword","dashboardAPI","getSummary","sensorAPI","getAllSensors","getSensor","getSensorData","timeRange","updateSensor","calibrateSensor","actuatorAPI","getAllActuators","getActuator","actuator","water_flow","duration","schedule","auto_threshold","auto_trigger_temp","schedule_on","schedule_off","capacity","auto_trigger_humidity","auto_stop_humidity","getActuatorLogs","getActuatorStatuses","controlActuator","updateActuator","updateActuatorRules","updateActuatorParameters","alertAPI","getAlerts","page","limit","markAsRead","markAllAsRead","deleteAlert","getAlertSettings","updateAlertSettings","analyticsAPI","getSensorStats","getActuatorStats","getCorrelationData","join","getEnergyUsage","getYieldData","settingsAPI","getSystemSettings","updateSystemSettings","getNotificationSettings","updateNotificationSettings","getBackupSettings","updateBackupSettings","backupNow","restoreBackup","getDeviceSettings","updateDeviceSettings"],"sources":["C:/Users/LIJIN/Desktop/webTest/frontend/src/services/api.js"],"sourcesContent":["import { API_URL, TOKEN_KEY } from '../config';\r\n\r\n// Create common API call method\r\nconst apiCall = async (endpoint, method = 'GET', data = null) => {\r\n  // 确保endpoint以/开头，并且以/结尾，避免308重定向问题\r\n  let normalizedEndpoint = endpoint.startsWith('/') ? endpoint : `/${endpoint}`;\r\n  normalizedEndpoint = normalizedEndpoint.endsWith('/') ? normalizedEndpoint : `${normalizedEndpoint}/`;\r\n  \r\n  const url = `${API_URL}${normalizedEndpoint}`;\r\n  \r\n  console.log(`调用API: ${url}`); // 调试用\r\n  \r\n  const options = {\r\n    method,\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    // 添加重定向跟随\r\n    redirect: 'follow'\r\n  };\r\n\r\n  // Add authorization token\r\n  const token = localStorage.getItem(TOKEN_KEY);\r\n  if (token) {\r\n    options.headers['Authorization'] = `Bearer ${token}`;\r\n  }\r\n\r\n  // Add request body data\r\n  if (data) {\r\n    options.body = JSON.stringify(data);\r\n  }\r\n\r\n  try {\r\n    // Use real API instead of mock response\r\n    const response = await fetch(url, options);\r\n    \r\n    // 检查是否有重定向\r\n    if (response.redirected) {\r\n      console.log(`API重定向: ${response.url}`);\r\n    }\r\n    \r\n    const result = await response.json();\r\n    \r\n    console.log(`API响应: ${normalizedEndpoint}`, result);  // 添加日志以调试\r\n    \r\n    // 直接返回后端的响应结果，不需要额外处理\r\n    return result;\r\n  } catch (error) {\r\n    console.error('API调用错误:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Mock API response - Keep for reference but not used\r\nconst mockApiResponse = (endpoint, method, data) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      // Return mock data based on different endpoints\r\n      if (endpoint.startsWith('/dashboard') && method === 'GET') {\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            data: {\r\n              sensors: {\r\n                total: 12,\r\n                active: 10,\r\n                latest_readings: {\r\n                  temperature: {\r\n                    value: 24.5,\r\n                    unit: '°C',\r\n                    sensor_location: 'Greenhouse 1',\r\n                    timestamp: new Date().toISOString()\r\n                  },\r\n                  humidity: {\r\n                    value: 65,\r\n                    unit: '%',\r\n                    sensor_location: 'Greenhouse 1',\r\n                    timestamp: new Date().toISOString()\r\n                  },\r\n                  light: {\r\n                    value: 3500,\r\n                    unit: 'lux',\r\n                    sensor_location: 'Greenhouse 2',\r\n                    timestamp: new Date().toISOString()\r\n                  },\r\n                  soil_moisture: {\r\n                    value: 42,\r\n                    unit: '%',\r\n                    sensor_location: 'Greenhouse 1',\r\n                    timestamp: new Date().toISOString()\r\n                  }\r\n                }\r\n              },\r\n              actuators: {\r\n                total: 8,\r\n                active: 6,\r\n                statuses: {\r\n                  irrigation: { on: 1, off: 2, error: 0 },\r\n                  ventilation: { on: 2, off: 1, error: 0 },\r\n                  lighting: { on: 1, off: 1, error: 0 },\r\n                  heating: { on: 0, off: 1, error: 0 }\r\n                }\r\n              },\r\n              alerts: {\r\n                total: 5,\r\n                unread: 2,\r\n                recent: [\r\n                  {\r\n                    id: 1,\r\n                    type: 'temperature',\r\n                    message: 'Greenhouse 1 temperature above threshold (30°C)',\r\n                    created_at: new Date(Date.now() - 10 * 60000).toISOString(),\r\n                    is_read: false\r\n                  },\r\n                  {\r\n                    id: 2,\r\n                    type: 'actuator',\r\n                    message: 'Greenhouse 2 irrigation system started',\r\n                    created_at: new Date(Date.now() - 30 * 60000).toISOString(),\r\n                    is_read: true\r\n                  }\r\n                ]\r\n              }\r\n            }\r\n          }\r\n        });\r\n      } \r\n      // Mock get all actuators\r\n      else if (endpoint === '/actuators' && method === 'GET') {\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            data: [\r\n              {\r\n                id: 1,\r\n                name: 'Greenhouse 1 Irrigation System',\r\n                type: 'irrigation',\r\n                location: 'Greenhouse 1',\r\n                status: 'off',\r\n                mode: 'manual',\r\n                is_active: true,\r\n                mqtt_topic: 'farm/actuators/irrigation/1',\r\n                created_at: '2023-10-01T08:00:00Z',\r\n                updated_at: '2023-11-15T10:30:00Z',\r\n                last_control_time: '2023-11-14T14:20:00Z'\r\n              },\r\n              {\r\n                id: 2,\r\n                name: 'Greenhouse 2 Ventilation Fan',\r\n                type: 'fan',\r\n                location: 'Greenhouse 2',\r\n                status: 'low',\r\n                mode: 'auto',\r\n                is_active: true,\r\n                mqtt_topic: 'farm/actuators/fan/2',\r\n                created_at: '2023-10-01T08:00:00Z',\r\n                updated_at: '2023-11-15T10:30:00Z',\r\n                parameters: {\r\n                  speed: 2,\r\n                  max_speed: 5,\r\n                  direction: 'forward'\r\n                }\r\n              },\r\n              {\r\n                id: 3,\r\n                name: 'Greenhouse 1 Lighting System',\r\n                type: 'lighting',\r\n                location: 'Greenhouse 1',\r\n                status: 'on',\r\n                mode: 'auto',\r\n                is_active: true,\r\n                mqtt_topic: 'farm/actuators/lighting/1',\r\n                created_at: '2023-10-01T08:00:00Z',\r\n                updated_at: '2023-11-15T10:30:00Z',\r\n                parameters: {\r\n                  brightness: 80,\r\n                  color_temp: 4000\r\n                }\r\n              },\r\n              {\r\n                id: 4,\r\n                name: 'Greenhouse 3 Humidifier',\r\n                type: 'humidifier',\r\n                location: 'Greenhouse 3',\r\n                status: 'off',\r\n                mode: 'manual',\r\n                is_active: false,\r\n                mqtt_topic: 'farm/actuators/humidifier/1',\r\n                created_at: '2023-10-01T08:00:00Z',\r\n                updated_at: '2023-11-15T10:30:00Z'\r\n              }\r\n            ]\r\n          }\r\n        });\r\n      }\r\n      // Mock get all sensors\r\n      else if (endpoint === '/sensors' && method === 'GET') {\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            data: [\r\n              {\r\n                id: 1,\r\n                name: 'Temperature Sensor 1',\r\n                type: 'temperature',\r\n                location: 'Greenhouse 1',\r\n                status: 'active',\r\n                last_reading: {\r\n                  value: 24.5,\r\n                  unit: '°C',\r\n                  timestamp: new Date().toISOString()\r\n                }\r\n              },\r\n              {\r\n                id: 2,\r\n                name: 'Humidity Sensor 1',\r\n                type: 'humidity',\r\n                location: 'Greenhouse 1',\r\n                status: 'active',\r\n                last_reading: {\r\n                  value: 65,\r\n                  unit: '%',\r\n                  timestamp: new Date().toISOString()\r\n                }\r\n              },\r\n              {\r\n                id: 3,\r\n                name: 'Light Sensor 1',\r\n                type: 'light',\r\n                location: 'Greenhouse 2',\r\n                status: 'active',\r\n                last_reading: {\r\n                  value: 3500,\r\n                  unit: 'lux',\r\n                  timestamp: new Date().toISOString()\r\n                }\r\n              },\r\n              {\r\n                id: 4,\r\n                name: 'Soil Moisture Sensor 1',\r\n                type: 'soil_moisture',\r\n                location: 'Greenhouse 1',\r\n                status: 'inactive',\r\n                last_reading: {\r\n                  value: 42,\r\n                  unit: '%',\r\n                  timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        });\r\n      }\r\n      // Mock get single sensor\r\n      else if (endpoint.match(/\\/sensors\\/\\d+$/) && method === 'GET') {\r\n        const id = parseInt(endpoint.split('/').pop());\r\n        let sensor = {};\r\n\r\n        switch(id) {\r\n          case 1:\r\n            sensor = {\r\n              id: 1,\r\n              name: 'Temperature Sensor 1',\r\n              type: 'temperature',\r\n              location: 'Greenhouse 1',\r\n              status: 'active',\r\n              description: 'Primary temperature sensor for monitoring greenhouse conditions.',\r\n              mqtt_topic: 'farm/sensors/temperature/1',\r\n              created_at: '2023-10-01T08:00:00Z',\r\n              updated_at: '2023-11-15T10:30:00Z',\r\n              model: 'DHT22',\r\n              manufacturer: 'Acme Sensors',\r\n              calibration_date: '2023-09-15T00:00:00Z',\r\n              last_reading: {\r\n                value: 24.5,\r\n                unit: '°C',\r\n                timestamp: new Date().toISOString()\r\n              },\r\n              history: [\r\n                { timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(), value: 24.5 },\r\n                { timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), value: 25.1 },\r\n                { timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(), value: 25.4 },\r\n                { timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(), value: 25.8 },\r\n                { timestamp: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(), value: 26.2 },\r\n                { timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(), value: 26.5 }\r\n              ]\r\n            };\r\n            break;\r\n          case 2:\r\n            sensor = {\r\n              id: 2,\r\n              name: 'Humidity Sensor 1',\r\n              type: 'humidity',\r\n              location: 'Greenhouse 1',\r\n              status: 'active',\r\n              description: 'Primary humidity sensor for monitoring greenhouse conditions.',\r\n              mqtt_topic: 'farm/sensors/humidity/1',\r\n              created_at: '2023-10-01T08:00:00Z',\r\n              updated_at: '2023-11-15T10:30:00Z',\r\n              model: 'DHT22',\r\n              manufacturer: 'Acme Sensors',\r\n              calibration_date: '2023-09-15T00:00:00Z',\r\n              last_reading: {\r\n                value: 65,\r\n                unit: '%',\r\n                timestamp: new Date().toISOString()\r\n              },\r\n              history: [\r\n                { timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(), value: 65 },\r\n                { timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), value: 64 },\r\n                { timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(), value: 63 },\r\n                { timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(), value: 62 },\r\n                { timestamp: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(), value: 60 },\r\n                { timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(), value: 59 }\r\n              ]\r\n            };\r\n            break;\r\n          case 3:\r\n            sensor = {\r\n              id: 3,\r\n              name: 'Light Sensor 1',\r\n              type: 'light',\r\n              location: 'Greenhouse 2',\r\n              status: 'active',\r\n              description: 'Light sensor for monitoring lighting conditions.',\r\n              mqtt_topic: 'farm/sensors/light/1',\r\n              created_at: '2023-10-01T08:00:00Z',\r\n              updated_at: '2023-11-15T10:30:00Z',\r\n              model: 'BH1750',\r\n              manufacturer: 'Acme Sensors',\r\n              calibration_date: '2023-09-15T00:00:00Z',\r\n              last_reading: {\r\n                value: 3500,\r\n                unit: 'lux',\r\n                timestamp: new Date().toISOString()\r\n              },\r\n              history: [\r\n                { timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(), value: 3500 },\r\n                { timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), value: 3200 },\r\n                { timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(), value: 2900 },\r\n                { timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(), value: 2500 },\r\n                { timestamp: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(), value: 2000 },\r\n                { timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(), value: 1500 }\r\n              ]\r\n            };\r\n            break;\r\n          case 4:\r\n            sensor = {\r\n              id: 4,\r\n              name: 'Soil Moisture Sensor 1',\r\n              type: 'soil_moisture',\r\n              location: 'Greenhouse 1',\r\n              status: 'inactive',\r\n              description: 'Soil moisture sensor for monitoring soil conditions.',\r\n              mqtt_topic: 'farm/sensors/soil_moisture/1',\r\n              created_at: '2023-10-01T08:00:00Z',\r\n              updated_at: '2023-11-15T10:30:00Z',\r\n              model: 'YL-69',\r\n              manufacturer: 'Acme Sensors',\r\n              calibration_date: '2023-09-15T00:00:00Z',\r\n              last_reading: {\r\n                value: 42,\r\n                unit: '%',\r\n                timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\r\n              },\r\n              history: [\r\n                { timestamp: new Date(Date.now() - 25 * 60 * 60 * 1000).toISOString(), value: 42 },\r\n                { timestamp: new Date(Date.now() - 26 * 60 * 60 * 1000).toISOString(), value: 43 },\r\n                { timestamp: new Date(Date.now() - 27 * 60 * 60 * 1000).toISOString(), value: 44 },\r\n                { timestamp: new Date(Date.now() - 28 * 60 * 60 * 1000).toISOString(), value: 45 },\r\n                { timestamp: new Date(Date.now() - 29 * 60 * 60 * 1000).toISOString(), value: 46 },\r\n                { timestamp: new Date(Date.now() - 30 * 60 * 60 * 1000).toISOString(), value: 47 }\r\n              ]\r\n            };\r\n            break;\r\n          default:\r\n            sensor = null;\r\n        }\r\n\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            data: sensor\r\n          }\r\n        });\r\n      }\r\n      // Mock get actuator operation logs\r\n      else if (endpoint.match(/\\/actuators\\/\\d+\\/logs$/) && method === 'GET') {\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            data: [\r\n              {\r\n                id: 1,\r\n                actuator_id: parseInt(endpoint.split('/')[2]),\r\n                timestamp: new Date(Date.now() - 1000 * 60 * 5).toISOString(),\r\n                status: 'on',\r\n                message: 'Manual activation of actuator',\r\n                user: 'admin',\r\n                source: 'web'\r\n              },\r\n              {\r\n                id: 2,\r\n                actuator_id: parseInt(endpoint.split('/')[2]),\r\n                timestamp: new Date(Date.now() - 1000 * 60 * 60).toISOString(),\r\n                status: 'off',\r\n                message: 'Actuator turned off by automatic rule',\r\n                user: 'system',\r\n                source: 'rule'\r\n              },\r\n              {\r\n                id: 3,\r\n                actuator_id: parseInt(endpoint.split('/')[2]),\r\n                timestamp: new Date(Date.now() - 1000 * 60 * 60 * 12).toISOString(),\r\n                status: 'on',\r\n                message: 'Adjusted actuator parameters',\r\n                user: 'admin',\r\n                source: 'api'\r\n              }\r\n            ]\r\n          }\r\n        });\r\n      }\r\n      // Mock get actuator allowed statuses\r\n      else if (endpoint.match(/\\/actuators\\/\\d+\\/statuses$/) && method === 'GET') {\r\n        const id = parseInt(endpoint.split('/')[2]);\r\n        let statuses = [];\r\n        \r\n        switch(id) {\r\n          case 1: // Irrigation\r\n            statuses = ['on', 'off'];\r\n            break;\r\n          case 2: // Fan\r\n            statuses = ['off', 'low', 'medium', 'high'];\r\n            break;\r\n          case 3: // Lighting\r\n            statuses = ['on', 'off', 'dim'];\r\n            break;\r\n          case 4: // Humidifier\r\n            statuses = ['on', 'off', 'auto'];\r\n            break;\r\n          default:\r\n            statuses = ['on', 'off'];\r\n        }\r\n        \r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            data: statuses\r\n          }\r\n        });\r\n      }\r\n      // Mock control actuator\r\n      else if (endpoint.match(/\\/actuators\\/\\d+\\/control$/) && method === 'POST') {\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            message: 'Operation successful',\r\n            data: {\r\n              ...data,\r\n              timestamp: new Date().toISOString()\r\n            }\r\n          }\r\n        });\r\n      }\r\n      // Mock update actuator\r\n      else if (endpoint.match(/\\/actuators\\/\\d+$/) && method === 'PUT') {\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            message: 'Update successful',\r\n            data: {\r\n              ...data,\r\n              updated_at: new Date().toISOString()\r\n            }\r\n          }\r\n        });\r\n      }\r\n      // Mock update actuator auto rules\r\n      else if (endpoint.match(/\\/actuators\\/\\d+\\/rules$/) && method === 'PUT') {\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            message: 'Rule update successful',\r\n            data: {\r\n              ...data,\r\n              updated_at: new Date().toISOString()\r\n            }\r\n          }\r\n        });\r\n      }\r\n      // Mock update actuator parameters\r\n      else if (endpoint.match(/\\/actuators\\/\\d+\\/parameters$/) && method === 'PUT') {\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            message: 'Parameter update successful',\r\n            data: {\r\n              ...data,\r\n              updated_at: new Date().toISOString()\r\n            }\r\n          }\r\n        });\r\n      }\r\n      // Mock register user\r\n      else if (endpoint === '/users/register' && method === 'POST') {\r\n        // 模拟用户注册\r\n        if (!data.username || !data.email || !data.password) {\r\n          resolve({\r\n            data: {\r\n              success: false,\r\n              message: 'Missing required fields',\r\n            },\r\n            status: 400\r\n          });\r\n          return;\r\n        }\r\n        \r\n        // 模拟检查用户名是否已存在\r\n        if (data.username === 'admin' || data.username === 'user1') {\r\n          resolve({\r\n            data: {\r\n              success: false,\r\n              message: `Username ${data.username} is already taken`,\r\n            },\r\n            status: 409\r\n          });\r\n          return;\r\n        }\r\n        \r\n        // 模拟检查邮箱是否已存在\r\n        if (data.email === 'admin@smartfarm.com' || data.email === 'user1@smartfarm.com') {\r\n          resolve({\r\n            data: {\r\n              success: false,\r\n              message: `Email ${data.email} is already registered`,\r\n            },\r\n            status: 409\r\n          });\r\n          return;\r\n        }\r\n        \r\n        // 注册成功\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            message: 'User registered successfully',\r\n            data: {\r\n              id: Math.floor(Math.random() * 1000) + 10,\r\n              username: data.username,\r\n              email: data.email,\r\n              role: 'user',\r\n              is_active: true,\r\n              created_at: new Date().toISOString(),\r\n              updated_at: new Date().toISOString()\r\n            }\r\n          },\r\n          status: 201\r\n        });\r\n      }\r\n      // Mock login user\r\n      else if (endpoint === '/users/login' && method === 'POST') {\r\n        // 模拟用户登录\r\n        if (!data.email || !data.password) {\r\n          resolve({\r\n            data: {\r\n              success: false,\r\n              message: 'Missing required fields',\r\n            },\r\n            status: 400\r\n          });\r\n          return;\r\n        }\r\n        \r\n        // 检查测试账户\r\n        if ((data.email === 'admin@smartfarm.com' && data.password === 'password123') || \r\n            (data.email === 'user1@smartfarm.com' && data.password === 'password123') ||\r\n            data.password === 'password123') {  // 任何email只要密码对都通过\r\n          const isAdmin = data.email === 'admin@smartfarm.com';\r\n          const isUser = data.email === 'user1@smartfarm.com';\r\n          \r\n          resolve({\r\n            data: {\r\n              success: true,\r\n              message: 'Login successful',\r\n              data: {\r\n                user: {\r\n                  id: isAdmin ? 1 : (isUser ? 2 : 999),\r\n                  username: isAdmin ? 'admin' : (isUser ? 'user1' : data.email.split('@')[0]),\r\n                  email: data.email,\r\n                  role: isAdmin ? 'admin' : 'user',\r\n                  is_active: true,\r\n                  last_login: new Date().toISOString(),\r\n                  created_at: '2023-01-01T00:00:00Z',\r\n                  updated_at: new Date().toISOString()\r\n                },\r\n                token: 'mock-jwt-token-' + Math.random().toString(36).substring(2)\r\n              }\r\n            },\r\n            status: 200\r\n          });\r\n        } else {\r\n          resolve({\r\n            data: {\r\n              success: false,\r\n              message: 'Invalid email or password',\r\n            },\r\n            status: 401\r\n          });\r\n        }\r\n      }\r\n      // Other endpoints can be added as needed\r\n      else {\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            message: 'Operation completed',\r\n            data: null\r\n          }\r\n        });\r\n      }\r\n    }, 500); // Simulate network delay\r\n  });\r\n};\r\n\r\n// Export API services with corrected endpoint paths\r\nexport const authAPI = {\r\n  login: (data) => apiCall('/users/login', 'POST', data),\r\n  register: (data) => apiCall('/users/register', 'POST', data),\r\n  getProfile: () => apiCall('/users/profile'),\r\n  updateProfile: (data) => apiCall('/users/profile', 'PUT', data),\r\n  changePassword: (data) => apiCall('/users/change-password', 'POST', data),\r\n};\r\n\r\nexport const dashboardAPI = {\r\n  getSummary: () => {\r\n    // Use mock data for dashboard summary to avoid API issues\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          success: true,\r\n          data: {\r\n            sensors: {\r\n              total: 12,\r\n              active: 10,\r\n              latest_readings: {\r\n                temperature: {\r\n                  value: 24.5,\r\n                  unit: '°C',\r\n                  sensor_location: 'Greenhouse 1',\r\n                  timestamp: new Date().toISOString()\r\n                },\r\n                humidity: {\r\n                  value: 65,\r\n                  unit: '%',\r\n                  sensor_location: 'Greenhouse 1',\r\n                  timestamp: new Date().toISOString()\r\n                },\r\n                light: {\r\n                  value: 3500,\r\n                  unit: 'lux',\r\n                  sensor_location: 'Greenhouse 2',\r\n                  timestamp: new Date().toISOString()\r\n                },\r\n                soil_moisture: {\r\n                  value: 42,\r\n                  unit: '%',\r\n                  sensor_location: 'Greenhouse 1',\r\n                  timestamp: new Date().toISOString()\r\n                }\r\n              }\r\n            },\r\n            actuators: {\r\n              total: 8,\r\n              active: 6,\r\n              statuses: {\r\n                irrigation: { on: 1, off: 2, error: 0 },\r\n                ventilation: { on: 2, off: 1, error: 0 },\r\n                lighting: { on: 1, off: 1, error: 0 },\r\n                heating: { on: 0, off: 1, error: 0 }\r\n              }\r\n            },\r\n            alerts: {\r\n              total: 5,\r\n              unread: 2,\r\n              recent: [\r\n                {\r\n                  id: 1,\r\n                  type: 'temperature',\r\n                  message: 'Greenhouse 1 temperature above threshold (30°C)',\r\n                  created_at: new Date(Date.now() - 10 * 60000).toISOString(),\r\n                  is_read: false\r\n                },\r\n                {\r\n                  id: 2,\r\n                  type: 'actuator',\r\n                  message: 'Greenhouse 2 irrigation system started',\r\n                  created_at: new Date(Date.now() - 30 * 60000).toISOString(),\r\n                  is_read: true\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        });\r\n      }, 500); // Simulate network delay\r\n    });\r\n  },\r\n};\r\n\r\nexport const sensorAPI = {\r\n  getAllSensors: () => {\r\n    // Use mock data for sensors to avoid API issues\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          success: true,\r\n          data: [\r\n            {\r\n              id: 1,\r\n              name: 'Temperature Sensor 1',\r\n              type: 'temperature',\r\n              location: 'Greenhouse 1',\r\n              status: 'active',\r\n              last_reading: {\r\n                value: 24.5,\r\n                unit: '°C',\r\n                timestamp: new Date().toISOString()\r\n              }\r\n            },\r\n            {\r\n              id: 2,\r\n              name: 'Humidity Sensor 1',\r\n              type: 'humidity',\r\n              location: 'Greenhouse 1',\r\n              status: 'active',\r\n              last_reading: {\r\n                value: 65,\r\n                unit: '%',\r\n                timestamp: new Date().toISOString()\r\n              }\r\n            },\r\n            {\r\n              id: 3,\r\n              name: 'Light Sensor 1',\r\n              type: 'light',\r\n              location: 'Greenhouse 2',\r\n              status: 'active',\r\n              last_reading: {\r\n                value: 3500,\r\n                unit: 'lux',\r\n                timestamp: new Date().toISOString()\r\n              }\r\n            },\r\n            {\r\n              id: 4,\r\n              name: 'Soil Moisture Sensor 1',\r\n              type: 'soil_moisture',\r\n              location: 'Greenhouse 1',\r\n              status: 'inactive',\r\n              last_reading: {\r\n                value: 42,\r\n                unit: '%',\r\n                timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\r\n              }\r\n            }\r\n          ]\r\n        });\r\n      }, 500); // Simulate network delay\r\n    });\r\n  },\r\n  getSensor: (id) => apiCall(`/sensors/${id}`),\r\n  getSensorData: (id, timeRange) => apiCall(`/sensors/${id}/data?timeRange=${timeRange}`),\r\n  updateSensor: (id, data) => apiCall(`/sensors/${id}`, 'PUT', data),\r\n  calibrateSensor: (id, data) => apiCall(`/sensors/${id}/calibrate`, 'POST', data),\r\n};\r\n\r\nexport const actuatorAPI = {\r\n  getAllActuators: () => {\r\n    // Use mock data for actuators to avoid API issues\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          success: true,\r\n          data: [\r\n            {\r\n              id: 1,\r\n              name: 'Greenhouse 1 Irrigation System',\r\n              type: 'irrigation',\r\n              location: 'Greenhouse 1',\r\n              status: 'off',\r\n              mode: 'manual',\r\n              is_active: true,\r\n              mqtt_topic: 'farm/actuators/irrigation/1',\r\n              created_at: '2023-10-01T08:00:00Z',\r\n              updated_at: '2023-11-15T10:30:00Z',\r\n              last_control_time: '2023-11-14T14:20:00Z'\r\n            },\r\n            {\r\n              id: 2,\r\n              name: 'Greenhouse 2 Ventilation Fan',\r\n              type: 'fan',\r\n              location: 'Greenhouse 2',\r\n              status: 'low',\r\n              mode: 'auto',\r\n              is_active: true,\r\n              mqtt_topic: 'farm/actuators/fan/2',\r\n              created_at: '2023-10-01T08:00:00Z',\r\n              updated_at: '2023-11-15T10:30:00Z',\r\n              parameters: {\r\n                speed: 2,\r\n                max_speed: 5,\r\n                direction: 'forward'\r\n              }\r\n            },\r\n            {\r\n              id: 3,\r\n              name: 'Greenhouse 1 Lighting System',\r\n              type: 'lighting',\r\n              location: 'Greenhouse 1',\r\n              status: 'on',\r\n              mode: 'auto',\r\n              is_active: true,\r\n              mqtt_topic: 'farm/actuators/lighting/1',\r\n              created_at: '2023-10-01T08:00:00Z',\r\n              updated_at: '2023-11-15T10:30:00Z',\r\n              parameters: {\r\n                brightness: 80,\r\n                color_temp: 4000\r\n              }\r\n            },\r\n            {\r\n              id: 4,\r\n              name: 'Greenhouse 3 Humidifier',\r\n              type: 'humidifier',\r\n              location: 'Greenhouse 3',\r\n              status: 'off',\r\n              mode: 'manual',\r\n              is_active: false,\r\n              mqtt_topic: 'farm/actuators/humidifier/1',\r\n              created_at: '2023-10-01T08:00:00Z',\r\n              updated_at: '2023-11-15T10:30:00Z'\r\n            }\r\n          ]\r\n        });\r\n      }, 500); // Simulate network delay\r\n    });\r\n  },\r\n  getActuator: (id) => {\r\n    // Use mock data for actuator details to avoid API issues\r\n    console.log(`模拟获取执行器详情, ID: ${id}`);\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        let actuator = null;\r\n        \r\n        // Return specific details based on actuator ID\r\n        switch(parseInt(id)) {\r\n          case 1:\r\n            actuator = {\r\n              id: 1,\r\n              name: 'Greenhouse 1 Irrigation System',\r\n              type: 'irrigation',\r\n              location: 'Greenhouse 1',\r\n              status: 'off',\r\n              mode: 'manual',\r\n              is_active: true,\r\n              mqtt_topic: 'farm/actuators/irrigation/1',\r\n              created_at: '2023-10-01T08:00:00Z',\r\n              updated_at: '2023-11-15T10:30:00Z',\r\n              last_control_time: '2023-11-14T14:20:00Z',\r\n              description: 'Main irrigation system for Greenhouse 1',\r\n              parameters: {\r\n                water_flow: 2.5,\r\n                duration: 30,\r\n                schedule: 'daily',\r\n                auto_threshold: 30\r\n              }\r\n            };\r\n            break;\r\n          case 2:\r\n            actuator = {\r\n              id: 2,\r\n              name: 'Greenhouse 2 Ventilation Fan',\r\n              type: 'fan',\r\n              location: 'Greenhouse 2',\r\n              status: 'low',\r\n              mode: 'auto',\r\n              is_active: true,\r\n              mqtt_topic: 'farm/actuators/fan/2',\r\n              created_at: '2023-10-01T08:00:00Z',\r\n              updated_at: '2023-11-15T10:30:00Z',\r\n              description: 'Main ventilation fan for Greenhouse 2',\r\n              parameters: {\r\n                speed: 2,\r\n                max_speed: 5,\r\n                direction: 'forward',\r\n                auto_trigger_temp: 28\r\n              }\r\n            };\r\n            break;\r\n          case 3:\r\n            actuator = {\r\n              id: 3,\r\n              name: 'Greenhouse 1 Lighting System',\r\n              type: 'lighting',\r\n              location: 'Greenhouse 1',\r\n              status: 'on',\r\n              mode: 'auto',\r\n              is_active: true,\r\n              mqtt_topic: 'farm/actuators/lighting/1',\r\n              created_at: '2023-10-01T08:00:00Z',\r\n              updated_at: '2023-11-15T10:30:00Z',\r\n              description: 'Main lighting system for Greenhouse 1',\r\n              parameters: {\r\n                brightness: 80,\r\n                color_temp: 4000,\r\n                schedule_on: '06:00',\r\n                schedule_off: '20:00'\r\n              }\r\n            };\r\n            break;\r\n          case 4:\r\n            actuator = {\r\n              id: 4,\r\n              name: 'Greenhouse 3 Humidifier',\r\n              type: 'humidifier',\r\n              location: 'Greenhouse 3',\r\n              status: 'off',\r\n              mode: 'manual',\r\n              is_active: false,\r\n              mqtt_topic: 'farm/actuators/humidifier/1',\r\n              created_at: '2023-10-01T08:00:00Z',\r\n              updated_at: '2023-11-15T10:30:00Z',\r\n              description: 'Main humidifier for Greenhouse 3',\r\n              parameters: {\r\n                capacity: 5,\r\n                auto_trigger_humidity: 40,\r\n                auto_stop_humidity: 60\r\n              }\r\n            };\r\n            break;\r\n          default:\r\n            actuator = {\r\n              id: parseInt(id),\r\n              name: `Unknown Actuator ${id}`,\r\n              type: 'unknown',\r\n              location: 'Unknown',\r\n              status: 'error',\r\n              mode: 'manual',\r\n              is_active: false,\r\n              mqtt_topic: `farm/actuators/unknown/${id}`,\r\n              created_at: '2023-10-01T08:00:00Z',\r\n              updated_at: '2023-11-15T10:30:00Z'\r\n            };\r\n        }\r\n        \r\n        resolve({\r\n          success: true,\r\n          data: actuator\r\n        });\r\n      }, 500); // Simulate network delay\r\n    });\r\n  },\r\n  getActuatorLogs: (id) => {\r\n    // Use mock data for actuator logs to avoid API issues\r\n    console.log(`模拟获取执行器日志, ID: ${id}`);\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          success: true,\r\n          data: [\r\n            {\r\n              id: 1,\r\n              actuator_id: parseInt(id),\r\n              timestamp: new Date(Date.now() - 1000 * 60 * 5).toISOString(),\r\n              status: 'on',\r\n              message: 'Manual activation of actuator',\r\n              user: 'admin',\r\n              source: 'web'\r\n            },\r\n            {\r\n              id: 2,\r\n              actuator_id: parseInt(id),\r\n              timestamp: new Date(Date.now() - 1000 * 60 * 60).toISOString(),\r\n              status: 'off',\r\n              message: 'Actuator turned off by automatic rule',\r\n              user: 'system',\r\n              source: 'rule'\r\n            },\r\n            {\r\n              id: 3,\r\n              actuator_id: parseInt(id),\r\n              timestamp: new Date(Date.now() - 1000 * 60 * 60 * 12).toISOString(),\r\n              status: 'on',\r\n              message: 'Adjusted actuator parameters',\r\n              user: 'admin',\r\n              source: 'api'\r\n            }\r\n          ]\r\n        });\r\n      }, 500); // Simulate network delay\r\n    });\r\n  },\r\n  getActuatorStatuses: (id) => apiCall(`/actuators/${id}/statuses`),\r\n  controlActuator: (id, data) => {\r\n    // Use mock data for actuator control to avoid API issues\r\n    console.log(`模拟控制执行器 ID: ${id}, 操作: ${JSON.stringify(data)}`);\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          success: true,\r\n          message: 'Operation successful',\r\n          data: {\r\n            ...data,\r\n            actuator_id: id,\r\n            timestamp: new Date().toISOString()\r\n          }\r\n        });\r\n      }, 500); // Simulate network delay\r\n    });\r\n  },\r\n  updateActuator: (id, data) => apiCall(`/actuators/${id}`, 'PUT', data),\r\n  updateActuatorRules: (id, data) => apiCall(`/actuators/${id}/rules`, 'PUT', data),\r\n  updateActuatorParameters: (id, data) => apiCall(`/actuators/${id}/parameters`, 'PUT', data),\r\n};\r\n\r\nexport const alertAPI = {\r\n  getAlerts: (page = 1, limit = 10) => apiCall(`/alerts?page=${page}&limit=${limit}`),\r\n  markAsRead: (id) => apiCall(`/alerts/${id}/read`, 'POST'),\r\n  markAllAsRead: () => apiCall('/alerts/read-all', 'POST'),\r\n  deleteAlert: (id) => apiCall(`/alerts/${id}`, 'DELETE'),\r\n  getAlertSettings: () => apiCall('/alerts/settings'),\r\n  updateAlertSettings: (data) => apiCall('/alerts/settings', 'PUT', data),\r\n};\r\n\r\nexport const analyticsAPI = {\r\n  getSensorStats: (timeRange) => apiCall(`/analytics/sensors?timeRange=${timeRange}`),\r\n  getActuatorStats: (timeRange) => apiCall(`/analytics/actuators?timeRange=${timeRange}`),\r\n  getCorrelationData: (sensors, timeRange) => apiCall(`/analytics/correlation?sensors=${sensors.join(',')}&timeRange=${timeRange}`),\r\n  getEnergyUsage: (timeRange) => apiCall(`/analytics/energy?timeRange=${timeRange}`),\r\n  getYieldData: (timeRange) => apiCall(`/analytics/yield?timeRange=${timeRange}`),\r\n};\r\n\r\nexport const settingsAPI = {\r\n  getSystemSettings: () => apiCall('/settings/system'),\r\n  updateSystemSettings: (data) => apiCall('/settings/system', 'PUT', data),\r\n  getNotificationSettings: () => apiCall('/settings/notifications'),\r\n  updateNotificationSettings: (data) => apiCall('/settings/notifications', 'PUT', data),\r\n  getBackupSettings: () => apiCall('/settings/backup'),\r\n  updateBackupSettings: (data) => apiCall('/settings/backup', 'PUT', data),\r\n  backupNow: () => apiCall('/settings/backup/now', 'POST'),\r\n  restoreBackup: (id) => apiCall(`/settings/backup/restore/${id}`, 'POST'),\r\n  getDeviceSettings: () => apiCall('/settings/devices'),\r\n  updateDeviceSettings: (data) => apiCall('/settings/devices', 'PUT', data),\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}