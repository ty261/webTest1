{"ast":null,"code":"\"use strict\";\n'use client';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getValueToPositionMapper = getValueToPositionMapper;\nexports.useRadiusScale = useRadiusScale;\nexports.useRotationScale = useRotationScale;\nexports.useXScale = useXScale;\nexports.useYScale = useYScale;\nvar _isBandScale = require(\"../internals/isBandScale\");\nvar _useAxis = require(\"./useAxis\");\n/**\n * For a given scale return a function that map value to their position.\n * Useful when dealing with specific scale such as band.\n * @param {D3Scale} scale The scale to use\n * @returns {(value: any) => number} A function that map value to their position\n */\nfunction getValueToPositionMapper(scale) {\n  if ((0, _isBandScale.isBandScale)(scale)) {\n    return value => (scale(value) ?? 0) + scale.bandwidth() / 2;\n  }\n  return value => scale(value);\n}\n\n/**\n * Get the X scale.\n *\n * @param {AxisId | undefined} axisId - If provided returns the scale for the x axis with axisId, else returns the values for the default x axis.\n * @returns {AxisScaleConfig[S]['scale']} The scale for the specified X axis.\n */\nfunction useXScale(axisId) {\n  const axis = (0, _useAxis.useXAxis)(axisId);\n  return axis.scale;\n}\n\n/**\n * Get the Y scale.\n *\n * @param {AxisId | undefined} axisId - If provided returns the scale for the y axis with axisId, else returns the values for the default y axis.\n * @returns {AxisScaleConfig[S]['scale']} The scale for the specified Y axis.\n */\nfunction useYScale(axisId) {\n  const axis = (0, _useAxis.useYAxis)(axisId);\n  return axis.scale;\n}\nfunction useRotationScale(identifier) {\n  const axis = (0, _useAxis.useRotationAxis)(identifier);\n  return axis?.scale;\n}\nfunction useRadiusScale(identifier) {\n  const axis = (0, _useAxis.useRadiusAxis)(identifier);\n  return axis?.scale;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","getValueToPositionMapper","useRadiusScale","useRotationScale","useXScale","useYScale","_isBandScale","require","_useAxis","scale","isBandScale","bandwidth","axisId","axis","useXAxis","useYAxis","identifier","useRotationAxis","useRadiusAxis"],"sources":["C:/Users/LIJIN/Desktop/webTest/Bak/webTest/frontend/node_modules/@mui/x-charts/hooks/useScale.js"],"sourcesContent":["\"use strict\";\n'use client';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getValueToPositionMapper = getValueToPositionMapper;\nexports.useRadiusScale = useRadiusScale;\nexports.useRotationScale = useRotationScale;\nexports.useXScale = useXScale;\nexports.useYScale = useYScale;\nvar _isBandScale = require(\"../internals/isBandScale\");\nvar _useAxis = require(\"./useAxis\");\n/**\n * For a given scale return a function that map value to their position.\n * Useful when dealing with specific scale such as band.\n * @param {D3Scale} scale The scale to use\n * @returns {(value: any) => number} A function that map value to their position\n */\nfunction getValueToPositionMapper(scale) {\n  if ((0, _isBandScale.isBandScale)(scale)) {\n    return value => (scale(value) ?? 0) + scale.bandwidth() / 2;\n  }\n  return value => scale(value);\n}\n\n/**\n * Get the X scale.\n *\n * @param {AxisId | undefined} axisId - If provided returns the scale for the x axis with axisId, else returns the values for the default x axis.\n * @returns {AxisScaleConfig[S]['scale']} The scale for the specified X axis.\n */\nfunction useXScale(axisId) {\n  const axis = (0, _useAxis.useXAxis)(axisId);\n  return axis.scale;\n}\n\n/**\n * Get the Y scale.\n *\n * @param {AxisId | undefined} axisId - If provided returns the scale for the y axis with axisId, else returns the values for the default y axis.\n * @returns {AxisScaleConfig[S]['scale']} The scale for the specified Y axis.\n */\nfunction useYScale(axisId) {\n  const axis = (0, _useAxis.useYAxis)(axisId);\n  return axis.scale;\n}\nfunction useRotationScale(identifier) {\n  const axis = (0, _useAxis.useRotationAxis)(identifier);\n  return axis?.scale;\n}\nfunction useRadiusScale(identifier) {\n  const axis = (0, _useAxis.useRadiusAxis)(identifier);\n  return axis?.scale;\n}"],"mappings":"AAAA,YAAY;AACZ,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,wBAAwB,GAAGA,wBAAwB;AAC3DF,OAAO,CAACG,cAAc,GAAGA,cAAc;AACvCH,OAAO,CAACI,gBAAgB,GAAGA,gBAAgB;AAC3CJ,OAAO,CAACK,SAAS,GAAGA,SAAS;AAC7BL,OAAO,CAACM,SAAS,GAAGA,SAAS;AAC7B,IAAIC,YAAY,GAAGC,OAAO,CAAC,0BAA0B,CAAC;AACtD,IAAIC,QAAQ,GAAGD,OAAO,CAAC,WAAW,CAAC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,SAASN,wBAAwBA,CAACQ,KAAK,EAAE;EACvC,IAAI,CAAC,CAAC,EAAEH,YAAY,CAACI,WAAW,EAAED,KAAK,CAAC,EAAE;IACxC,OAAOT,KAAK,IAAI,CAACS,KAAK,CAACT,KAAK,CAAC,IAAI,CAAC,IAAIS,KAAK,CAACE,SAAS,CAAC,CAAC,GAAG,CAAC;EAC7D;EACA,OAAOX,KAAK,IAAIS,KAAK,CAACT,KAAK,CAAC;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,SAASA,CAACQ,MAAM,EAAE;EACzB,MAAMC,IAAI,GAAG,CAAC,CAAC,EAAEL,QAAQ,CAACM,QAAQ,EAAEF,MAAM,CAAC;EAC3C,OAAOC,IAAI,CAACJ,KAAK;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASJ,SAASA,CAACO,MAAM,EAAE;EACzB,MAAMC,IAAI,GAAG,CAAC,CAAC,EAAEL,QAAQ,CAACO,QAAQ,EAAEH,MAAM,CAAC;EAC3C,OAAOC,IAAI,CAACJ,KAAK;AACnB;AACA,SAASN,gBAAgBA,CAACa,UAAU,EAAE;EACpC,MAAMH,IAAI,GAAG,CAAC,CAAC,EAAEL,QAAQ,CAACS,eAAe,EAAED,UAAU,CAAC;EACtD,OAAOH,IAAI,EAAEJ,KAAK;AACpB;AACA,SAASP,cAAcA,CAACc,UAAU,EAAE;EAClC,MAAMH,IAAI,GAAG,CAAC,CAAC,EAAEL,QAAQ,CAACU,aAAa,EAAEF,UAAU,CAAC;EACpD,OAAOH,IAAI,EAAEJ,KAAK;AACpB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}