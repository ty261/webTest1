{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _index = require(\"../../lib-vendor/robust-predicates/index.js\");\nconst EPSILON = Math.pow(2, -52);\nconst EDGE_STACK = new Uint32Array(512);\nclass Delaunator {\n  static from(points, getX = defaultGetX, getY = defaultGetY) {\n    const n = points.length;\n    const coords = new Float64Array(n * 2);\n    for (let i = 0; i < n; i++) {\n      const p = points[i];\n      coords[2 * i] = getX(p);\n      coords[2 * i + 1] = getY(p);\n    }\n    return new Delaunator(coords);\n  }\n  constructor(coords) {\n    const n = coords.length >> 1;\n    if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\n    this.coords = coords;\n\n    // arrays that will store the triangulation graph\n    const maxTriangles = Math.max(2 * n - 5, 0);\n    this._triangles = new Uint32Array(maxTriangles * 3);\n    this._halfedges = new Int32Array(maxTriangles * 3);\n\n    // temporary arrays for tracking the edges of the advancing convex hull\n    this._hashSize = Math.ceil(Math.sqrt(n));\n    this._hullPrev = new Uint32Array(n); // edge to prev edge\n    this._hullNext = new Uint32Array(n); // edge to next edge\n    this._hullTri = new Uint32Array(n); // edge to adjacent triangle\n    this._hullHash = new Int32Array(this._hashSize); // angular edge hash\n\n    // temporary arrays for sorting points\n    this._ids = new Uint32Array(n);\n    this._dists = new Float64Array(n);\n    this.update();\n  }\n  update() {\n    const {\n      coords,\n      _hullPrev: hullPrev,\n      _hullNext: hullNext,\n      _hullTri: hullTri,\n      _hullHash: hullHash\n    } = this;\n    const n = coords.length >> 1;\n\n    // populate an array of point indices; calculate input data bbox\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n    for (let i = 0; i < n; i++) {\n      const x = coords[2 * i];\n      const y = coords[2 * i + 1];\n      if (x < minX) minX = x;\n      if (y < minY) minY = y;\n      if (x > maxX) maxX = x;\n      if (y > maxY) maxY = y;\n      this._ids[i] = i;\n    }\n    const cx = (minX + maxX) / 2;\n    const cy = (minY + maxY) / 2;\n    let i0, i1, i2;\n\n    // pick a seed point close to the center\n    for (let i = 0, minDist = Infinity; i < n; i++) {\n      const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);\n      if (d < minDist) {\n        i0 = i;\n        minDist = d;\n      }\n    }\n    const i0x = coords[2 * i0];\n    const i0y = coords[2 * i0 + 1];\n\n    // find the point closest to the seed\n    for (let i = 0, minDist = Infinity; i < n; i++) {\n      if (i === i0) continue;\n      const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);\n      if (d < minDist && d > 0) {\n        i1 = i;\n        minDist = d;\n      }\n    }\n    let i1x = coords[2 * i1];\n    let i1y = coords[2 * i1 + 1];\n    let minRadius = Infinity;\n\n    // find the third point which forms the smallest circumcircle with the first two\n    for (let i = 0; i < n; i++) {\n      if (i === i0 || i === i1) continue;\n      const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);\n      if (r < minRadius) {\n        i2 = i;\n        minRadius = r;\n      }\n    }\n    let i2x = coords[2 * i2];\n    let i2y = coords[2 * i2 + 1];\n    if (minRadius === Infinity) {\n      // order collinear points by dx (or dy if all x are identical)\n      // and return the list as a hull\n      for (let i = 0; i < n; i++) {\n        this._dists[i] = coords[2 * i] - coords[0] || coords[2 * i + 1] - coords[1];\n      }\n      quicksort(this._ids, this._dists, 0, n - 1);\n      const hull = new Uint32Array(n);\n      let j = 0;\n      for (let i = 0, d0 = -Infinity; i < n; i++) {\n        const id = this._ids[i];\n        const d = this._dists[id];\n        if (d > d0) {\n          hull[j++] = id;\n          d0 = d;\n        }\n      }\n      this.hull = hull.subarray(0, j);\n      this.triangles = new Uint32Array(0);\n      this.halfedges = new Uint32Array(0);\n      return;\n    }\n\n    // swap the order of the seed points for counter-clockwise orientation\n    if ((0, _index.orient2d)(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {\n      const i = i1;\n      const x = i1x;\n      const y = i1y;\n      i1 = i2;\n      i1x = i2x;\n      i1y = i2y;\n      i2 = i;\n      i2x = x;\n      i2y = y;\n    }\n    const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n    this._cx = center.x;\n    this._cy = center.y;\n    for (let i = 0; i < n; i++) {\n      this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);\n    }\n\n    // sort the points by distance from the seed triangle circumcenter\n    quicksort(this._ids, this._dists, 0, n - 1);\n\n    // set up the seed triangle as the starting hull\n    this._hullStart = i0;\n    let hullSize = 3;\n    hullNext[i0] = hullPrev[i2] = i1;\n    hullNext[i1] = hullPrev[i0] = i2;\n    hullNext[i2] = hullPrev[i1] = i0;\n    hullTri[i0] = 0;\n    hullTri[i1] = 1;\n    hullTri[i2] = 2;\n    hullHash.fill(-1);\n    hullHash[this._hashKey(i0x, i0y)] = i0;\n    hullHash[this._hashKey(i1x, i1y)] = i1;\n    hullHash[this._hashKey(i2x, i2y)] = i2;\n    this.trianglesLen = 0;\n    this._addTriangle(i0, i1, i2, -1, -1, -1);\n    for (let k = 0, xp, yp; k < this._ids.length; k++) {\n      const i = this._ids[k];\n      const x = coords[2 * i];\n      const y = coords[2 * i + 1];\n\n      // skip near-duplicate points\n      if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;\n      xp = x;\n      yp = y;\n\n      // skip seed triangle points\n      if (i === i0 || i === i1 || i === i2) continue;\n\n      // find a visible edge on the convex hull using edge hash\n      let start = 0;\n      for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {\n        start = hullHash[(key + j) % this._hashSize];\n        if (start !== -1 && start !== hullNext[start]) break;\n      }\n      start = hullPrev[start];\n      let e = start,\n        q;\n      while (q = hullNext[e], (0, _index.orient2d)(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1]) >= 0) {\n        e = q;\n        if (e === start) {\n          e = -1;\n          break;\n        }\n      }\n      if (e === -1) continue; // likely a near-duplicate point; skip it\n\n      // add the first triangle from the point\n      let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);\n\n      // recursively flip triangles from the point until they satisfy the Delaunay condition\n      hullTri[i] = this._legalize(t + 2);\n      hullTri[e] = t; // keep track of boundary triangles on the hull\n      hullSize++;\n\n      // walk forward through the hull, adding more triangles and flipping recursively\n      let n = hullNext[e];\n      while (q = hullNext[n], (0, _index.orient2d)(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1]) < 0) {\n        t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);\n        hullTri[i] = this._legalize(t + 2);\n        hullNext[n] = n; // mark as removed\n        hullSize--;\n        n = q;\n      }\n\n      // walk backward from the other side, adding more triangles and flipping\n      if (e === start) {\n        while (q = hullPrev[e], (0, _index.orient2d)(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1]) < 0) {\n          t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);\n          this._legalize(t + 2);\n          hullTri[q] = t;\n          hullNext[e] = e; // mark as removed\n          hullSize--;\n          e = q;\n        }\n      }\n\n      // update the hull indices\n      this._hullStart = hullPrev[i] = e;\n      hullNext[e] = hullPrev[n] = i;\n      hullNext[i] = n;\n\n      // save the two new edges in the hash table\n      hullHash[this._hashKey(x, y)] = i;\n      hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\n    }\n    this.hull = new Uint32Array(hullSize);\n    for (let i = 0, e = this._hullStart; i < hullSize; i++) {\n      this.hull[i] = e;\n      e = hullNext[e];\n    }\n\n    // trim typed triangle mesh arrays\n    this.triangles = this._triangles.subarray(0, this.trianglesLen);\n    this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\n  }\n  _hashKey(x, y) {\n    return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n  }\n  _legalize(a) {\n    const {\n      _triangles: triangles,\n      _halfedges: halfedges,\n      coords\n    } = this;\n    let i = 0;\n    let ar = 0;\n\n    // recursion eliminated with a fixed-size stack\n    while (true) {\n      const b = halfedges[a];\n\n      /* if the pair of triangles doesn't satisfy the Delaunay condition\n       * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n       * then do the same check/flip recursively for the new pair of triangles\n       *\n       *           pl                    pl\n       *          /||\\                  /  \\\n       *       al/ || \\bl            al/    \\a\n       *        /  ||  \\              /      \\\n       *       /  a||b  \\    flip    /___ar___\\\n       *     p0\\   ||   /p1   =>   p0\\---bl---/p1\n       *        \\  ||  /              \\      /\n       *       ar\\ || /br             b\\    /br\n       *          \\||/                  \\  /\n       *           pr                    pr\n       */\n      const a0 = a - a % 3;\n      ar = a0 + (a + 2) % 3;\n      if (b === -1) {\n        // convex hull edge\n        if (i === 0) break;\n        a = EDGE_STACK[--i];\n        continue;\n      }\n      const b0 = b - b % 3;\n      const al = a0 + (a + 1) % 3;\n      const bl = b0 + (b + 2) % 3;\n      const p0 = triangles[ar];\n      const pr = triangles[a];\n      const pl = triangles[al];\n      const p1 = triangles[bl];\n      const illegal = inCircle(coords[2 * p0], coords[2 * p0 + 1], coords[2 * pr], coords[2 * pr + 1], coords[2 * pl], coords[2 * pl + 1], coords[2 * p1], coords[2 * p1 + 1]);\n      if (illegal) {\n        triangles[a] = p1;\n        triangles[b] = p0;\n        const hbl = halfedges[bl];\n\n        // edge swapped on the other side of the hull (rare); fix the halfedge reference\n        if (hbl === -1) {\n          let e = this._hullStart;\n          do {\n            if (this._hullTri[e] === bl) {\n              this._hullTri[e] = a;\n              break;\n            }\n            e = this._hullPrev[e];\n          } while (e !== this._hullStart);\n        }\n        this._link(a, hbl);\n        this._link(b, halfedges[ar]);\n        this._link(ar, bl);\n        const br = b0 + (b + 1) % 3;\n\n        // don't worry about hitting the cap: it can only happen on extremely degenerate input\n        if (i < EDGE_STACK.length) {\n          EDGE_STACK[i++] = br;\n        }\n      } else {\n        if (i === 0) break;\n        a = EDGE_STACK[--i];\n      }\n    }\n    return ar;\n  }\n  _link(a, b) {\n    this._halfedges[a] = b;\n    if (b !== -1) this._halfedges[b] = a;\n  }\n\n  // add a new triangle given vertex indices and adjacent half-edge ids\n  _addTriangle(i0, i1, i2, a, b, c) {\n    const t = this.trianglesLen;\n    this._triangles[t] = i0;\n    this._triangles[t + 1] = i1;\n    this._triangles[t + 2] = i2;\n    this._link(t, a);\n    this._link(t + 1, b);\n    this._link(t + 2, c);\n    this.trianglesLen += 3;\n    return t;\n  }\n}\n\n// monotonically increases with real angle, but doesn't need expensive trigonometry\nexports.default = Delaunator;\nfunction pseudoAngle(dx, dy) {\n  const p = dx / (Math.abs(dx) + Math.abs(dy));\n  return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n}\nfunction dist(ax, ay, bx, by) {\n  const dx = ax - bx;\n  const dy = ay - by;\n  return dx * dx + dy * dy;\n}\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\n  const dx = ax - px;\n  const dy = ay - py;\n  const ex = bx - px;\n  const ey = by - py;\n  const fx = cx - px;\n  const fy = cy - py;\n  const ap = dx * dx + dy * dy;\n  const bp = ex * ex + ey * ey;\n  const cp = fx * fx + fy * fy;\n  return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;\n}\nfunction circumradius(ax, ay, bx, by, cx, cy) {\n  const dx = bx - ax;\n  const dy = by - ay;\n  const ex = cx - ax;\n  const ey = cy - ay;\n  const bl = dx * dx + dy * dy;\n  const cl = ex * ex + ey * ey;\n  const d = 0.5 / (dx * ey - dy * ex);\n  const x = (ey * bl - dy * cl) * d;\n  const y = (dx * cl - ex * bl) * d;\n  return x * x + y * y;\n}\nfunction circumcenter(ax, ay, bx, by, cx, cy) {\n  const dx = bx - ax;\n  const dy = by - ay;\n  const ex = cx - ax;\n  const ey = cy - ay;\n  const bl = dx * dx + dy * dy;\n  const cl = ex * ex + ey * ey;\n  const d = 0.5 / (dx * ey - dy * ex);\n  const x = ax + (ey * bl - dy * cl) * d;\n  const y = ay + (dx * cl - ex * bl) * d;\n  return {\n    x,\n    y\n  };\n}\nfunction quicksort(ids, dists, left, right) {\n  if (right - left <= 20) {\n    for (let i = left + 1; i <= right; i++) {\n      const temp = ids[i];\n      const tempDist = dists[temp];\n      let j = i - 1;\n      while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];\n      ids[j + 1] = temp;\n    }\n  } else {\n    const median = left + right >> 1;\n    let i = left + 1;\n    let j = right;\n    swap(ids, median, i);\n    if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);\n    if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);\n    if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);\n    const temp = ids[i];\n    const tempDist = dists[temp];\n    while (true) {\n      do i++; while (dists[ids[i]] < tempDist);\n      do j--; while (dists[ids[j]] > tempDist);\n      if (j < i) break;\n      swap(ids, i, j);\n    }\n    ids[left + 1] = ids[j];\n    ids[j] = temp;\n    if (right - i + 1 >= j - left) {\n      quicksort(ids, dists, i, right);\n      quicksort(ids, dists, left, j - 1);\n    } else {\n      quicksort(ids, dists, left, j - 1);\n      quicksort(ids, dists, i, right);\n    }\n  }\n}\nfunction swap(arr, i, j) {\n  const tmp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = tmp;\n}\nfunction defaultGetX(p) {\n  return p[0];\n}\nfunction defaultGetY(p) {\n  return p[1];\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_index","require","EPSILON","Math","pow","EDGE_STACK","Uint32Array","Delaunator","from","points","getX","defaultGetX","getY","defaultGetY","n","length","coords","Float64Array","i","p","constructor","Error","maxTriangles","max","_triangles","_halfedges","Int32Array","_hashSize","ceil","sqrt","_hullPrev","_hullNext","_hullTri","_hullHash","_ids","_dists","update","hullPrev","hullNext","hullTri","hullHash","minX","Infinity","minY","maxX","maxY","x","y","cx","cy","i0","i1","i2","minDist","d","dist","i0x","i0y","i1x","i1y","minRadius","r","circumradius","i2x","i2y","quicksort","hull","j","d0","id","subarray","triangles","halfedges","orient2d","center","circumcenter","_cx","_cy","_hullStart","hullSize","fill","_hashKey","trianglesLen","_addTriangle","k","xp","yp","abs","start","key","e","q","t","_legalize","floor","pseudoAngle","a","ar","b","a0","b0","al","bl","p0","pr","pl","p1","illegal","inCircle","hbl","_link","br","c","dx","dy","ax","ay","bx","by","px","py","ex","ey","fx","fy","ap","bp","cp","cl","ids","dists","left","right","temp","tempDist","median","swap","arr","tmp"],"sources":["C:/Users/LIJIN/Desktop/webTest/Bak/webTest/frontend/node_modules/@mui/x-charts-vendor/lib-vendor/delaunator/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _index = require(\"../../lib-vendor/robust-predicates/index.js\");\nconst EPSILON = Math.pow(2, -52);\nconst EDGE_STACK = new Uint32Array(512);\nclass Delaunator {\n  static from(points, getX = defaultGetX, getY = defaultGetY) {\n    const n = points.length;\n    const coords = new Float64Array(n * 2);\n    for (let i = 0; i < n; i++) {\n      const p = points[i];\n      coords[2 * i] = getX(p);\n      coords[2 * i + 1] = getY(p);\n    }\n    return new Delaunator(coords);\n  }\n  constructor(coords) {\n    const n = coords.length >> 1;\n    if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\n    this.coords = coords;\n\n    // arrays that will store the triangulation graph\n    const maxTriangles = Math.max(2 * n - 5, 0);\n    this._triangles = new Uint32Array(maxTriangles * 3);\n    this._halfedges = new Int32Array(maxTriangles * 3);\n\n    // temporary arrays for tracking the edges of the advancing convex hull\n    this._hashSize = Math.ceil(Math.sqrt(n));\n    this._hullPrev = new Uint32Array(n); // edge to prev edge\n    this._hullNext = new Uint32Array(n); // edge to next edge\n    this._hullTri = new Uint32Array(n); // edge to adjacent triangle\n    this._hullHash = new Int32Array(this._hashSize); // angular edge hash\n\n    // temporary arrays for sorting points\n    this._ids = new Uint32Array(n);\n    this._dists = new Float64Array(n);\n    this.update();\n  }\n  update() {\n    const {\n      coords,\n      _hullPrev: hullPrev,\n      _hullNext: hullNext,\n      _hullTri: hullTri,\n      _hullHash: hullHash\n    } = this;\n    const n = coords.length >> 1;\n\n    // populate an array of point indices; calculate input data bbox\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n    for (let i = 0; i < n; i++) {\n      const x = coords[2 * i];\n      const y = coords[2 * i + 1];\n      if (x < minX) minX = x;\n      if (y < minY) minY = y;\n      if (x > maxX) maxX = x;\n      if (y > maxY) maxY = y;\n      this._ids[i] = i;\n    }\n    const cx = (minX + maxX) / 2;\n    const cy = (minY + maxY) / 2;\n    let i0, i1, i2;\n\n    // pick a seed point close to the center\n    for (let i = 0, minDist = Infinity; i < n; i++) {\n      const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);\n      if (d < minDist) {\n        i0 = i;\n        minDist = d;\n      }\n    }\n    const i0x = coords[2 * i0];\n    const i0y = coords[2 * i0 + 1];\n\n    // find the point closest to the seed\n    for (let i = 0, minDist = Infinity; i < n; i++) {\n      if (i === i0) continue;\n      const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);\n      if (d < minDist && d > 0) {\n        i1 = i;\n        minDist = d;\n      }\n    }\n    let i1x = coords[2 * i1];\n    let i1y = coords[2 * i1 + 1];\n    let minRadius = Infinity;\n\n    // find the third point which forms the smallest circumcircle with the first two\n    for (let i = 0; i < n; i++) {\n      if (i === i0 || i === i1) continue;\n      const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);\n      if (r < minRadius) {\n        i2 = i;\n        minRadius = r;\n      }\n    }\n    let i2x = coords[2 * i2];\n    let i2y = coords[2 * i2 + 1];\n    if (minRadius === Infinity) {\n      // order collinear points by dx (or dy if all x are identical)\n      // and return the list as a hull\n      for (let i = 0; i < n; i++) {\n        this._dists[i] = coords[2 * i] - coords[0] || coords[2 * i + 1] - coords[1];\n      }\n      quicksort(this._ids, this._dists, 0, n - 1);\n      const hull = new Uint32Array(n);\n      let j = 0;\n      for (let i = 0, d0 = -Infinity; i < n; i++) {\n        const id = this._ids[i];\n        const d = this._dists[id];\n        if (d > d0) {\n          hull[j++] = id;\n          d0 = d;\n        }\n      }\n      this.hull = hull.subarray(0, j);\n      this.triangles = new Uint32Array(0);\n      this.halfedges = new Uint32Array(0);\n      return;\n    }\n\n    // swap the order of the seed points for counter-clockwise orientation\n    if ((0, _index.orient2d)(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {\n      const i = i1;\n      const x = i1x;\n      const y = i1y;\n      i1 = i2;\n      i1x = i2x;\n      i1y = i2y;\n      i2 = i;\n      i2x = x;\n      i2y = y;\n    }\n    const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n    this._cx = center.x;\n    this._cy = center.y;\n    for (let i = 0; i < n; i++) {\n      this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);\n    }\n\n    // sort the points by distance from the seed triangle circumcenter\n    quicksort(this._ids, this._dists, 0, n - 1);\n\n    // set up the seed triangle as the starting hull\n    this._hullStart = i0;\n    let hullSize = 3;\n    hullNext[i0] = hullPrev[i2] = i1;\n    hullNext[i1] = hullPrev[i0] = i2;\n    hullNext[i2] = hullPrev[i1] = i0;\n    hullTri[i0] = 0;\n    hullTri[i1] = 1;\n    hullTri[i2] = 2;\n    hullHash.fill(-1);\n    hullHash[this._hashKey(i0x, i0y)] = i0;\n    hullHash[this._hashKey(i1x, i1y)] = i1;\n    hullHash[this._hashKey(i2x, i2y)] = i2;\n    this.trianglesLen = 0;\n    this._addTriangle(i0, i1, i2, -1, -1, -1);\n    for (let k = 0, xp, yp; k < this._ids.length; k++) {\n      const i = this._ids[k];\n      const x = coords[2 * i];\n      const y = coords[2 * i + 1];\n\n      // skip near-duplicate points\n      if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;\n      xp = x;\n      yp = y;\n\n      // skip seed triangle points\n      if (i === i0 || i === i1 || i === i2) continue;\n\n      // find a visible edge on the convex hull using edge hash\n      let start = 0;\n      for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {\n        start = hullHash[(key + j) % this._hashSize];\n        if (start !== -1 && start !== hullNext[start]) break;\n      }\n      start = hullPrev[start];\n      let e = start,\n        q;\n      while (q = hullNext[e], (0, _index.orient2d)(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1]) >= 0) {\n        e = q;\n        if (e === start) {\n          e = -1;\n          break;\n        }\n      }\n      if (e === -1) continue; // likely a near-duplicate point; skip it\n\n      // add the first triangle from the point\n      let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);\n\n      // recursively flip triangles from the point until they satisfy the Delaunay condition\n      hullTri[i] = this._legalize(t + 2);\n      hullTri[e] = t; // keep track of boundary triangles on the hull\n      hullSize++;\n\n      // walk forward through the hull, adding more triangles and flipping recursively\n      let n = hullNext[e];\n      while (q = hullNext[n], (0, _index.orient2d)(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1]) < 0) {\n        t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);\n        hullTri[i] = this._legalize(t + 2);\n        hullNext[n] = n; // mark as removed\n        hullSize--;\n        n = q;\n      }\n\n      // walk backward from the other side, adding more triangles and flipping\n      if (e === start) {\n        while (q = hullPrev[e], (0, _index.orient2d)(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1]) < 0) {\n          t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);\n          this._legalize(t + 2);\n          hullTri[q] = t;\n          hullNext[e] = e; // mark as removed\n          hullSize--;\n          e = q;\n        }\n      }\n\n      // update the hull indices\n      this._hullStart = hullPrev[i] = e;\n      hullNext[e] = hullPrev[n] = i;\n      hullNext[i] = n;\n\n      // save the two new edges in the hash table\n      hullHash[this._hashKey(x, y)] = i;\n      hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\n    }\n    this.hull = new Uint32Array(hullSize);\n    for (let i = 0, e = this._hullStart; i < hullSize; i++) {\n      this.hull[i] = e;\n      e = hullNext[e];\n    }\n\n    // trim typed triangle mesh arrays\n    this.triangles = this._triangles.subarray(0, this.trianglesLen);\n    this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\n  }\n  _hashKey(x, y) {\n    return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n  }\n  _legalize(a) {\n    const {\n      _triangles: triangles,\n      _halfedges: halfedges,\n      coords\n    } = this;\n    let i = 0;\n    let ar = 0;\n\n    // recursion eliminated with a fixed-size stack\n    while (true) {\n      const b = halfedges[a];\n\n      /* if the pair of triangles doesn't satisfy the Delaunay condition\n       * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n       * then do the same check/flip recursively for the new pair of triangles\n       *\n       *           pl                    pl\n       *          /||\\                  /  \\\n       *       al/ || \\bl            al/    \\a\n       *        /  ||  \\              /      \\\n       *       /  a||b  \\    flip    /___ar___\\\n       *     p0\\   ||   /p1   =>   p0\\---bl---/p1\n       *        \\  ||  /              \\      /\n       *       ar\\ || /br             b\\    /br\n       *          \\||/                  \\  /\n       *           pr                    pr\n       */\n      const a0 = a - a % 3;\n      ar = a0 + (a + 2) % 3;\n      if (b === -1) {\n        // convex hull edge\n        if (i === 0) break;\n        a = EDGE_STACK[--i];\n        continue;\n      }\n      const b0 = b - b % 3;\n      const al = a0 + (a + 1) % 3;\n      const bl = b0 + (b + 2) % 3;\n      const p0 = triangles[ar];\n      const pr = triangles[a];\n      const pl = triangles[al];\n      const p1 = triangles[bl];\n      const illegal = inCircle(coords[2 * p0], coords[2 * p0 + 1], coords[2 * pr], coords[2 * pr + 1], coords[2 * pl], coords[2 * pl + 1], coords[2 * p1], coords[2 * p1 + 1]);\n      if (illegal) {\n        triangles[a] = p1;\n        triangles[b] = p0;\n        const hbl = halfedges[bl];\n\n        // edge swapped on the other side of the hull (rare); fix the halfedge reference\n        if (hbl === -1) {\n          let e = this._hullStart;\n          do {\n            if (this._hullTri[e] === bl) {\n              this._hullTri[e] = a;\n              break;\n            }\n            e = this._hullPrev[e];\n          } while (e !== this._hullStart);\n        }\n        this._link(a, hbl);\n        this._link(b, halfedges[ar]);\n        this._link(ar, bl);\n        const br = b0 + (b + 1) % 3;\n\n        // don't worry about hitting the cap: it can only happen on extremely degenerate input\n        if (i < EDGE_STACK.length) {\n          EDGE_STACK[i++] = br;\n        }\n      } else {\n        if (i === 0) break;\n        a = EDGE_STACK[--i];\n      }\n    }\n    return ar;\n  }\n  _link(a, b) {\n    this._halfedges[a] = b;\n    if (b !== -1) this._halfedges[b] = a;\n  }\n\n  // add a new triangle given vertex indices and adjacent half-edge ids\n  _addTriangle(i0, i1, i2, a, b, c) {\n    const t = this.trianglesLen;\n    this._triangles[t] = i0;\n    this._triangles[t + 1] = i1;\n    this._triangles[t + 2] = i2;\n    this._link(t, a);\n    this._link(t + 1, b);\n    this._link(t + 2, c);\n    this.trianglesLen += 3;\n    return t;\n  }\n}\n\n// monotonically increases with real angle, but doesn't need expensive trigonometry\nexports.default = Delaunator;\nfunction pseudoAngle(dx, dy) {\n  const p = dx / (Math.abs(dx) + Math.abs(dy));\n  return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n}\nfunction dist(ax, ay, bx, by) {\n  const dx = ax - bx;\n  const dy = ay - by;\n  return dx * dx + dy * dy;\n}\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\n  const dx = ax - px;\n  const dy = ay - py;\n  const ex = bx - px;\n  const ey = by - py;\n  const fx = cx - px;\n  const fy = cy - py;\n  const ap = dx * dx + dy * dy;\n  const bp = ex * ex + ey * ey;\n  const cp = fx * fx + fy * fy;\n  return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;\n}\nfunction circumradius(ax, ay, bx, by, cx, cy) {\n  const dx = bx - ax;\n  const dy = by - ay;\n  const ex = cx - ax;\n  const ey = cy - ay;\n  const bl = dx * dx + dy * dy;\n  const cl = ex * ex + ey * ey;\n  const d = 0.5 / (dx * ey - dy * ex);\n  const x = (ey * bl - dy * cl) * d;\n  const y = (dx * cl - ex * bl) * d;\n  return x * x + y * y;\n}\nfunction circumcenter(ax, ay, bx, by, cx, cy) {\n  const dx = bx - ax;\n  const dy = by - ay;\n  const ex = cx - ax;\n  const ey = cy - ay;\n  const bl = dx * dx + dy * dy;\n  const cl = ex * ex + ey * ey;\n  const d = 0.5 / (dx * ey - dy * ex);\n  const x = ax + (ey * bl - dy * cl) * d;\n  const y = ay + (dx * cl - ex * bl) * d;\n  return {\n    x,\n    y\n  };\n}\nfunction quicksort(ids, dists, left, right) {\n  if (right - left <= 20) {\n    for (let i = left + 1; i <= right; i++) {\n      const temp = ids[i];\n      const tempDist = dists[temp];\n      let j = i - 1;\n      while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];\n      ids[j + 1] = temp;\n    }\n  } else {\n    const median = left + right >> 1;\n    let i = left + 1;\n    let j = right;\n    swap(ids, median, i);\n    if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);\n    if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);\n    if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);\n    const temp = ids[i];\n    const tempDist = dists[temp];\n    while (true) {\n      do i++; while (dists[ids[i]] < tempDist);\n      do j--; while (dists[ids[j]] > tempDist);\n      if (j < i) break;\n      swap(ids, i, j);\n    }\n    ids[left + 1] = ids[j];\n    ids[j] = temp;\n    if (right - i + 1 >= j - left) {\n      quicksort(ids, dists, i, right);\n      quicksort(ids, dists, left, j - 1);\n    } else {\n      quicksort(ids, dists, left, j - 1);\n      quicksort(ids, dists, i, right);\n    }\n  }\n}\nfunction swap(arr, i, j) {\n  const tmp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = tmp;\n}\nfunction defaultGetX(p) {\n  return p[0];\n}\nfunction defaultGetY(p) {\n  return p[1];\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}