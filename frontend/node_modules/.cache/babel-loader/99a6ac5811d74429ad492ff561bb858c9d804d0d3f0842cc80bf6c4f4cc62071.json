{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LIJIN\\\\Desktop\\\\webTest\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { TOKEN_KEY, USER_KEY } from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState(null);\n\n  // Load user state from localStorage\n  useEffect(() => {\n    const token = localStorage.getItem(TOKEN_KEY);\n    const userStr = localStorage.getItem(USER_KEY);\n    if (token && userStr) {\n      setIsAuthenticated(true);\n      try {\n        setUser(JSON.parse(userStr));\n      } catch (e) {\n        console.error('Failed to parse user data', e);\n      }\n    }\n    setIsLoading(false);\n  }, []);\n\n  // Mock login functionality\n  const login = async (email, password) => {\n    // This should be a real API request, now using mock data\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Check if test account\n        if (email === 'admin@smartfarm.com' && password === 'password123') {\n          const user = {\n            id: 1,\n            name: 'Administrator',\n            email: 'admin@smartfarm.com',\n            role: 'admin'\n          };\n          const token = 'mock-jwt-token-' + Math.random().toString(36).substring(2);\n          localStorage.setItem(TOKEN_KEY, token);\n          localStorage.setItem(USER_KEY, JSON.stringify(user));\n          setUser(user);\n          setIsAuthenticated(true);\n          resolve(user);\n        } else if (email === 'user1@smartfarm.com' && password === 'password123') {\n          const user = {\n            id: 2,\n            name: 'Regular User',\n            email: 'user1@smartfarm.com',\n            role: 'user'\n          };\n          const token = 'mock-jwt-token-' + Math.random().toString(36).substring(2);\n          localStorage.setItem(TOKEN_KEY, token);\n          localStorage.setItem(USER_KEY, JSON.stringify(user));\n          setUser(user);\n          setIsAuthenticated(true);\n          resolve(user);\n        } else {\n          reject(new Error('Email or password incorrect'));\n        }\n      }, 1000);\n    });\n  };\n\n  // Mock registration functionality\n  const register = async (name, email, password) => {\n    // This should be a real API request, now using mock data\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (email === 'admin@smartfarm.com' || email === 'user1@smartfarm.com') {\n          reject(new Error('This email is already registered'));\n          return;\n        }\n        const user = {\n          id: 999,\n          name,\n          email,\n          role: 'user'\n        };\n        const token = 'mock-jwt-token-' + Math.random().toString(36).substring(2);\n        localStorage.setItem(TOKEN_KEY, token);\n        localStorage.setItem(USER_KEY, JSON.stringify(user));\n        setUser(user);\n        setIsAuthenticated(true);\n        resolve(user);\n      }, 1000);\n    });\n  };\n\n  // Logout\n  const logout = () => {\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem(USER_KEY);\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n  const value = {\n    isAuthenticated,\n    isLoading,\n    user,\n    login,\n    logout,\n    register\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"fXtsS9VlG56CFg59Ule3HyF3KXk=\");\n_c = AuthProvider;\nexport default AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","TOKEN_KEY","USER_KEY","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","user","setUser","token","localStorage","getItem","userStr","JSON","parse","e","console","error","login","email","password","Promise","resolve","reject","setTimeout","id","name","role","Math","random","toString","substring","setItem","stringify","Error","register","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/LIJIN/Desktop/webTest/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { TOKEN_KEY, USER_KEY } from '../config';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [user, setUser] = useState(null);\r\n\r\n  // Load user state from localStorage\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(TOKEN_KEY);\r\n    const userStr = localStorage.getItem(USER_KEY);\r\n\r\n    if (token && userStr) {\r\n      setIsAuthenticated(true);\r\n      try {\r\n        setUser(JSON.parse(userStr));\r\n      } catch (e) {\r\n        console.error('Failed to parse user data', e);\r\n      }\r\n    }\r\n    \r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  // Mock login functionality\r\n  const login = async (email, password) => {\r\n    // This should be a real API request, now using mock data\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        // Check if test account\r\n        if (email === 'admin@smartfarm.com' && password === 'password123') {\r\n          const user = {\r\n            id: 1,\r\n            name: 'Administrator',\r\n            email: 'admin@smartfarm.com',\r\n            role: 'admin'\r\n          };\r\n          \r\n          const token = 'mock-jwt-token-' + Math.random().toString(36).substring(2);\r\n          \r\n          localStorage.setItem(TOKEN_KEY, token);\r\n          localStorage.setItem(USER_KEY, JSON.stringify(user));\r\n          \r\n          setUser(user);\r\n          setIsAuthenticated(true);\r\n          resolve(user);\r\n        } else if (email === 'user1@smartfarm.com' && password === 'password123') {\r\n          const user = {\r\n            id: 2,\r\n            name: 'Regular User',\r\n            email: 'user1@smartfarm.com',\r\n            role: 'user'\r\n          };\r\n          \r\n          const token = 'mock-jwt-token-' + Math.random().toString(36).substring(2);\r\n          \r\n          localStorage.setItem(TOKEN_KEY, token);\r\n          localStorage.setItem(USER_KEY, JSON.stringify(user));\r\n          \r\n          setUser(user);\r\n          setIsAuthenticated(true);\r\n          resolve(user);\r\n        } else {\r\n          reject(new Error('Email or password incorrect'));\r\n        }\r\n      }, 1000);\r\n    });\r\n  };\r\n\r\n  // Mock registration functionality\r\n  const register = async (name, email, password) => {\r\n    // This should be a real API request, now using mock data\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (email === 'admin@smartfarm.com' || email === 'user1@smartfarm.com') {\r\n          reject(new Error('This email is already registered'));\r\n          return;\r\n        }\r\n        \r\n        const user = {\r\n          id: 999,\r\n          name,\r\n          email,\r\n          role: 'user'\r\n        };\r\n        \r\n        const token = 'mock-jwt-token-' + Math.random().toString(36).substring(2);\r\n        \r\n        localStorage.setItem(TOKEN_KEY, token);\r\n        localStorage.setItem(USER_KEY, JSON.stringify(user));\r\n        \r\n        setUser(user);\r\n        setIsAuthenticated(true);\r\n        resolve(user);\r\n      }, 1000);\r\n    });\r\n  };\r\n\r\n  // Logout\r\n  const logout = () => {\r\n    localStorage.removeItem(TOKEN_KEY);\r\n    localStorage.removeItem(USER_KEY);\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  const value = {\r\n    isAuthenticated,\r\n    isLoading,\r\n    user,\r\n    login,\r\n    logout,\r\n    register\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\nexport default AuthProvider; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}