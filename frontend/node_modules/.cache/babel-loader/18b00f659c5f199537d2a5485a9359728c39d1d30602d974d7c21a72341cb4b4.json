{"ast":null,"code":"import { API_URL, TOKEN_KEY } from '../config';\n\n// Client-side mock database for actuators\nconst mockActuatorDatabase = {\n  actuators: [{\n    id: 1,\n    name: 'Greenhouse 1 Irrigation System',\n    type: 'irrigation',\n    location: 'Greenhouse 1',\n    status: 'off',\n    mode: 'manual',\n    is_active: true,\n    mqtt_topic: 'farm/actuators/irrigation/1',\n    created_at: '2023-10-01T08:00:00Z',\n    updated_at: '2023-11-15T10:30:00Z',\n    last_control_time: '2023-11-14T14:20:00Z',\n    description: 'Main irrigation system for Greenhouse 1',\n    parameters: {\n      water_flow: 2.5,\n      duration: 30,\n      schedule: 'daily',\n      auto_threshold: 30\n    }\n  }, {\n    id: 2,\n    name: 'Greenhouse 2 Ventilation Fan',\n    type: 'fan',\n    location: 'Greenhouse 2',\n    status: 'low',\n    mode: 'auto',\n    is_active: true,\n    mqtt_topic: 'farm/actuators/fan/2',\n    created_at: '2023-10-01T08:00:00Z',\n    updated_at: '2023-11-15T10:30:00Z',\n    description: 'Main ventilation fan for Greenhouse 2',\n    parameters: {\n      speed: 2,\n      max_speed: 5,\n      direction: 'forward',\n      auto_trigger_temp: 28\n    }\n  }, {\n    id: 3,\n    name: 'Greenhouse 1 Lighting System',\n    type: 'lighting',\n    location: 'Greenhouse 1',\n    status: 'on',\n    mode: 'auto',\n    is_active: true,\n    mqtt_topic: 'farm/actuators/lighting/1',\n    created_at: '2023-10-01T08:00:00Z',\n    updated_at: '2023-11-15T10:30:00Z',\n    description: 'Main lighting system for Greenhouse 1',\n    parameters: {\n      brightness: 80,\n      color_temp: 4000,\n      schedule_on: '06:00',\n      schedule_off: '20:00'\n    }\n  }, {\n    id: 4,\n    name: 'Greenhouse 3 Humidifier',\n    type: 'humidifier',\n    location: 'Greenhouse 3',\n    status: 'off',\n    mode: 'manual',\n    is_active: false,\n    mqtt_topic: 'farm/actuators/humidifier/1',\n    created_at: '2023-10-01T08:00:00Z',\n    updated_at: '2023-11-15T10:30:00Z',\n    description: 'Main humidifier for Greenhouse 3',\n    parameters: {\n      capacity: 5,\n      auto_trigger_humidity: 40,\n      auto_stop_humidity: 60\n    }\n  }],\n  logs: []\n};\n\n// Client-side mock database for sensors\nconst mockSensorDatabase = {\n  sensors: [{\n    id: 1,\n    name: 'Temperature Sensor 1',\n    type: 'temperature',\n    location: 'Greenhouse 1',\n    status: 'active',\n    is_active: true,\n    mqtt_topic: 'farm/sensors/temperature/1',\n    created_at: '2023-10-01T08:00:00Z',\n    updated_at: '2023-11-15T10:30:00Z',\n    model: 'DHT22',\n    manufacturer: 'Acme Sensors',\n    calibration_date: '2023-09-15T00:00:00Z',\n    last_reading: {\n      value: 24.5,\n      unit: '°C',\n      timestamp: new Date().toISOString()\n    }\n  }, {\n    id: 2,\n    name: 'Humidity Sensor 1',\n    type: 'humidity',\n    location: 'Greenhouse 1',\n    status: 'active',\n    is_active: true,\n    mqtt_topic: 'farm/sensors/humidity/1',\n    created_at: '2023-10-01T08:00:00Z',\n    updated_at: '2023-11-15T10:30:00Z',\n    model: 'DHT22',\n    manufacturer: 'Acme Sensors',\n    calibration_date: '2023-09-15T00:00:00Z',\n    last_reading: {\n      value: 65,\n      unit: '%',\n      timestamp: new Date().toISOString()\n    }\n  }, {\n    id: 3,\n    name: 'Light Sensor 1',\n    type: 'light',\n    location: 'Greenhouse 2',\n    status: 'active',\n    is_active: true,\n    mqtt_topic: 'farm/sensors/light/1',\n    created_at: '2023-10-01T08:00:00Z',\n    updated_at: '2023-11-15T10:30:00Z',\n    model: 'BH1750',\n    manufacturer: 'Acme Sensors',\n    calibration_date: '2023-09-15T00:00:00Z',\n    last_reading: {\n      value: 3500,\n      unit: 'lux',\n      timestamp: new Date().toISOString()\n    }\n  }, {\n    id: 4,\n    name: 'Soil Moisture Sensor 1',\n    type: 'soil_moisture',\n    location: 'Greenhouse 1',\n    status: 'inactive',\n    is_active: false,\n    mqtt_topic: 'farm/sensors/soil_moisture/1',\n    created_at: '2023-10-01T08:00:00Z',\n    updated_at: '2023-11-15T10:30:00Z',\n    model: 'YL-69',\n    manufacturer: 'Acme Sensors',\n    calibration_date: '2023-09-15T00:00:00Z',\n    last_reading: {\n      value: 42,\n      unit: '%',\n      timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\n    }\n  }]\n};\n\n// Helper function to update actuator in mock database\nconst updateActuatorInDatabase = (id, updates) => {\n  const index = mockActuatorDatabase.actuators.findIndex(a => a.id === parseInt(id));\n  if (index !== -1) {\n    const updatedActuator = {\n      ...mockActuatorDatabase.actuators[index],\n      ...updates,\n      updated_at: new Date().toISOString()\n    };\n    mockActuatorDatabase.actuators[index] = updatedActuator;\n    console.log(`执行器 ${id} 已更新:`, updatedActuator);\n    return updatedActuator;\n  }\n  return null;\n};\n\n// Helper function to add a log to the mock database\nconst addLogToDatabase = (actuatorId, status, message, source = 'web', user = 'admin') => {\n  const newLog = {\n    id: mockActuatorDatabase.logs.length + 1,\n    actuator_id: parseInt(actuatorId),\n    timestamp: new Date().toISOString(),\n    status,\n    message,\n    user,\n    source\n  };\n  mockActuatorDatabase.logs.unshift(newLog); // Add to beginning of array\n  console.log(`执行器 ${actuatorId} 添加日志:`, newLog);\n  return newLog;\n};\n\n// Create common API call method\nconst apiCall = async (endpoint, method = 'GET', data = null) => {\n  // 确保endpoint以/开头，并且以/结尾，避免308重定向问题\n  let normalizedEndpoint = endpoint.startsWith('/') ? endpoint : `/${endpoint}`;\n  normalizedEndpoint = normalizedEndpoint.endsWith('/') ? normalizedEndpoint : `${normalizedEndpoint}/`;\n  const url = `${API_URL}${normalizedEndpoint}`;\n  console.log(`调用API: ${url}`); // 调试用\n\n  const options = {\n    method,\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    // 添加重定向跟随\n    redirect: 'follow'\n  };\n\n  // Add authorization token\n  const token = localStorage.getItem(TOKEN_KEY);\n  if (token) {\n    options.headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  // Add request body data\n  if (data) {\n    options.body = JSON.stringify(data);\n  }\n  try {\n    // Use real API instead of mock response\n    const response = await fetch(url, options);\n\n    // 检查是否有重定向\n    if (response.redirected) {\n      console.log(`API重定向: ${response.url}`);\n    }\n    const result = await response.json();\n    console.log(`API响应: ${normalizedEndpoint}`, result); // 添加日志以调试\n\n    // 直接返回后端的响应结果，不需要额外处理\n    return result;\n  } catch (error) {\n    console.error('API调用错误:', error);\n    throw error;\n  }\n};\n\n// Mock API response - Keep for reference but not used\nconst mockApiResponse = (endpoint, method, data) => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      // Return mock data based on different endpoints\n      if (endpoint.startsWith('/dashboard') && method === 'GET') {\n        resolve({\n          data: {\n            success: true,\n            data: {\n              sensors: {\n                total: 12,\n                active: 10,\n                latest_readings: {\n                  temperature: {\n                    value: 24.5,\n                    unit: '°C',\n                    sensor_location: 'Greenhouse 1',\n                    timestamp: new Date().toISOString()\n                  },\n                  humidity: {\n                    value: 65,\n                    unit: '%',\n                    sensor_location: 'Greenhouse 1',\n                    timestamp: new Date().toISOString()\n                  },\n                  light: {\n                    value: 3500,\n                    unit: 'lux',\n                    sensor_location: 'Greenhouse 2',\n                    timestamp: new Date().toISOString()\n                  },\n                  soil_moisture: {\n                    value: 42,\n                    unit: '%',\n                    sensor_location: 'Greenhouse 1',\n                    timestamp: new Date().toISOString()\n                  }\n                }\n              },\n              actuators: {\n                total: 8,\n                active: 6,\n                statuses: {\n                  irrigation: {\n                    on: 1,\n                    off: 2,\n                    error: 0\n                  },\n                  ventilation: {\n                    on: 2,\n                    off: 1,\n                    error: 0\n                  },\n                  lighting: {\n                    on: 1,\n                    off: 1,\n                    error: 0\n                  },\n                  heating: {\n                    on: 0,\n                    off: 1,\n                    error: 0\n                  }\n                }\n              },\n              alerts: {\n                total: 5,\n                unread: 2,\n                recent: [{\n                  id: 1,\n                  type: 'temperature',\n                  message: 'Greenhouse 1 temperature above threshold (30°C)',\n                  created_at: new Date(Date.now() - 10 * 60000).toISOString(),\n                  is_read: false\n                }, {\n                  id: 2,\n                  type: 'actuator',\n                  message: 'Greenhouse 2 irrigation system started',\n                  created_at: new Date(Date.now() - 30 * 60000).toISOString(),\n                  is_read: true\n                }]\n              }\n            }\n          }\n        });\n      }\n      // Mock get all actuators\n      else if (endpoint === '/actuators' && method === 'GET') {\n        resolve({\n          data: {\n            success: true,\n            data: [{\n              id: 1,\n              name: 'Greenhouse 1 Irrigation System',\n              type: 'irrigation',\n              location: 'Greenhouse 1',\n              status: 'off',\n              mode: 'manual',\n              is_active: true,\n              mqtt_topic: 'farm/actuators/irrigation/1',\n              created_at: '2023-10-01T08:00:00Z',\n              updated_at: '2023-11-15T10:30:00Z',\n              last_control_time: '2023-11-14T14:20:00Z'\n            }, {\n              id: 2,\n              name: 'Greenhouse 2 Ventilation Fan',\n              type: 'fan',\n              location: 'Greenhouse 2',\n              status: 'low',\n              mode: 'auto',\n              is_active: true,\n              mqtt_topic: 'farm/actuators/fan/2',\n              created_at: '2023-10-01T08:00:00Z',\n              updated_at: '2023-11-15T10:30:00Z',\n              parameters: {\n                speed: 2,\n                max_speed: 5,\n                direction: 'forward'\n              }\n            }, {\n              id: 3,\n              name: 'Greenhouse 1 Lighting System',\n              type: 'lighting',\n              location: 'Greenhouse 1',\n              status: 'on',\n              mode: 'auto',\n              is_active: true,\n              mqtt_topic: 'farm/actuators/lighting/1',\n              created_at: '2023-10-01T08:00:00Z',\n              updated_at: '2023-11-15T10:30:00Z',\n              parameters: {\n                brightness: 80,\n                color_temp: 4000\n              }\n            }, {\n              id: 4,\n              name: 'Greenhouse 3 Humidifier',\n              type: 'humidifier',\n              location: 'Greenhouse 3',\n              status: 'off',\n              mode: 'manual',\n              is_active: false,\n              mqtt_topic: 'farm/actuators/humidifier/1',\n              created_at: '2023-10-01T08:00:00Z',\n              updated_at: '2023-11-15T10:30:00Z'\n            }]\n          }\n        });\n      }\n      // Mock get all sensors\n      else if (endpoint === '/sensors' && method === 'GET') {\n        resolve({\n          data: {\n            success: true,\n            data: [{\n              id: 1,\n              name: 'Temperature Sensor 1',\n              type: 'temperature',\n              location: 'Greenhouse 1',\n              status: 'active',\n              last_reading: {\n                value: 24.5,\n                unit: '°C',\n                timestamp: new Date().toISOString()\n              }\n            }, {\n              id: 2,\n              name: 'Humidity Sensor 1',\n              type: 'humidity',\n              location: 'Greenhouse 1',\n              status: 'active',\n              last_reading: {\n                value: 65,\n                unit: '%',\n                timestamp: new Date().toISOString()\n              }\n            }, {\n              id: 3,\n              name: 'Light Sensor 1',\n              type: 'light',\n              location: 'Greenhouse 2',\n              status: 'active',\n              last_reading: {\n                value: 3500,\n                unit: 'lux',\n                timestamp: new Date().toISOString()\n              }\n            }, {\n              id: 4,\n              name: 'Soil Moisture Sensor 1',\n              type: 'soil_moisture',\n              location: 'Greenhouse 1',\n              status: 'inactive',\n              last_reading: {\n                value: 42,\n                unit: '%',\n                timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\n              }\n            }]\n          }\n        });\n      }\n      // Mock get single sensor\n      else if (endpoint.match(/\\/sensors\\/\\d+$/) && method === 'GET') {\n        const id = parseInt(endpoint.split('/').pop());\n        let sensor = {};\n        switch (id) {\n          case 1:\n            sensor = {\n              id: 1,\n              name: 'Temperature Sensor 1',\n              type: 'temperature',\n              location: 'Greenhouse 1',\n              status: 'active',\n              description: 'Primary temperature sensor for monitoring greenhouse conditions.',\n              mqtt_topic: 'farm/sensors/temperature/1',\n              created_at: '2023-10-01T08:00:00Z',\n              updated_at: '2023-11-15T10:30:00Z',\n              model: 'DHT22',\n              manufacturer: 'Acme Sensors',\n              calibration_date: '2023-09-15T00:00:00Z',\n              last_reading: {\n                value: 24.5,\n                unit: '°C',\n                timestamp: new Date().toISOString()\n              },\n              history: [{\n                timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(),\n                value: 24.5\n              }, {\n                timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n                value: 25.1\n              }, {\n                timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(),\n                value: 25.4\n              }, {\n                timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),\n                value: 25.8\n              }, {\n                timestamp: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(),\n                value: 26.2\n              }, {\n                timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),\n                value: 26.5\n              }]\n            };\n            break;\n          case 2:\n            sensor = {\n              id: 2,\n              name: 'Humidity Sensor 1',\n              type: 'humidity',\n              location: 'Greenhouse 1',\n              status: 'active',\n              description: 'Primary humidity sensor for monitoring greenhouse conditions.',\n              mqtt_topic: 'farm/sensors/humidity/1',\n              created_at: '2023-10-01T08:00:00Z',\n              updated_at: '2023-11-15T10:30:00Z',\n              model: 'DHT22',\n              manufacturer: 'Acme Sensors',\n              calibration_date: '2023-09-15T00:00:00Z',\n              last_reading: {\n                value: 65,\n                unit: '%',\n                timestamp: new Date().toISOString()\n              },\n              history: [{\n                timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(),\n                value: 65\n              }, {\n                timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n                value: 64\n              }, {\n                timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(),\n                value: 63\n              }, {\n                timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),\n                value: 62\n              }, {\n                timestamp: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(),\n                value: 60\n              }, {\n                timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),\n                value: 59\n              }]\n            };\n            break;\n          case 3:\n            sensor = {\n              id: 3,\n              name: 'Light Sensor 1',\n              type: 'light',\n              location: 'Greenhouse 2',\n              status: 'active',\n              description: 'Light sensor for monitoring lighting conditions.',\n              mqtt_topic: 'farm/sensors/light/1',\n              created_at: '2023-10-01T08:00:00Z',\n              updated_at: '2023-11-15T10:30:00Z',\n              model: 'BH1750',\n              manufacturer: 'Acme Sensors',\n              calibration_date: '2023-09-15T00:00:00Z',\n              last_reading: {\n                value: 3500,\n                unit: 'lux',\n                timestamp: new Date().toISOString()\n              },\n              history: [{\n                timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(),\n                value: 3500\n              }, {\n                timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n                value: 3200\n              }, {\n                timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(),\n                value: 2900\n              }, {\n                timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),\n                value: 2500\n              }, {\n                timestamp: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(),\n                value: 2000\n              }, {\n                timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),\n                value: 1500\n              }]\n            };\n            break;\n          case 4:\n            sensor = {\n              id: 4,\n              name: 'Soil Moisture Sensor 1',\n              type: 'soil_moisture',\n              location: 'Greenhouse 1',\n              status: 'inactive',\n              description: 'Soil moisture sensor for monitoring soil conditions.',\n              mqtt_topic: 'farm/sensors/soil_moisture/1',\n              created_at: '2023-10-01T08:00:00Z',\n              updated_at: '2023-11-15T10:30:00Z',\n              model: 'YL-69',\n              manufacturer: 'Acme Sensors',\n              calibration_date: '2023-09-15T00:00:00Z',\n              last_reading: {\n                value: 42,\n                unit: '%',\n                timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\n              },\n              history: [{\n                timestamp: new Date(Date.now() - 25 * 60 * 60 * 1000).toISOString(),\n                value: 42\n              }, {\n                timestamp: new Date(Date.now() - 26 * 60 * 60 * 1000).toISOString(),\n                value: 43\n              }, {\n                timestamp: new Date(Date.now() - 27 * 60 * 60 * 1000).toISOString(),\n                value: 44\n              }, {\n                timestamp: new Date(Date.now() - 28 * 60 * 60 * 1000).toISOString(),\n                value: 45\n              }, {\n                timestamp: new Date(Date.now() - 29 * 60 * 60 * 1000).toISOString(),\n                value: 46\n              }, {\n                timestamp: new Date(Date.now() - 30 * 60 * 60 * 1000).toISOString(),\n                value: 47\n              }]\n            };\n            break;\n          default:\n            sensor = null;\n        }\n        resolve({\n          data: {\n            success: true,\n            data: sensor\n          }\n        });\n      }\n      // Mock get actuator operation logs\n      else if (endpoint.match(/\\/actuators\\/\\d+\\/logs$/) && method === 'GET') {\n        resolve({\n          data: {\n            success: true,\n            data: [{\n              id: 1,\n              actuator_id: parseInt(endpoint.split('/')[2]),\n              timestamp: new Date(Date.now() - 1000 * 60 * 5).toISOString(),\n              status: 'on',\n              message: 'Manual activation of actuator',\n              user: 'admin',\n              source: 'web'\n            }, {\n              id: 2,\n              actuator_id: parseInt(endpoint.split('/')[2]),\n              timestamp: new Date(Date.now() - 1000 * 60 * 60).toISOString(),\n              status: 'off',\n              message: 'Actuator turned off by automatic rule',\n              user: 'system',\n              source: 'rule'\n            }, {\n              id: 3,\n              actuator_id: parseInt(endpoint.split('/')[2]),\n              timestamp: new Date(Date.now() - 1000 * 60 * 60 * 12).toISOString(),\n              status: 'on',\n              message: 'Adjusted actuator parameters',\n              user: 'admin',\n              source: 'api'\n            }]\n          }\n        });\n      }\n      // Mock get actuator allowed statuses\n      else if (endpoint.match(/\\/actuators\\/\\d+\\/statuses$/) && method === 'GET') {\n        const id = parseInt(endpoint.split('/')[2]);\n        let statuses = [];\n        switch (id) {\n          case 1:\n            // Irrigation\n            statuses = ['on', 'off'];\n            break;\n          case 2:\n            // Fan\n            statuses = ['off', 'low', 'medium', 'high'];\n            break;\n          case 3:\n            // Lighting\n            statuses = ['on', 'off', 'dim'];\n            break;\n          case 4:\n            // Humidifier\n            statuses = ['on', 'off', 'auto'];\n            break;\n          default:\n            statuses = ['on', 'off'];\n        }\n        resolve({\n          data: {\n            success: true,\n            data: statuses\n          }\n        });\n      }\n      // Mock control actuator\n      else if (endpoint.match(/\\/actuators\\/\\d+\\/control$/) && method === 'POST') {\n        resolve({\n          data: {\n            success: true,\n            message: 'Operation successful',\n            data: {\n              ...data,\n              timestamp: new Date().toISOString()\n            }\n          }\n        });\n      }\n      // Mock update actuator\n      else if (endpoint.match(/\\/actuators\\/\\d+$/) && method === 'PUT') {\n        resolve({\n          data: {\n            success: true,\n            message: 'Update successful',\n            data: {\n              ...data,\n              updated_at: new Date().toISOString()\n            }\n          }\n        });\n      }\n      // Mock update actuator auto rules\n      else if (endpoint.match(/\\/actuators\\/\\d+\\/rules$/) && method === 'PUT') {\n        resolve({\n          data: {\n            success: true,\n            message: 'Rule update successful',\n            data: {\n              ...data,\n              updated_at: new Date().toISOString()\n            }\n          }\n        });\n      }\n      // Mock update actuator parameters\n      else if (endpoint.match(/\\/actuators\\/\\d+\\/parameters$/) && method === 'PUT') {\n        resolve({\n          data: {\n            success: true,\n            message: 'Parameter update successful',\n            data: {\n              ...data,\n              updated_at: new Date().toISOString()\n            }\n          }\n        });\n      }\n      // Mock register user\n      else if (endpoint === '/users/register' && method === 'POST') {\n        // 模拟用户注册\n        if (!data.username || !data.email || !data.password) {\n          resolve({\n            data: {\n              success: false,\n              message: 'Missing required fields'\n            },\n            status: 400\n          });\n          return;\n        }\n\n        // 模拟检查用户名是否已存在\n        if (data.username === 'admin' || data.username === 'user1') {\n          resolve({\n            data: {\n              success: false,\n              message: `Username ${data.username} is already taken`\n            },\n            status: 409\n          });\n          return;\n        }\n\n        // 模拟检查邮箱是否已存在\n        if (data.email === 'admin@smartfarm.com' || data.email === 'user1@smartfarm.com') {\n          resolve({\n            data: {\n              success: false,\n              message: `Email ${data.email} is already registered`\n            },\n            status: 409\n          });\n          return;\n        }\n\n        // 注册成功\n        resolve({\n          data: {\n            success: true,\n            message: 'User registered successfully',\n            data: {\n              id: Math.floor(Math.random() * 1000) + 10,\n              username: data.username,\n              email: data.email,\n              role: 'user',\n              is_active: true,\n              created_at: new Date().toISOString(),\n              updated_at: new Date().toISOString()\n            }\n          },\n          status: 201\n        });\n      }\n      // Mock login user\n      else if (endpoint === '/users/login' && method === 'POST') {\n        // 模拟用户登录\n        if (!data.email || !data.password) {\n          resolve({\n            data: {\n              success: false,\n              message: 'Missing required fields'\n            },\n            status: 400\n          });\n          return;\n        }\n\n        // 检查测试账户\n        if (data.email === 'admin@smartfarm.com' && data.password === 'password123' || data.email === 'user1@smartfarm.com' && data.password === 'password123' || data.password === 'password123') {\n          // 任何email只要密码对都通过\n          const isAdmin = data.email === 'admin@smartfarm.com';\n          const isUser = data.email === 'user1@smartfarm.com';\n          resolve({\n            data: {\n              success: true,\n              message: 'Login successful',\n              data: {\n                user: {\n                  id: isAdmin ? 1 : isUser ? 2 : 999,\n                  username: isAdmin ? 'admin' : isUser ? 'user1' : data.email.split('@')[0],\n                  email: data.email,\n                  role: isAdmin ? 'admin' : 'user',\n                  is_active: true,\n                  last_login: new Date().toISOString(),\n                  created_at: '2023-01-01T00:00:00Z',\n                  updated_at: new Date().toISOString()\n                },\n                token: 'mock-jwt-token-' + Math.random().toString(36).substring(2)\n              }\n            },\n            status: 200\n          });\n        } else {\n          resolve({\n            data: {\n              success: false,\n              message: 'Invalid email or password'\n            },\n            status: 401\n          });\n        }\n      }\n      // Other endpoints can be added as needed\n      else {\n        resolve({\n          data: {\n            success: true,\n            message: 'Operation completed',\n            data: null\n          }\n        });\n      }\n    }, 500); // Simulate network delay\n  });\n};\n\n// Export API services with corrected endpoint paths\nexport const authAPI = {\n  login: data => apiCall('/users/login', 'POST', data),\n  register: data => apiCall('/users/register', 'POST', data),\n  getProfile: () => apiCall('/users/profile'),\n  updateProfile: data => apiCall('/users/profile', 'PUT', data),\n  changePassword: data => apiCall('/users/change-password', 'POST', data)\n};\nexport const dashboardAPI = {\n  getSummary: () => {\n    // Use data from mock database for dashboard\n    console.log('获取仪表盘摘要数据');\n    return new Promise(resolve => {\n      setTimeout(() => {\n        // Count actuator statuses\n        const actuatorStatuses = {};\n        mockActuatorDatabase.actuators.forEach(actuator => {\n          if (!actuatorStatuses[actuator.type]) {\n            actuatorStatuses[actuator.type] = {\n              on: 0,\n              off: 0,\n              error: 0\n            };\n          }\n          if (actuator.status === 'on') {\n            actuatorStatuses[actuator.type].on += 1;\n          } else if (actuator.status === 'off') {\n            actuatorStatuses[actuator.type].off += 1;\n          } else if (actuator.status === 'error') {\n            actuatorStatuses[actuator.type].error += 1;\n          }\n        });\n\n        // Calculate active actuators\n        const activeActuators = mockActuatorDatabase.actuators.filter(a => a.is_active).length;\n\n        // Get latest sensor readings for each type\n        const latestReadings = {};\n        mockSensorDatabase.sensors.forEach(sensor => {\n          if (sensor.is_active && sensor.last_reading) {\n            if (!latestReadings[sensor.type] || new Date(sensor.last_reading.timestamp) > new Date(latestReadings[sensor.type].timestamp)) {\n              latestReadings[sensor.type] = {\n                value: sensor.last_reading.value,\n                unit: sensor.last_reading.unit,\n                sensor_location: sensor.location,\n                timestamp: sensor.last_reading.timestamp\n              };\n            }\n          }\n        });\n\n        // Count active sensors\n        const activeSensors = mockSensorDatabase.sensors.filter(s => s.is_active).length;\n\n        // Add some logging to see what's being returned\n        console.log('仪表盘传感器数据:', {\n          total: mockSensorDatabase.sensors.length,\n          active: activeSensors,\n          latest_readings: latestReadings\n        });\n        console.log('仪表盘执行器数据:', {\n          total: mockActuatorDatabase.actuators.length,\n          active: activeActuators,\n          statuses: actuatorStatuses\n        });\n\n        // Make sure to return the correct data structure expected by Dashboard component\n        resolve({\n          success: true,\n          data: {\n            sensors: {\n              total: mockSensorDatabase.sensors.length,\n              active: activeSensors,\n              latest_readings: latestReadings\n            },\n            actuators: {\n              total: mockActuatorDatabase.actuators.length,\n              active: activeActuators,\n              statuses: actuatorStatuses\n            },\n            alerts: {\n              total: 5,\n              unread: 2,\n              recent: [{\n                id: 1,\n                type: 'temperature',\n                message: 'Greenhouse 1 temperature above threshold (30°C)',\n                created_at: new Date(Date.now() - 10 * 60000).toISOString(),\n                is_read: false\n              }, {\n                id: 2,\n                type: 'actuator',\n                message: 'Greenhouse 2 irrigation system started',\n                created_at: new Date(Date.now() - 30 * 60000).toISOString(),\n                is_read: true\n              }]\n            }\n          }\n        });\n      }, 500); // Simulate network delay\n    });\n  }\n};\nexport const sensorAPI = {\n  getAllSensors: () => {\n    // Use mock data from sensor database\n    console.log('获取所有传感器列表');\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          success: true,\n          data: mockSensorDatabase.sensors\n        });\n      }, 500); // Simulate network delay\n    });\n  },\n  getSensor: id => {\n    // Get specific sensor from mock database\n    console.log(`获取传感器详情, ID: ${id}`);\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const sensor = mockSensorDatabase.sensors.find(s => s.id === parseInt(id));\n        if (sensor) {\n          resolve({\n            success: true,\n            data: sensor\n          });\n        } else {\n          resolve({\n            success: false,\n            message: `Sensor with ID ${id} not found`\n          });\n        }\n      }, 500); // Simulate network delay\n    });\n  },\n  getSensorData: (id, timeRange) => apiCall(`/sensors/${id}/data?timeRange=${timeRange}`),\n  updateSensor: (id, data) => apiCall(`/sensors/${id}`, 'PUT', data),\n  calibrateSensor: (id, data) => apiCall(`/sensors/${id}/calibrate`, 'POST', data)\n};\nexport const actuatorAPI = {\n  getAllActuators: () => {\n    // Use data from localStorage if available, otherwise use mock data\n    console.log('Getting all actuators');\n    return new Promise(resolve => {\n      setTimeout(() => {\n        // Try to get from localStorage first\n        const savedActuators = localStorage.getItem('smart_farm_actuators');\n        if (savedActuators) {\n          // If localStorage has data, use it\n          resolve({\n            success: true,\n            data: JSON.parse(savedActuators)\n          });\n        } else {\n          // Otherwise use mock data and save it to localStorage\n          localStorage.setItem('smart_farm_actuators', JSON.stringify(mockActuatorDatabase.actuators));\n          resolve({\n            success: true,\n            data: mockActuatorDatabase.actuators\n          });\n        }\n      }, 500); // Simulate network delay\n    });\n  },\n  getActuator: id => {\n    // Use mock data for actuator details from the mock database\n    console.log(`获取执行器详情, ID: ${id}`);\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const actuator = mockActuatorDatabase.actuators.find(a => a.id === parseInt(id)) || {\n          id: parseInt(id),\n          name: `Unknown Actuator ${id}`,\n          type: 'unknown',\n          location: 'Unknown',\n          status: 'error',\n          mode: 'manual',\n          is_active: false,\n          mqtt_topic: `farm/actuators/unknown/${id}`,\n          created_at: '2023-10-01T08:00:00Z',\n          updated_at: '2023-11-15T10:30:00Z'\n        };\n        resolve({\n          success: true,\n          data: actuator\n        });\n      }, 500); // Simulate network delay\n    });\n  },\n  getActuatorLogs: id => {\n    // Get logs for specific actuator from mock database\n    console.log(`获取执行器日志, ID: ${id}`);\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const logs = mockActuatorDatabase.logs.filter(log => log.actuator_id === parseInt(id)).sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n        if (logs.length === 0) {\n          // If no logs exist yet, return some default ones\n          logs.push({\n            id: 1,\n            actuator_id: parseInt(id),\n            timestamp: new Date(Date.now() - 1000 * 60 * 5).toISOString(),\n            status: 'on',\n            message: 'Manual activation of actuator',\n            user: 'admin',\n            source: 'web'\n          }, {\n            id: 2,\n            actuator_id: parseInt(id),\n            timestamp: new Date(Date.now() - 1000 * 60 * 60).toISOString(),\n            status: 'off',\n            message: 'Actuator turned off by automatic rule',\n            user: 'system',\n            source: 'rule'\n          });\n        }\n        resolve({\n          success: true,\n          data: logs\n        });\n      }, 500); // Simulate network delay\n    });\n  },\n  getActuatorStatuses: id => {\n    // Return available statuses based on actuator type\n    console.log(`获取执行器状态选项, ID: ${id}`);\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const actuator = mockActuatorDatabase.actuators.find(a => a.id === parseInt(id));\n        let statuses = ['on', 'off']; // Default statuses\n\n        if (actuator) {\n          switch (actuator.type) {\n            case 'fan':\n              statuses = ['off', 'low', 'medium', 'high'];\n              break;\n            case 'lighting':\n              statuses = ['on', 'off', 'dim'];\n              break;\n            case 'humidifier':\n              statuses = ['on', 'off', 'auto'];\n              break;\n            case 'curtain':\n              statuses = ['open', 'closed', 'half'];\n              break;\n          }\n        }\n        resolve({\n          success: true,\n          data: statuses\n        });\n      }, 500); // Simulate network delay\n    });\n  },\n  controlActuator: (id, data) => {\n    // Update actuator status in localStorage\n    console.log(`Controlling actuator, ID: ${id}, Action: ${JSON.stringify(data)}`);\n    return new Promise(resolve => {\n      setTimeout(() => {\n        // Get the action from the data\n        const action = data.action;\n\n        // Get actuators from localStorage\n        const savedActuators = localStorage.getItem('smart_farm_actuators');\n        let actuators = [];\n        if (savedActuators) {\n          actuators = JSON.parse(savedActuators);\n        } else {\n          actuators = mockActuatorDatabase.actuators;\n        }\n\n        // Find the actuator to update\n        const actuatorIndex = actuators.findIndex(a => a.id === parseInt(id));\n        if (actuatorIndex === -1) {\n          resolve({\n            success: false,\n            message: `Actuator with ID ${id} not found`\n          });\n          return;\n        }\n\n        // Record previous status to detect changes\n        const previousStatus = actuators[actuatorIndex].status;\n\n        // Update the actuator\n        actuators[actuatorIndex].status = action;\n        actuators[actuatorIndex].last_control_time = new Date().toISOString();\n\n        // Save back to localStorage\n        localStorage.setItem('smart_farm_actuators', JSON.stringify(actuators));\n\n        // Also update the mock database for other operations\n        const updatedActuator = updateActuatorInDatabase(id, {\n          status: action,\n          last_control_time: new Date().toISOString()\n        });\n\n        // Add a log entry\n        const log = addLogToDatabase(id, action, `Actuator ${action === 'on' ? 'turned on' : 'turned off'} manually`);\n        console.log(`Actuator ${id} status changed from ${previousStatus} to ${action}`);\n        resolve({\n          success: true,\n          message: 'Operation successful',\n          data: {\n            actuator: actuators[actuatorIndex],\n            log: log\n          }\n        });\n      }, 500); // Simulate network delay\n    });\n  },\n  updateActuator: (id, data) => {\n    // Update actuator properties in localStorage\n    console.log(`Updating actuator, ID: ${id}, Data: ${JSON.stringify(data)}`);\n    return new Promise(resolve => {\n      setTimeout(() => {\n        // Get actuators from localStorage\n        const savedActuators = localStorage.getItem('smart_farm_actuators');\n        let actuators = [];\n        if (savedActuators) {\n          actuators = JSON.parse(savedActuators);\n        } else {\n          actuators = mockActuatorDatabase.actuators;\n        }\n\n        // Find the actuator to update\n        const actuatorIndex = actuators.findIndex(a => a.id === parseInt(id));\n        if (actuatorIndex !== -1) {\n          // Update the actuator\n          actuators[actuatorIndex] = {\n            ...actuators[actuatorIndex],\n            ...data,\n            updated_at: new Date().toISOString()\n          };\n\n          // Save back to localStorage\n          localStorage.setItem('smart_farm_actuators', JSON.stringify(actuators));\n\n          // Also update the mock database for other operations\n          const updatedActuator = updateActuatorInDatabase(id, data);\n          addLogToDatabase(id, actuators[actuatorIndex].status, 'Actuator settings updated');\n          resolve({\n            success: true,\n            message: 'Update successful',\n            data: actuators[actuatorIndex]\n          });\n        } else {\n          resolve({\n            success: false,\n            message: `Actuator with ID ${id} not found`\n          });\n        }\n      }, 500); // Simulate network delay\n    });\n  },\n  updateActuatorRules: (id, data) => {\n    // Update actuator rules in mock database\n    console.log(`更新执行器规则, ID: ${id}, 规则: ${JSON.stringify(data)}`);\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const actuator = mockActuatorDatabase.actuators.find(a => a.id === parseInt(id));\n        if (actuator) {\n          const updatedActuator = updateActuatorInDatabase(id, {\n            rules: data\n          });\n          addLogToDatabase(id, actuator.status, 'Actuator automation rules updated');\n          resolve({\n            success: true,\n            message: 'Rules updated successfully',\n            data: updatedActuator\n          });\n        } else {\n          resolve({\n            success: false,\n            message: `Actuator with ID ${id} not found`\n          });\n        }\n      }, 500); // Simulate network delay\n    });\n  },\n  updateActuatorParameters: (id, data) => {\n    // Update actuator parameters in mock database\n    console.log(`更新执行器参数, ID: ${id}, 参数: ${JSON.stringify(data)}`);\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const actuator = mockActuatorDatabase.actuators.find(a => a.id === parseInt(id));\n        if (actuator) {\n          const updatedActuator = updateActuatorInDatabase(id, {\n            parameters: {\n              ...actuator.parameters,\n              ...data\n            }\n          });\n          addLogToDatabase(id, actuator.status, 'Actuator parameters updated');\n          resolve({\n            success: true,\n            message: 'Parameters updated successfully',\n            data: updatedActuator\n          });\n        } else {\n          resolve({\n            success: false,\n            message: `Actuator with ID ${id} not found`\n          });\n        }\n      }, 500); // Simulate network delay\n    });\n  }\n};\nexport const alertAPI = {\n  getAlerts: (page = 1, limit = 10) => apiCall(`/alerts?page=${page}&limit=${limit}`),\n  markAsRead: id => apiCall(`/alerts/${id}/read`, 'POST'),\n  markAllAsRead: () => apiCall('/alerts/read-all', 'POST'),\n  deleteAlert: id => apiCall(`/alerts/${id}`, 'DELETE'),\n  getAlertSettings: () => apiCall('/alerts/settings'),\n  updateAlertSettings: data => apiCall('/alerts/settings', 'PUT', data)\n};\nexport const analyticsAPI = {\n  getSensorStats: timeRange => apiCall(`/analytics/sensors?timeRange=${timeRange}`),\n  getActuatorStats: timeRange => apiCall(`/analytics/actuators?timeRange=${timeRange}`),\n  getCorrelationData: (sensors, timeRange) => apiCall(`/analytics/correlation?sensors=${sensors.join(',')}&timeRange=${timeRange}`),\n  getEnergyUsage: timeRange => apiCall(`/analytics/energy?timeRange=${timeRange}`),\n  getYieldData: timeRange => apiCall(`/analytics/yield?timeRange=${timeRange}`)\n};\nexport const settingsAPI = {\n  getSystemSettings: () => apiCall('/settings/system'),\n  updateSystemSettings: data => apiCall('/settings/system', 'PUT', data),\n  getNotificationSettings: () => apiCall('/settings/notifications'),\n  updateNotificationSettings: data => apiCall('/settings/notifications', 'PUT', data),\n  getBackupSettings: () => apiCall('/settings/backup'),\n  updateBackupSettings: data => apiCall('/settings/backup', 'PUT', data),\n  backupNow: () => apiCall('/settings/backup/now', 'POST'),\n  restoreBackup: id => apiCall(`/settings/backup/restore/${id}`, 'POST'),\n  getDeviceSettings: () => apiCall('/settings/devices'),\n  updateDeviceSettings: data => apiCall('/settings/devices', 'PUT', data)\n};","map":{"version":3,"names":["API_URL","TOKEN_KEY","mockActuatorDatabase","actuators","id","name","type","location","status","mode","is_active","mqtt_topic","created_at","updated_at","last_control_time","description","parameters","water_flow","duration","schedule","auto_threshold","speed","max_speed","direction","auto_trigger_temp","brightness","color_temp","schedule_on","schedule_off","capacity","auto_trigger_humidity","auto_stop_humidity","logs","mockSensorDatabase","sensors","model","manufacturer","calibration_date","last_reading","value","unit","timestamp","Date","toISOString","now","updateActuatorInDatabase","updates","index","findIndex","a","parseInt","updatedActuator","console","log","addLogToDatabase","actuatorId","message","source","user","newLog","length","actuator_id","unshift","apiCall","endpoint","method","data","normalizedEndpoint","startsWith","endsWith","url","options","headers","redirect","token","localStorage","getItem","body","JSON","stringify","response","fetch","redirected","result","json","error","mockApiResponse","Promise","resolve","setTimeout","success","total","active","latest_readings","temperature","sensor_location","humidity","light","soil_moisture","statuses","irrigation","on","off","ventilation","lighting","heating","alerts","unread","recent","is_read","match","split","pop","sensor","history","username","email","password","Math","floor","random","role","isAdmin","isUser","last_login","toString","substring","authAPI","login","register","getProfile","updateProfile","changePassword","dashboardAPI","getSummary","actuatorStatuses","forEach","actuator","activeActuators","filter","latestReadings","activeSensors","s","sensorAPI","getAllSensors","getSensor","find","getSensorData","timeRange","updateSensor","calibrateSensor","actuatorAPI","getAllActuators","savedActuators","parse","setItem","getActuator","getActuatorLogs","sort","b","push","getActuatorStatuses","controlActuator","action","actuatorIndex","previousStatus","updateActuator","updateActuatorRules","rules","updateActuatorParameters","alertAPI","getAlerts","page","limit","markAsRead","markAllAsRead","deleteAlert","getAlertSettings","updateAlertSettings","analyticsAPI","getSensorStats","getActuatorStats","getCorrelationData","join","getEnergyUsage","getYieldData","settingsAPI","getSystemSettings","updateSystemSettings","getNotificationSettings","updateNotificationSettings","getBackupSettings","updateBackupSettings","backupNow","restoreBackup","getDeviceSettings","updateDeviceSettings"],"sources":["C:/Users/LIJIN/Desktop/webTest/Bak/webTest/frontend/src/services/api.js"],"sourcesContent":["import { API_URL, TOKEN_KEY } from '../config';\r\n\r\n// Client-side mock database for actuators\r\nconst mockActuatorDatabase = {\r\n  actuators: [\r\n    {\r\n      id: 1,\r\n      name: 'Greenhouse 1 Irrigation System',\r\n      type: 'irrigation',\r\n      location: 'Greenhouse 1',\r\n      status: 'off',\r\n      mode: 'manual',\r\n      is_active: true,\r\n      mqtt_topic: 'farm/actuators/irrigation/1',\r\n      created_at: '2023-10-01T08:00:00Z',\r\n      updated_at: '2023-11-15T10:30:00Z',\r\n      last_control_time: '2023-11-14T14:20:00Z',\r\n      description: 'Main irrigation system for Greenhouse 1',\r\n      parameters: {\r\n        water_flow: 2.5,\r\n        duration: 30,\r\n        schedule: 'daily',\r\n        auto_threshold: 30\r\n      }\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Greenhouse 2 Ventilation Fan',\r\n      type: 'fan',\r\n      location: 'Greenhouse 2',\r\n      status: 'low',\r\n      mode: 'auto',\r\n      is_active: true,\r\n      mqtt_topic: 'farm/actuators/fan/2',\r\n      created_at: '2023-10-01T08:00:00Z',\r\n      updated_at: '2023-11-15T10:30:00Z',\r\n      description: 'Main ventilation fan for Greenhouse 2',\r\n      parameters: {\r\n        speed: 2,\r\n        max_speed: 5,\r\n        direction: 'forward',\r\n        auto_trigger_temp: 28\r\n      }\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Greenhouse 1 Lighting System',\r\n      type: 'lighting',\r\n      location: 'Greenhouse 1',\r\n      status: 'on',\r\n      mode: 'auto',\r\n      is_active: true,\r\n      mqtt_topic: 'farm/actuators/lighting/1',\r\n      created_at: '2023-10-01T08:00:00Z',\r\n      updated_at: '2023-11-15T10:30:00Z',\r\n      description: 'Main lighting system for Greenhouse 1',\r\n      parameters: {\r\n        brightness: 80,\r\n        color_temp: 4000,\r\n        schedule_on: '06:00',\r\n        schedule_off: '20:00'\r\n      }\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'Greenhouse 3 Humidifier',\r\n      type: 'humidifier',\r\n      location: 'Greenhouse 3',\r\n      status: 'off',\r\n      mode: 'manual',\r\n      is_active: false,\r\n      mqtt_topic: 'farm/actuators/humidifier/1',\r\n      created_at: '2023-10-01T08:00:00Z',\r\n      updated_at: '2023-11-15T10:30:00Z',\r\n      description: 'Main humidifier for Greenhouse 3',\r\n      parameters: {\r\n        capacity: 5,\r\n        auto_trigger_humidity: 40,\r\n        auto_stop_humidity: 60\r\n      }\r\n    }\r\n  ],\r\n  logs: []\r\n};\r\n\r\n// Client-side mock database for sensors\r\nconst mockSensorDatabase = {\r\n  sensors: [\r\n    {\r\n      id: 1,\r\n      name: 'Temperature Sensor 1',\r\n      type: 'temperature',\r\n      location: 'Greenhouse 1',\r\n      status: 'active',\r\n      is_active: true,\r\n      mqtt_topic: 'farm/sensors/temperature/1',\r\n      created_at: '2023-10-01T08:00:00Z',\r\n      updated_at: '2023-11-15T10:30:00Z',\r\n      model: 'DHT22',\r\n      manufacturer: 'Acme Sensors',\r\n      calibration_date: '2023-09-15T00:00:00Z',\r\n      last_reading: {\r\n        value: 24.5,\r\n        unit: '°C',\r\n        timestamp: new Date().toISOString()\r\n      }\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Humidity Sensor 1',\r\n      type: 'humidity',\r\n      location: 'Greenhouse 1',\r\n      status: 'active',\r\n      is_active: true,\r\n      mqtt_topic: 'farm/sensors/humidity/1',\r\n      created_at: '2023-10-01T08:00:00Z',\r\n      updated_at: '2023-11-15T10:30:00Z',\r\n      model: 'DHT22',\r\n      manufacturer: 'Acme Sensors',\r\n      calibration_date: '2023-09-15T00:00:00Z',\r\n      last_reading: {\r\n        value: 65,\r\n        unit: '%',\r\n        timestamp: new Date().toISOString()\r\n      }\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Light Sensor 1',\r\n      type: 'light',\r\n      location: 'Greenhouse 2',\r\n      status: 'active',\r\n      is_active: true,\r\n      mqtt_topic: 'farm/sensors/light/1',\r\n      created_at: '2023-10-01T08:00:00Z',\r\n      updated_at: '2023-11-15T10:30:00Z',\r\n      model: 'BH1750',\r\n      manufacturer: 'Acme Sensors',\r\n      calibration_date: '2023-09-15T00:00:00Z',\r\n      last_reading: {\r\n        value: 3500,\r\n        unit: 'lux',\r\n        timestamp: new Date().toISOString()\r\n      }\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'Soil Moisture Sensor 1',\r\n      type: 'soil_moisture',\r\n      location: 'Greenhouse 1',\r\n      status: 'inactive',\r\n      is_active: false,\r\n      mqtt_topic: 'farm/sensors/soil_moisture/1',\r\n      created_at: '2023-10-01T08:00:00Z',\r\n      updated_at: '2023-11-15T10:30:00Z',\r\n      model: 'YL-69',\r\n      manufacturer: 'Acme Sensors',\r\n      calibration_date: '2023-09-15T00:00:00Z',\r\n      last_reading: {\r\n        value: 42,\r\n        unit: '%',\r\n        timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\r\n      }\r\n    }\r\n  ]\r\n};\r\n\r\n// Helper function to update actuator in mock database\r\nconst updateActuatorInDatabase = (id, updates) => {\r\n  const index = mockActuatorDatabase.actuators.findIndex(a => a.id === parseInt(id));\r\n  if (index !== -1) {\r\n    const updatedActuator = {\r\n      ...mockActuatorDatabase.actuators[index],\r\n      ...updates,\r\n      updated_at: new Date().toISOString()\r\n    };\r\n    mockActuatorDatabase.actuators[index] = updatedActuator;\r\n    console.log(`执行器 ${id} 已更新:`, updatedActuator);\r\n    return updatedActuator;\r\n  }\r\n  return null;\r\n};\r\n\r\n// Helper function to add a log to the mock database\r\nconst addLogToDatabase = (actuatorId, status, message, source = 'web', user = 'admin') => {\r\n  const newLog = {\r\n    id: mockActuatorDatabase.logs.length + 1,\r\n    actuator_id: parseInt(actuatorId),\r\n    timestamp: new Date().toISOString(),\r\n    status,\r\n    message,\r\n    user,\r\n    source\r\n  };\r\n  mockActuatorDatabase.logs.unshift(newLog); // Add to beginning of array\r\n  console.log(`执行器 ${actuatorId} 添加日志:`, newLog);\r\n  return newLog;\r\n};\r\n\r\n// Create common API call method\r\nconst apiCall = async (endpoint, method = 'GET', data = null) => {\r\n  // 确保endpoint以/开头，并且以/结尾，避免308重定向问题\r\n  let normalizedEndpoint = endpoint.startsWith('/') ? endpoint : `/${endpoint}`;\r\n  normalizedEndpoint = normalizedEndpoint.endsWith('/') ? normalizedEndpoint : `${normalizedEndpoint}/`;\r\n  \r\n  const url = `${API_URL}${normalizedEndpoint}`;\r\n  \r\n  console.log(`调用API: ${url}`); // 调试用\r\n  \r\n  const options = {\r\n    method,\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    // 添加重定向跟随\r\n    redirect: 'follow'\r\n  };\r\n\r\n  // Add authorization token\r\n  const token = localStorage.getItem(TOKEN_KEY);\r\n  if (token) {\r\n    options.headers['Authorization'] = `Bearer ${token}`;\r\n  }\r\n\r\n  // Add request body data\r\n  if (data) {\r\n    options.body = JSON.stringify(data);\r\n  }\r\n\r\n  try {\r\n    // Use real API instead of mock response\r\n    const response = await fetch(url, options);\r\n    \r\n    // 检查是否有重定向\r\n    if (response.redirected) {\r\n      console.log(`API重定向: ${response.url}`);\r\n    }\r\n    \r\n    const result = await response.json();\r\n    \r\n    console.log(`API响应: ${normalizedEndpoint}`, result);  // 添加日志以调试\r\n    \r\n    // 直接返回后端的响应结果，不需要额外处理\r\n    return result;\r\n  } catch (error) {\r\n    console.error('API调用错误:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Mock API response - Keep for reference but not used\r\nconst mockApiResponse = (endpoint, method, data) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      // Return mock data based on different endpoints\r\n      if (endpoint.startsWith('/dashboard') && method === 'GET') {\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            data: {\r\n              sensors: {\r\n                total: 12,\r\n                active: 10,\r\n                latest_readings: {\r\n                  temperature: {\r\n                    value: 24.5,\r\n                    unit: '°C',\r\n                    sensor_location: 'Greenhouse 1',\r\n                    timestamp: new Date().toISOString()\r\n                  },\r\n                  humidity: {\r\n                    value: 65,\r\n                    unit: '%',\r\n                    sensor_location: 'Greenhouse 1',\r\n                    timestamp: new Date().toISOString()\r\n                  },\r\n                  light: {\r\n                    value: 3500,\r\n                    unit: 'lux',\r\n                    sensor_location: 'Greenhouse 2',\r\n                    timestamp: new Date().toISOString()\r\n                  },\r\n                  soil_moisture: {\r\n                    value: 42,\r\n                    unit: '%',\r\n                    sensor_location: 'Greenhouse 1',\r\n                    timestamp: new Date().toISOString()\r\n                  }\r\n                }\r\n              },\r\n              actuators: {\r\n                total: 8,\r\n                active: 6,\r\n                statuses: {\r\n                  irrigation: { on: 1, off: 2, error: 0 },\r\n                  ventilation: { on: 2, off: 1, error: 0 },\r\n                  lighting: { on: 1, off: 1, error: 0 },\r\n                  heating: { on: 0, off: 1, error: 0 }\r\n                }\r\n              },\r\n              alerts: {\r\n                total: 5,\r\n                unread: 2,\r\n                recent: [\r\n                  {\r\n                    id: 1,\r\n                    type: 'temperature',\r\n                    message: 'Greenhouse 1 temperature above threshold (30°C)',\r\n                    created_at: new Date(Date.now() - 10 * 60000).toISOString(),\r\n                    is_read: false\r\n                  },\r\n                  {\r\n                    id: 2,\r\n                    type: 'actuator',\r\n                    message: 'Greenhouse 2 irrigation system started',\r\n                    created_at: new Date(Date.now() - 30 * 60000).toISOString(),\r\n                    is_read: true\r\n                  }\r\n                ]\r\n              }\r\n            }\r\n          }\r\n        });\r\n      } \r\n      // Mock get all actuators\r\n      else if (endpoint === '/actuators' && method === 'GET') {\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            data: [\r\n              {\r\n                id: 1,\r\n                name: 'Greenhouse 1 Irrigation System',\r\n                type: 'irrigation',\r\n                location: 'Greenhouse 1',\r\n                status: 'off',\r\n                mode: 'manual',\r\n                is_active: true,\r\n                mqtt_topic: 'farm/actuators/irrigation/1',\r\n                created_at: '2023-10-01T08:00:00Z',\r\n                updated_at: '2023-11-15T10:30:00Z',\r\n                last_control_time: '2023-11-14T14:20:00Z'\r\n              },\r\n              {\r\n                id: 2,\r\n                name: 'Greenhouse 2 Ventilation Fan',\r\n                type: 'fan',\r\n                location: 'Greenhouse 2',\r\n                status: 'low',\r\n                mode: 'auto',\r\n                is_active: true,\r\n                mqtt_topic: 'farm/actuators/fan/2',\r\n                created_at: '2023-10-01T08:00:00Z',\r\n                updated_at: '2023-11-15T10:30:00Z',\r\n                parameters: {\r\n                  speed: 2,\r\n                  max_speed: 5,\r\n                  direction: 'forward'\r\n                }\r\n              },\r\n              {\r\n                id: 3,\r\n                name: 'Greenhouse 1 Lighting System',\r\n                type: 'lighting',\r\n                location: 'Greenhouse 1',\r\n                status: 'on',\r\n                mode: 'auto',\r\n                is_active: true,\r\n                mqtt_topic: 'farm/actuators/lighting/1',\r\n                created_at: '2023-10-01T08:00:00Z',\r\n                updated_at: '2023-11-15T10:30:00Z',\r\n                parameters: {\r\n                  brightness: 80,\r\n                  color_temp: 4000\r\n                }\r\n              },\r\n              {\r\n                id: 4,\r\n                name: 'Greenhouse 3 Humidifier',\r\n                type: 'humidifier',\r\n                location: 'Greenhouse 3',\r\n                status: 'off',\r\n                mode: 'manual',\r\n                is_active: false,\r\n                mqtt_topic: 'farm/actuators/humidifier/1',\r\n                created_at: '2023-10-01T08:00:00Z',\r\n                updated_at: '2023-11-15T10:30:00Z'\r\n              }\r\n            ]\r\n          }\r\n        });\r\n      }\r\n      // Mock get all sensors\r\n      else if (endpoint === '/sensors' && method === 'GET') {\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            data: [\r\n              {\r\n                id: 1,\r\n                name: 'Temperature Sensor 1',\r\n                type: 'temperature',\r\n                location: 'Greenhouse 1',\r\n                status: 'active',\r\n                last_reading: {\r\n                  value: 24.5,\r\n                  unit: '°C',\r\n                  timestamp: new Date().toISOString()\r\n                }\r\n              },\r\n              {\r\n                id: 2,\r\n                name: 'Humidity Sensor 1',\r\n                type: 'humidity',\r\n                location: 'Greenhouse 1',\r\n                status: 'active',\r\n                last_reading: {\r\n                  value: 65,\r\n                  unit: '%',\r\n                  timestamp: new Date().toISOString()\r\n                }\r\n              },\r\n              {\r\n                id: 3,\r\n                name: 'Light Sensor 1',\r\n                type: 'light',\r\n                location: 'Greenhouse 2',\r\n                status: 'active',\r\n                last_reading: {\r\n                  value: 3500,\r\n                  unit: 'lux',\r\n                  timestamp: new Date().toISOString()\r\n                }\r\n              },\r\n              {\r\n                id: 4,\r\n                name: 'Soil Moisture Sensor 1',\r\n                type: 'soil_moisture',\r\n                location: 'Greenhouse 1',\r\n                status: 'inactive',\r\n                last_reading: {\r\n                  value: 42,\r\n                  unit: '%',\r\n                  timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        });\r\n      }\r\n      // Mock get single sensor\r\n      else if (endpoint.match(/\\/sensors\\/\\d+$/) && method === 'GET') {\r\n        const id = parseInt(endpoint.split('/').pop());\r\n        let sensor = {};\r\n\r\n        switch(id) {\r\n          case 1:\r\n            sensor = {\r\n              id: 1,\r\n              name: 'Temperature Sensor 1',\r\n              type: 'temperature',\r\n              location: 'Greenhouse 1',\r\n              status: 'active',\r\n              description: 'Primary temperature sensor for monitoring greenhouse conditions.',\r\n              mqtt_topic: 'farm/sensors/temperature/1',\r\n              created_at: '2023-10-01T08:00:00Z',\r\n              updated_at: '2023-11-15T10:30:00Z',\r\n              model: 'DHT22',\r\n              manufacturer: 'Acme Sensors',\r\n              calibration_date: '2023-09-15T00:00:00Z',\r\n              last_reading: {\r\n                value: 24.5,\r\n                unit: '°C',\r\n                timestamp: new Date().toISOString()\r\n              },\r\n              history: [\r\n                { timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(), value: 24.5 },\r\n                { timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), value: 25.1 },\r\n                { timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(), value: 25.4 },\r\n                { timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(), value: 25.8 },\r\n                { timestamp: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(), value: 26.2 },\r\n                { timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(), value: 26.5 }\r\n              ]\r\n            };\r\n            break;\r\n          case 2:\r\n            sensor = {\r\n              id: 2,\r\n              name: 'Humidity Sensor 1',\r\n              type: 'humidity',\r\n              location: 'Greenhouse 1',\r\n              status: 'active',\r\n              description: 'Primary humidity sensor for monitoring greenhouse conditions.',\r\n              mqtt_topic: 'farm/sensors/humidity/1',\r\n              created_at: '2023-10-01T08:00:00Z',\r\n              updated_at: '2023-11-15T10:30:00Z',\r\n              model: 'DHT22',\r\n              manufacturer: 'Acme Sensors',\r\n              calibration_date: '2023-09-15T00:00:00Z',\r\n              last_reading: {\r\n                value: 65,\r\n                unit: '%',\r\n                timestamp: new Date().toISOString()\r\n              },\r\n              history: [\r\n                { timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(), value: 65 },\r\n                { timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), value: 64 },\r\n                { timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(), value: 63 },\r\n                { timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(), value: 62 },\r\n                { timestamp: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(), value: 60 },\r\n                { timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(), value: 59 }\r\n              ]\r\n            };\r\n            break;\r\n          case 3:\r\n            sensor = {\r\n              id: 3,\r\n              name: 'Light Sensor 1',\r\n              type: 'light',\r\n              location: 'Greenhouse 2',\r\n              status: 'active',\r\n              description: 'Light sensor for monitoring lighting conditions.',\r\n              mqtt_topic: 'farm/sensors/light/1',\r\n              created_at: '2023-10-01T08:00:00Z',\r\n              updated_at: '2023-11-15T10:30:00Z',\r\n              model: 'BH1750',\r\n              manufacturer: 'Acme Sensors',\r\n              calibration_date: '2023-09-15T00:00:00Z',\r\n              last_reading: {\r\n                value: 3500,\r\n                unit: 'lux',\r\n                timestamp: new Date().toISOString()\r\n              },\r\n              history: [\r\n                { timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(), value: 3500 },\r\n                { timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), value: 3200 },\r\n                { timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(), value: 2900 },\r\n                { timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(), value: 2500 },\r\n                { timestamp: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(), value: 2000 },\r\n                { timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(), value: 1500 }\r\n              ]\r\n            };\r\n            break;\r\n          case 4:\r\n            sensor = {\r\n              id: 4,\r\n              name: 'Soil Moisture Sensor 1',\r\n              type: 'soil_moisture',\r\n              location: 'Greenhouse 1',\r\n              status: 'inactive',\r\n              description: 'Soil moisture sensor for monitoring soil conditions.',\r\n              mqtt_topic: 'farm/sensors/soil_moisture/1',\r\n              created_at: '2023-10-01T08:00:00Z',\r\n              updated_at: '2023-11-15T10:30:00Z',\r\n              model: 'YL-69',\r\n              manufacturer: 'Acme Sensors',\r\n              calibration_date: '2023-09-15T00:00:00Z',\r\n              last_reading: {\r\n                value: 42,\r\n                unit: '%',\r\n                timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\r\n              },\r\n              history: [\r\n                { timestamp: new Date(Date.now() - 25 * 60 * 60 * 1000).toISOString(), value: 42 },\r\n                { timestamp: new Date(Date.now() - 26 * 60 * 60 * 1000).toISOString(), value: 43 },\r\n                { timestamp: new Date(Date.now() - 27 * 60 * 60 * 1000).toISOString(), value: 44 },\r\n                { timestamp: new Date(Date.now() - 28 * 60 * 60 * 1000).toISOString(), value: 45 },\r\n                { timestamp: new Date(Date.now() - 29 * 60 * 60 * 1000).toISOString(), value: 46 },\r\n                { timestamp: new Date(Date.now() - 30 * 60 * 60 * 1000).toISOString(), value: 47 }\r\n              ]\r\n            };\r\n            break;\r\n          default:\r\n            sensor = null;\r\n        }\r\n\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            data: sensor\r\n          }\r\n        });\r\n      }\r\n      // Mock get actuator operation logs\r\n      else if (endpoint.match(/\\/actuators\\/\\d+\\/logs$/) && method === 'GET') {\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            data: [\r\n              {\r\n                id: 1,\r\n                actuator_id: parseInt(endpoint.split('/')[2]),\r\n                timestamp: new Date(Date.now() - 1000 * 60 * 5).toISOString(),\r\n                status: 'on',\r\n                message: 'Manual activation of actuator',\r\n                user: 'admin',\r\n                source: 'web'\r\n              },\r\n              {\r\n                id: 2,\r\n                actuator_id: parseInt(endpoint.split('/')[2]),\r\n                timestamp: new Date(Date.now() - 1000 * 60 * 60).toISOString(),\r\n                status: 'off',\r\n                message: 'Actuator turned off by automatic rule',\r\n                user: 'system',\r\n                source: 'rule'\r\n              },\r\n              {\r\n                id: 3,\r\n                actuator_id: parseInt(endpoint.split('/')[2]),\r\n                timestamp: new Date(Date.now() - 1000 * 60 * 60 * 12).toISOString(),\r\n                status: 'on',\r\n                message: 'Adjusted actuator parameters',\r\n                user: 'admin',\r\n                source: 'api'\r\n              }\r\n            ]\r\n          }\r\n        });\r\n      }\r\n      // Mock get actuator allowed statuses\r\n      else if (endpoint.match(/\\/actuators\\/\\d+\\/statuses$/) && method === 'GET') {\r\n        const id = parseInt(endpoint.split('/')[2]);\r\n        let statuses = [];\r\n        \r\n        switch(id) {\r\n          case 1: // Irrigation\r\n            statuses = ['on', 'off'];\r\n            break;\r\n          case 2: // Fan\r\n            statuses = ['off', 'low', 'medium', 'high'];\r\n            break;\r\n          case 3: // Lighting\r\n            statuses = ['on', 'off', 'dim'];\r\n            break;\r\n          case 4: // Humidifier\r\n            statuses = ['on', 'off', 'auto'];\r\n            break;\r\n          default:\r\n            statuses = ['on', 'off'];\r\n        }\r\n        \r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            data: statuses\r\n          }\r\n        });\r\n      }\r\n      // Mock control actuator\r\n      else if (endpoint.match(/\\/actuators\\/\\d+\\/control$/) && method === 'POST') {\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            message: 'Operation successful',\r\n            data: {\r\n              ...data,\r\n              timestamp: new Date().toISOString()\r\n            }\r\n          }\r\n        });\r\n      }\r\n      // Mock update actuator\r\n      else if (endpoint.match(/\\/actuators\\/\\d+$/) && method === 'PUT') {\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            message: 'Update successful',\r\n            data: {\r\n              ...data,\r\n              updated_at: new Date().toISOString()\r\n            }\r\n          }\r\n        });\r\n      }\r\n      // Mock update actuator auto rules\r\n      else if (endpoint.match(/\\/actuators\\/\\d+\\/rules$/) && method === 'PUT') {\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            message: 'Rule update successful',\r\n            data: {\r\n              ...data,\r\n              updated_at: new Date().toISOString()\r\n            }\r\n          }\r\n        });\r\n      }\r\n      // Mock update actuator parameters\r\n      else if (endpoint.match(/\\/actuators\\/\\d+\\/parameters$/) && method === 'PUT') {\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            message: 'Parameter update successful',\r\n            data: {\r\n              ...data,\r\n              updated_at: new Date().toISOString()\r\n            }\r\n          }\r\n        });\r\n      }\r\n      // Mock register user\r\n      else if (endpoint === '/users/register' && method === 'POST') {\r\n        // 模拟用户注册\r\n        if (!data.username || !data.email || !data.password) {\r\n          resolve({\r\n            data: {\r\n              success: false,\r\n              message: 'Missing required fields',\r\n            },\r\n            status: 400\r\n          });\r\n          return;\r\n        }\r\n        \r\n        // 模拟检查用户名是否已存在\r\n        if (data.username === 'admin' || data.username === 'user1') {\r\n          resolve({\r\n            data: {\r\n              success: false,\r\n              message: `Username ${data.username} is already taken`,\r\n            },\r\n            status: 409\r\n          });\r\n          return;\r\n        }\r\n        \r\n        // 模拟检查邮箱是否已存在\r\n        if (data.email === 'admin@smartfarm.com' || data.email === 'user1@smartfarm.com') {\r\n          resolve({\r\n            data: {\r\n              success: false,\r\n              message: `Email ${data.email} is already registered`,\r\n            },\r\n            status: 409\r\n          });\r\n          return;\r\n        }\r\n        \r\n        // 注册成功\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            message: 'User registered successfully',\r\n            data: {\r\n              id: Math.floor(Math.random() * 1000) + 10,\r\n              username: data.username,\r\n              email: data.email,\r\n              role: 'user',\r\n              is_active: true,\r\n              created_at: new Date().toISOString(),\r\n              updated_at: new Date().toISOString()\r\n            }\r\n          },\r\n          status: 201\r\n        });\r\n      }\r\n      // Mock login user\r\n      else if (endpoint === '/users/login' && method === 'POST') {\r\n        // 模拟用户登录\r\n        if (!data.email || !data.password) {\r\n          resolve({\r\n            data: {\r\n              success: false,\r\n              message: 'Missing required fields',\r\n            },\r\n            status: 400\r\n          });\r\n          return;\r\n        }\r\n        \r\n        // 检查测试账户\r\n        if ((data.email === 'admin@smartfarm.com' && data.password === 'password123') || \r\n            (data.email === 'user1@smartfarm.com' && data.password === 'password123') ||\r\n            data.password === 'password123') {  // 任何email只要密码对都通过\r\n          const isAdmin = data.email === 'admin@smartfarm.com';\r\n          const isUser = data.email === 'user1@smartfarm.com';\r\n          \r\n          resolve({\r\n            data: {\r\n              success: true,\r\n              message: 'Login successful',\r\n              data: {\r\n                user: {\r\n                  id: isAdmin ? 1 : (isUser ? 2 : 999),\r\n                  username: isAdmin ? 'admin' : (isUser ? 'user1' : data.email.split('@')[0]),\r\n                  email: data.email,\r\n                  role: isAdmin ? 'admin' : 'user',\r\n                  is_active: true,\r\n                  last_login: new Date().toISOString(),\r\n                  created_at: '2023-01-01T00:00:00Z',\r\n                  updated_at: new Date().toISOString()\r\n                },\r\n                token: 'mock-jwt-token-' + Math.random().toString(36).substring(2)\r\n              }\r\n            },\r\n            status: 200\r\n          });\r\n        } else {\r\n          resolve({\r\n            data: {\r\n              success: false,\r\n              message: 'Invalid email or password',\r\n            },\r\n            status: 401\r\n          });\r\n        }\r\n      }\r\n      // Other endpoints can be added as needed\r\n      else {\r\n        resolve({\r\n          data: {\r\n            success: true,\r\n            message: 'Operation completed',\r\n            data: null\r\n          }\r\n        });\r\n      }\r\n    }, 500); // Simulate network delay\r\n  });\r\n};\r\n\r\n// Export API services with corrected endpoint paths\r\nexport const authAPI = {\r\n  login: (data) => apiCall('/users/login', 'POST', data),\r\n  register: (data) => apiCall('/users/register', 'POST', data),\r\n  getProfile: () => apiCall('/users/profile'),\r\n  updateProfile: (data) => apiCall('/users/profile', 'PUT', data),\r\n  changePassword: (data) => apiCall('/users/change-password', 'POST', data),\r\n};\r\n\r\nexport const dashboardAPI = {\r\n  getSummary: () => {\r\n    // Use data from mock database for dashboard\r\n    console.log('获取仪表盘摘要数据');\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        // Count actuator statuses\r\n        const actuatorStatuses = {};\r\n        mockActuatorDatabase.actuators.forEach(actuator => {\r\n          if (!actuatorStatuses[actuator.type]) {\r\n            actuatorStatuses[actuator.type] = { on: 0, off: 0, error: 0 };\r\n          }\r\n          \r\n          if (actuator.status === 'on') {\r\n            actuatorStatuses[actuator.type].on += 1;\r\n          } else if (actuator.status === 'off') {\r\n            actuatorStatuses[actuator.type].off += 1;\r\n          } else if (actuator.status === 'error') {\r\n            actuatorStatuses[actuator.type].error += 1;\r\n          }\r\n        });\r\n        \r\n        // Calculate active actuators\r\n        const activeActuators = mockActuatorDatabase.actuators.filter(a => a.is_active).length;\r\n        \r\n        // Get latest sensor readings for each type\r\n        const latestReadings = {};\r\n        mockSensorDatabase.sensors.forEach(sensor => {\r\n          if (sensor.is_active && sensor.last_reading) {\r\n            if (!latestReadings[sensor.type] || \r\n                new Date(sensor.last_reading.timestamp) > new Date(latestReadings[sensor.type].timestamp)) {\r\n              latestReadings[sensor.type] = {\r\n                value: sensor.last_reading.value,\r\n                unit: sensor.last_reading.unit,\r\n                sensor_location: sensor.location,\r\n                timestamp: sensor.last_reading.timestamp\r\n              };\r\n            }\r\n          }\r\n        });\r\n        \r\n        // Count active sensors\r\n        const activeSensors = mockSensorDatabase.sensors.filter(s => s.is_active).length;\r\n        \r\n        // Add some logging to see what's being returned\r\n        console.log('仪表盘传感器数据:', {\r\n          total: mockSensorDatabase.sensors.length,\r\n          active: activeSensors,\r\n          latest_readings: latestReadings\r\n        });\r\n        \r\n        console.log('仪表盘执行器数据:', {\r\n          total: mockActuatorDatabase.actuators.length,\r\n          active: activeActuators,\r\n          statuses: actuatorStatuses\r\n        });\r\n        \r\n        // Make sure to return the correct data structure expected by Dashboard component\r\n        resolve({\r\n          success: true,\r\n          data: {\r\n            sensors: {\r\n              total: mockSensorDatabase.sensors.length,\r\n              active: activeSensors,\r\n              latest_readings: latestReadings\r\n            },\r\n            actuators: {\r\n              total: mockActuatorDatabase.actuators.length,\r\n              active: activeActuators,\r\n              statuses: actuatorStatuses\r\n            },\r\n            alerts: {\r\n              total: 5,\r\n              unread: 2,\r\n              recent: [\r\n                {\r\n                  id: 1,\r\n                  type: 'temperature',\r\n                  message: 'Greenhouse 1 temperature above threshold (30°C)',\r\n                  created_at: new Date(Date.now() - 10 * 60000).toISOString(),\r\n                  is_read: false\r\n                },\r\n                {\r\n                  id: 2,\r\n                  type: 'actuator',\r\n                  message: 'Greenhouse 2 irrigation system started',\r\n                  created_at: new Date(Date.now() - 30 * 60000).toISOString(),\r\n                  is_read: true\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        });\r\n      }, 500); // Simulate network delay\r\n    });\r\n  },\r\n};\r\n\r\nexport const sensorAPI = {\r\n  getAllSensors: () => {\r\n    // Use mock data from sensor database\r\n    console.log('获取所有传感器列表');\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          success: true,\r\n          data: mockSensorDatabase.sensors\r\n        });\r\n      }, 500); // Simulate network delay\r\n    });\r\n  },\r\n  getSensor: (id) => {\r\n    // Get specific sensor from mock database\r\n    console.log(`获取传感器详情, ID: ${id}`);\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const sensor = mockSensorDatabase.sensors.find(s => s.id === parseInt(id));\r\n        if (sensor) {\r\n          resolve({\r\n            success: true,\r\n            data: sensor\r\n          });\r\n        } else {\r\n          resolve({\r\n            success: false,\r\n            message: `Sensor with ID ${id} not found`\r\n          });\r\n        }\r\n      }, 500); // Simulate network delay\r\n    });\r\n  },\r\n  getSensorData: (id, timeRange) => apiCall(`/sensors/${id}/data?timeRange=${timeRange}`),\r\n  updateSensor: (id, data) => apiCall(`/sensors/${id}`, 'PUT', data),\r\n  calibrateSensor: (id, data) => apiCall(`/sensors/${id}/calibrate`, 'POST', data),\r\n};\r\n\r\nexport const actuatorAPI = {\r\n  getAllActuators: () => {\r\n    // Use data from localStorage if available, otherwise use mock data\r\n    console.log('Getting all actuators');\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        // Try to get from localStorage first\r\n        const savedActuators = localStorage.getItem('smart_farm_actuators');\r\n        \r\n        if (savedActuators) {\r\n          // If localStorage has data, use it\r\n          resolve({\r\n            success: true,\r\n            data: JSON.parse(savedActuators)\r\n          });\r\n        } else {\r\n          // Otherwise use mock data and save it to localStorage\r\n          localStorage.setItem('smart_farm_actuators', JSON.stringify(mockActuatorDatabase.actuators));\r\n          resolve({\r\n            success: true,\r\n            data: mockActuatorDatabase.actuators\r\n          });\r\n        }\r\n      }, 500); // Simulate network delay\r\n    });\r\n  },\r\n  getActuator: (id) => {\r\n    // Use mock data for actuator details from the mock database\r\n    console.log(`获取执行器详情, ID: ${id}`);\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const actuator = mockActuatorDatabase.actuators.find(a => a.id === parseInt(id)) || {\r\n          id: parseInt(id),\r\n          name: `Unknown Actuator ${id}`,\r\n          type: 'unknown',\r\n          location: 'Unknown',\r\n          status: 'error',\r\n          mode: 'manual',\r\n          is_active: false,\r\n          mqtt_topic: `farm/actuators/unknown/${id}`,\r\n          created_at: '2023-10-01T08:00:00Z',\r\n          updated_at: '2023-11-15T10:30:00Z'\r\n        };\r\n        \r\n        resolve({\r\n          success: true,\r\n          data: actuator\r\n        });\r\n      }, 500); // Simulate network delay\r\n    });\r\n  },\r\n  getActuatorLogs: (id) => {\r\n    // Get logs for specific actuator from mock database\r\n    console.log(`获取执行器日志, ID: ${id}`);\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const logs = mockActuatorDatabase.logs\r\n          .filter(log => log.actuator_id === parseInt(id))\r\n          .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\r\n          \r\n        if (logs.length === 0) {\r\n          // If no logs exist yet, return some default ones\r\n          logs.push(\r\n            {\r\n              id: 1,\r\n              actuator_id: parseInt(id),\r\n              timestamp: new Date(Date.now() - 1000 * 60 * 5).toISOString(),\r\n              status: 'on',\r\n              message: 'Manual activation of actuator',\r\n              user: 'admin',\r\n              source: 'web'\r\n            },\r\n            {\r\n              id: 2,\r\n              actuator_id: parseInt(id),\r\n              timestamp: new Date(Date.now() - 1000 * 60 * 60).toISOString(),\r\n              status: 'off',\r\n              message: 'Actuator turned off by automatic rule',\r\n              user: 'system',\r\n              source: 'rule'\r\n            }\r\n          );\r\n        }\r\n        \r\n        resolve({\r\n          success: true,\r\n          data: logs\r\n        });\r\n      }, 500); // Simulate network delay\r\n    });\r\n  },\r\n  getActuatorStatuses: (id) => {\r\n    // Return available statuses based on actuator type\r\n    console.log(`获取执行器状态选项, ID: ${id}`);\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const actuator = mockActuatorDatabase.actuators.find(a => a.id === parseInt(id));\r\n        let statuses = ['on', 'off']; // Default statuses\r\n        \r\n        if (actuator) {\r\n          switch(actuator.type) {\r\n            case 'fan':\r\n              statuses = ['off', 'low', 'medium', 'high'];\r\n              break;\r\n            case 'lighting':\r\n              statuses = ['on', 'off', 'dim'];\r\n              break;\r\n            case 'humidifier':\r\n              statuses = ['on', 'off', 'auto'];\r\n              break;\r\n            case 'curtain':\r\n              statuses = ['open', 'closed', 'half'];\r\n              break;\r\n          }\r\n        }\r\n        \r\n        resolve({\r\n          success: true,\r\n          data: statuses\r\n        });\r\n      }, 500); // Simulate network delay\r\n    });\r\n  },\r\n  controlActuator: (id, data) => {\r\n    // Update actuator status in localStorage\r\n    console.log(`Controlling actuator, ID: ${id}, Action: ${JSON.stringify(data)}`);\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        // Get the action from the data\r\n        const action = data.action;\r\n        \r\n        // Get actuators from localStorage\r\n        const savedActuators = localStorage.getItem('smart_farm_actuators');\r\n        let actuators = [];\r\n        \r\n        if (savedActuators) {\r\n          actuators = JSON.parse(savedActuators);\r\n        } else {\r\n          actuators = mockActuatorDatabase.actuators;\r\n        }\r\n        \r\n        // Find the actuator to update\r\n        const actuatorIndex = actuators.findIndex(a => a.id === parseInt(id));\r\n        if (actuatorIndex === -1) {\r\n          resolve({\r\n            success: false,\r\n            message: `Actuator with ID ${id} not found`\r\n          });\r\n          return;\r\n        }\r\n        \r\n        // Record previous status to detect changes\r\n        const previousStatus = actuators[actuatorIndex].status;\r\n        \r\n        // Update the actuator\r\n        actuators[actuatorIndex].status = action;\r\n        actuators[actuatorIndex].last_control_time = new Date().toISOString();\r\n        \r\n        // Save back to localStorage\r\n        localStorage.setItem('smart_farm_actuators', JSON.stringify(actuators));\r\n        \r\n        // Also update the mock database for other operations\r\n        const updatedActuator = updateActuatorInDatabase(id, {\r\n          status: action,\r\n          last_control_time: new Date().toISOString()\r\n        });\r\n        \r\n        // Add a log entry\r\n        const log = addLogToDatabase(\r\n          id, \r\n          action, \r\n          `Actuator ${action === 'on' ? 'turned on' : 'turned off'} manually`\r\n        );\r\n        \r\n        console.log(`Actuator ${id} status changed from ${previousStatus} to ${action}`);\r\n        \r\n        resolve({\r\n          success: true,\r\n          message: 'Operation successful',\r\n          data: {\r\n            actuator: actuators[actuatorIndex],\r\n            log: log\r\n          }\r\n        });\r\n      }, 500); // Simulate network delay\r\n    });\r\n  },\r\n  updateActuator: (id, data) => {\r\n    // Update actuator properties in localStorage\r\n    console.log(`Updating actuator, ID: ${id}, Data: ${JSON.stringify(data)}`);\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        // Get actuators from localStorage\r\n        const savedActuators = localStorage.getItem('smart_farm_actuators');\r\n        let actuators = [];\r\n        \r\n        if (savedActuators) {\r\n          actuators = JSON.parse(savedActuators);\r\n        } else {\r\n          actuators = mockActuatorDatabase.actuators;\r\n        }\r\n        \r\n        // Find the actuator to update\r\n        const actuatorIndex = actuators.findIndex(a => a.id === parseInt(id));\r\n        \r\n        if (actuatorIndex !== -1) {\r\n          // Update the actuator\r\n          actuators[actuatorIndex] = {\r\n            ...actuators[actuatorIndex],\r\n            ...data,\r\n            updated_at: new Date().toISOString()\r\n          };\r\n          \r\n          // Save back to localStorage\r\n          localStorage.setItem('smart_farm_actuators', JSON.stringify(actuators));\r\n          \r\n          // Also update the mock database for other operations\r\n          const updatedActuator = updateActuatorInDatabase(id, data);\r\n          \r\n          addLogToDatabase(\r\n            id, \r\n            actuators[actuatorIndex].status, \r\n            'Actuator settings updated'\r\n          );\r\n          \r\n          resolve({\r\n            success: true,\r\n            message: 'Update successful',\r\n            data: actuators[actuatorIndex]\r\n          });\r\n        } else {\r\n          resolve({\r\n            success: false,\r\n            message: `Actuator with ID ${id} not found`,\r\n          });\r\n        }\r\n      }, 500); // Simulate network delay\r\n    });\r\n  },\r\n  updateActuatorRules: (id, data) => {\r\n    // Update actuator rules in mock database\r\n    console.log(`更新执行器规则, ID: ${id}, 规则: ${JSON.stringify(data)}`);\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const actuator = mockActuatorDatabase.actuators.find(a => a.id === parseInt(id));\r\n        \r\n        if (actuator) {\r\n          const updatedActuator = updateActuatorInDatabase(id, {\r\n            rules: data\r\n          });\r\n          \r\n          addLogToDatabase(\r\n            id, \r\n            actuator.status, \r\n            'Actuator automation rules updated'\r\n          );\r\n          \r\n          resolve({\r\n            success: true,\r\n            message: 'Rules updated successfully',\r\n            data: updatedActuator\r\n          });\r\n        } else {\r\n          resolve({\r\n            success: false,\r\n            message: `Actuator with ID ${id} not found`,\r\n          });\r\n        }\r\n      }, 500); // Simulate network delay\r\n    });\r\n  },\r\n  updateActuatorParameters: (id, data) => {\r\n    // Update actuator parameters in mock database\r\n    console.log(`更新执行器参数, ID: ${id}, 参数: ${JSON.stringify(data)}`);\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const actuator = mockActuatorDatabase.actuators.find(a => a.id === parseInt(id));\r\n        \r\n        if (actuator) {\r\n          const updatedActuator = updateActuatorInDatabase(id, {\r\n            parameters: {\r\n              ...actuator.parameters,\r\n              ...data\r\n            }\r\n          });\r\n          \r\n          addLogToDatabase(\r\n            id, \r\n            actuator.status, \r\n            'Actuator parameters updated'\r\n          );\r\n          \r\n          resolve({\r\n            success: true,\r\n            message: 'Parameters updated successfully',\r\n            data: updatedActuator\r\n          });\r\n        } else {\r\n          resolve({\r\n            success: false,\r\n            message: `Actuator with ID ${id} not found`,\r\n          });\r\n        }\r\n      }, 500); // Simulate network delay\r\n    });\r\n  },\r\n};\r\n\r\nexport const alertAPI = {\r\n  getAlerts: (page = 1, limit = 10) => apiCall(`/alerts?page=${page}&limit=${limit}`),\r\n  markAsRead: (id) => apiCall(`/alerts/${id}/read`, 'POST'),\r\n  markAllAsRead: () => apiCall('/alerts/read-all', 'POST'),\r\n  deleteAlert: (id) => apiCall(`/alerts/${id}`, 'DELETE'),\r\n  getAlertSettings: () => apiCall('/alerts/settings'),\r\n  updateAlertSettings: (data) => apiCall('/alerts/settings', 'PUT', data),\r\n};\r\n\r\nexport const analyticsAPI = {\r\n  getSensorStats: (timeRange) => apiCall(`/analytics/sensors?timeRange=${timeRange}`),\r\n  getActuatorStats: (timeRange) => apiCall(`/analytics/actuators?timeRange=${timeRange}`),\r\n  getCorrelationData: (sensors, timeRange) => apiCall(`/analytics/correlation?sensors=${sensors.join(',')}&timeRange=${timeRange}`),\r\n  getEnergyUsage: (timeRange) => apiCall(`/analytics/energy?timeRange=${timeRange}`),\r\n  getYieldData: (timeRange) => apiCall(`/analytics/yield?timeRange=${timeRange}`),\r\n};\r\n\r\nexport const settingsAPI = {\r\n  getSystemSettings: () => apiCall('/settings/system'),\r\n  updateSystemSettings: (data) => apiCall('/settings/system', 'PUT', data),\r\n  getNotificationSettings: () => apiCall('/settings/notifications'),\r\n  updateNotificationSettings: (data) => apiCall('/settings/notifications', 'PUT', data),\r\n  getBackupSettings: () => apiCall('/settings/backup'),\r\n  updateBackupSettings: (data) => apiCall('/settings/backup', 'PUT', data),\r\n  backupNow: () => apiCall('/settings/backup/now', 'POST'),\r\n  restoreBackup: (id) => apiCall(`/settings/backup/restore/${id}`, 'POST'),\r\n  getDeviceSettings: () => apiCall('/settings/devices'),\r\n  updateDeviceSettings: (data) => apiCall('/settings/devices', 'PUT', data),\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}